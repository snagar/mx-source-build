// **************************************************************************
// Generated by mxconst_builder.sh on: "2025 May 01, 23:37:59"
//
// Do not modify this class file since it will be overridden by the generate script.
// Any modification should be done in the "mxconst.template" file.
//
// Any modification done, will be at your own risk
//
// **************************************************************************


#ifndef MXCONST_H
#define MXCONST_H
#include <string>
#include <vector>
#include <map>
#include <unordered_map>
// #include  "xx_mission_constants.hpp"

namespace missionx {

class mxconst {
private:
static constexpr  float  meter2feet =  3.28083f;

public:

// ---> vecMarkerTypeOptions
typedef struct st_vecmarkertypeoptions {
  std::vector<const char*> value = { "Default (point down)", "Point up 15m", "Point down 15m", "Tall point down 15x60", "Point down 60m", "Point up 60m", "Static Mission-X Text (40m)", "Rotate Mission-X Text (40m)", "Smooth Rotate Mission-X Text (40m)", "Smooth Rotate Mission-X Text (250m)", "Smooth Rotate X (40m)", "Smooth Rotate X (128m)" };
[[nodiscard]]  std::vector<const char*> getValue() const { return value; }
} st_vecmarkertypeoptions;
// -- getter -- 
static std::vector<const char*> get_vecMarkerTypeOptions() {
  static const st_vecmarkertypeoptions instance;
  return instance.getValue();
}
// vecMarkerTypeOptions <---

// ---> vecMarkerTypeOptions_markers
typedef struct st_vecmarkertypeoptions_markers {
  std::vector<std::string> value = { "marker01", "marker02", "marker03", "marker04", "marker05", "marker06", "marker07", "marker08", "marker09", "marker10", "marker11", "marker12" };
[[nodiscard]]  std::vector<std::string> getValue() const { return value; }
} st_vecmarkertypeoptions_markers;
// -- getter -- 
static std::vector<std::string> get_vecMarkerTypeOptions_markers() {
  static const st_vecmarkertypeoptions_markers instance;
  return instance.getValue();
}
// vecMarkerTypeOptions_markers <---


// ---> DEFAULT_CYCLE
typedef struct st_default_cycle {
  std::string  value =  "1802";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_default_cycle;
// -- getter -- 
static std::string  get_DEFAULT_CYCLE() {
  static const st_default_cycle instance;
  return instance.getValue();
}
// DEFAULT_CYCLE <---

// ---> DEFAULT_FONT_LOCATION_0
typedef struct st_default_font_location_0 {
  std::string  value =  "./Resources/plugins/missionx/libs/fonts/DejaVuSansMono.ttf";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_default_font_location_0;
// -- getter -- 
static std::string  get_DEFAULT_FONT_LOCATION_0() {
  static const st_default_font_location_0 instance;
  return instance.getValue();
}
// DEFAULT_FONT_LOCATION_0 <---

// ---> DEFAULT_FONT_LOCATION_1
typedef struct st_default_font_location_1 {
  std::string  value =  "./Resources/plugins/missionx/libs/fonts/Inconsolata.ttf";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_default_font_location_1;
// -- getter -- 
static std::string  get_DEFAULT_FONT_LOCATION_1() {
  static const st_default_font_location_1 instance;
  return instance.getValue();
}
// DEFAULT_FONT_LOCATION_1 <---

// ---> DEFAULT_FONT_LOCATION_2
typedef struct st_default_font_location_2 {
  std::string  value =  "./Resources/plugins/missionx/libs/fonts/Roboto-Bold.ttf";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_default_font_location_2;
// -- getter -- 
static std::string  get_DEFAULT_FONT_LOCATION_2() {
  static const st_default_font_location_2 instance;
  return instance.getValue();
}
// DEFAULT_FONT_LOCATION_2 <---

// ---> DEFAULT_FONT_LOCATION_3
typedef struct st_default_font_location_3 {
  std::string  value =  "./Resources/plugins/missionx/libs/fonts/EBGaramond-Bold.ttf";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_default_font_location_3;
// -- getter -- 
static std::string  get_DEFAULT_FONT_LOCATION_3() {
  static const st_default_font_location_3 instance;
  return instance.getValue();
}
// DEFAULT_FONT_LOCATION_3 <---



// ---> TEXT_TYPE_DEFAULT
typedef struct st_text_type_default {
  std::string  value =  "default_font";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_text_type_default;
// -- getter -- 
static std::string  get_TEXT_TYPE_DEFAULT() {
  static const st_text_type_default instance;
  return instance.getValue();
}
// TEXT_TYPE_DEFAULT <---

// ---> TEXT_TYPE_DEFAULT_PLUS_1
typedef struct st_text_type_default_plus_1 {
  std::string  value =  "default_font+1";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_text_type_default_plus_1;
// -- getter -- 
static std::string  get_TEXT_TYPE_DEFAULT_PLUS_1() {
  static const st_text_type_default_plus_1 instance;
  return instance.getValue();
}
// TEXT_TYPE_DEFAULT_PLUS_1 <---

// ---> TEXT_TYPE_TITLE_SMALL
typedef struct st_text_type_title_small {
  std::string  value =  "title_small";   
[[nodiscard]]  std::string  getValue() const { return value; }
} st_text_type_title_small;
// -- getter -- 
static std::string  get_TEXT_TYPE_TITLE_SMALL() {
  static const st_text_type_title_small instance;
  return instance.getValue();
}
// TEXT_TYPE_TITLE_SMALL <---

// ---> TEXT_TYPE_TITLE_SMALLEST
typedef struct st_text_type_title_smallest {
  std::string  value =  "title_smallest";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_text_type_title_smallest;
// -- getter -- 
static std::string  get_TEXT_TYPE_TITLE_SMALLEST() {
  static const st_text_type_title_smallest instance;
  return instance.getValue();
}
// TEXT_TYPE_TITLE_SMALLEST <---

// ---> TEXT_TYPE_TITLE_REG
typedef struct st_text_type_title_reg {
  std::string  value =  "title_reg";     
[[nodiscard]]  std::string  getValue() const { return value; }
} st_text_type_title_reg;
// -- getter -- 
static std::string  get_TEXT_TYPE_TITLE_REG() {
  static const st_text_type_title_reg instance;
  return instance.getValue();
}
// TEXT_TYPE_TITLE_REG <---

// ---> TEXT_TYPE_TITLE_MED
typedef struct st_text_type_title_med {
  std::string  value =  "title_med";     
[[nodiscard]]  std::string  getValue() const { return value; }
} st_text_type_title_med;
// -- getter -- 
static std::string  get_TEXT_TYPE_TITLE_MED() {
  static const st_text_type_title_med instance;
  return instance.getValue();
}
// TEXT_TYPE_TITLE_MED <---

// ---> TEXT_TYPE_TITLE_BIG
typedef struct st_text_type_title_big {
  std::string  value =  "title_big";     
[[nodiscard]]  std::string  getValue() const { return value; }
} st_text_type_title_big;
// -- getter -- 
static std::string  get_TEXT_TYPE_TITLE_BIG() {
  static const st_text_type_title_big instance;
  return instance.getValue();
}
// TEXT_TYPE_TITLE_BIG <---

// ---> TEXT_TYPE_TEXT_REG
typedef struct st_text_type_text_reg {
  std::string  value =  "text_reg";      
[[nodiscard]]  std::string  getValue() const { return value; }
} st_text_type_text_reg;
// -- getter -- 
static std::string  get_TEXT_TYPE_TEXT_REG() {
  static const st_text_type_text_reg instance;
  return instance.getValue();
}
// TEXT_TYPE_TEXT_REG <---

// ---> TEXT_TYPE_TEXT_MED
typedef struct st_text_type_text_med {
  std::string  value =  "text_med";      
[[nodiscard]]  std::string  getValue() const { return value; }
} st_text_type_text_med;
// -- getter -- 
static std::string  get_TEXT_TYPE_TEXT_MED() {
  static const st_text_type_text_med instance;
  return instance.getValue();
}
// TEXT_TYPE_TEXT_MED <---

// ---> TEXT_TYPE_TEXT_SMALL
typedef struct st_text_type_text_small {
  std::string  value =  "text_small";    
[[nodiscard]]  std::string  getValue() const { return value; }
} st_text_type_text_small;
// -- getter -- 
static std::string  get_TEXT_TYPE_TEXT_SMALL() {
  static const st_text_type_text_small instance;
  return instance.getValue();
}
// TEXT_TYPE_TEXT_SMALL <---

// ---> TEXT_TYPE_MSG_BOTTOM
typedef struct st_text_type_msg_bottom {
  std::string  value =  "msg_bottom";    
[[nodiscard]]  std::string  getValue() const { return value; }
} st_text_type_msg_bottom;
// -- getter -- 
static std::string  get_TEXT_TYPE_MSG_BOTTOM() {
  static const st_text_type_msg_bottom instance;
  return instance.getValue();
}
// TEXT_TYPE_MSG_BOTTOM <---

// ---> TEXT_TYPE_MSG_POPUP
typedef struct st_text_type_msg_popup {
  std::string  value =  "msg_popup";     
[[nodiscard]]  std::string  getValue() const { return value; }
} st_text_type_msg_popup;
// -- getter -- 
static std::string  get_TEXT_TYPE_MSG_POPUP() {
  static const st_text_type_msg_popup instance;
  return instance.getValue();
}
// TEXT_TYPE_MSG_POPUP <---

// ---> TEXT_TYPE_TITLE_TOOLBAR
typedef struct st_text_type_title_toolbar {
  std::string  value =  "title_toolbar"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_text_type_title_toolbar;
// -- getter -- 
static std::string  get_TEXT_TYPE_TITLE_TOOLBAR() {
  static const st_text_type_title_toolbar instance;
  return instance.getValue();
}
// TEXT_TYPE_TITLE_TOOLBAR <---


static constexpr  float  FONT_PIXEL_13 =  13.0f;  // // v3.0.251.1 holds preferred font pixel size
static constexpr  float  FONT_PIXEL_14 =  14.0f;  // // v3.303.14 holds preferred font pixel size for bigger characters
static constexpr  float  FONT_PIXEL_15 =  15.0f;  // // v3.303.14 holds preferred font pixel size for bigger characters
static constexpr  float  FONT_PIXEL_16 =  16.0f;  // // v3.303.14 holds preferred font pixel size for bigger characters
static constexpr  float  FONT_PIXEL_18 =  18.0f;  // // v3.303.14 holds preferred font pixel size for bigger characters
static constexpr  float  FONT_PIXEL_20 =  20.0f;  // // v3.303.14 holds preferred font pixel size for bigger characters
static constexpr  float  FONT_PIXEL_22 =  22.0f;  // // v3.303.14 holds preferred font pixel size for bigger characters
static constexpr  float  FONT_PIXEL_24 =  24.0f;  // // v3.303.14 holds preferred font pixel size for bigger characters
static constexpr  float  FONT_PIXEL_26 =  26.0f;  // // v3.303.14 holds preferred font pixel size for bigger characters
static constexpr  float  FONT_PIXEL_32 =  32.0f;  // // v3.303.14 holds preferred font pixel size for bigger characters

static constexpr  float  DEFAULT_MIN_FONT_PIXEL_SIZE =  12.0f;
static constexpr  float  DEFAULT_MAX_FONT_PIXEL_SIZE =  16.0f;

static constexpr  float  DEFAULT_MIN_FONT_SCALE =  0.8f;
static constexpr  float  DEFAULT_MAX_FONT_SCALE =  1.4f;
static constexpr  float  DEFAULT_BASE_FONT_SCALE =  1.0f;

// FILE NAMES
// ---> CUSTOM_APT_DAT_FILE
typedef struct st_custom_apt_dat_file {
  std::string  value =  "customAptDat.txt";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_custom_apt_dat_file;
// -- getter -- 
static std::string  get_CUSTOM_APT_DAT_FILE() {
  static const st_custom_apt_dat_file instance;
  return instance.getValue();
}
// CUSTOM_APT_DAT_FILE <---


// General
// ---> UNIX_EOL
typedef struct st_unix_eol {
  std::string  value =  "\n";           // used in Unix like OSes for end of line;
[[nodiscard]]  std::string  getValue() const { return value; }
} st_unix_eol;
// -- getter -- 
static std::string  get_UNIX_EOL() {
  static const st_unix_eol instance;
  return instance.getValue();
}
// UNIX_EOL <---

// ---> WIN_EOL
typedef struct st_win_eol {
  std::string  value =  "\r\n";         // Windows end of line;
[[nodiscard]]  std::string  getValue() const { return value; }
} st_win_eol;
// -- getter -- 
static std::string  get_WIN_EOL() {
  static const st_win_eol instance;
  return instance.getValue();
}
// WIN_EOL <---

// ---> QM
typedef struct st_qm {
  std::string  value =  "\"";           // Quotation Mark;
[[nodiscard]]  std::string  getValue() const { return value; }
} st_qm;
// -- getter -- 
static std::string  get_QM() {
  static const st_qm instance;
  return instance.getValue();
}
// QM <---

// ---> SPACE
typedef struct st_space {
  std::string  value =  " ";            // SPACE;
[[nodiscard]]  std::string  getValue() const { return value; }
} st_space;
// -- getter -- 
static std::string  get_SPACE() {
  static const st_space instance;
  return instance.getValue();
}
// SPACE <---

// ---> FOLDER_SEPARATOR
typedef struct st_folder_separator {
  std::string  value =  "/";            // folder separator;
[[nodiscard]]  std::string  getValue() const { return value; }
} st_folder_separator;
// -- getter -- 
static std::string  get_FOLDER_SEPARATOR() {
  static const st_folder_separator instance;
  return instance.getValue();
}
// FOLDER_SEPARATOR <---

// ---> BRIEFER_FOLDER
typedef struct st_briefer_folder {
  std::string  value =  "briefer";      // v24.12.1 refactor // v3.0.x name of the mandatory folder that the mission file/s will reside;
[[nodiscard]]  std::string  getValue() const { return value; }
} st_briefer_folder;
// -- getter -- 
static std::string  get_BRIEFER_FOLDER() {
  static const st_briefer_folder instance;
  return instance.getValue();
}
// BRIEFER_FOLDER <---

// ---> TEMPLATE_FILE_NAME
typedef struct st_template_file_name {
  std::string  value =  "template.xml"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_template_file_name;
// -- getter -- 
static std::string  get_TEMPLATE_FILE_NAME() {
  static const st_template_file_name instance;
  return instance.getValue();
}
// TEMPLATE_FILE_NAME <---

// ---> FOLDER_RANDOM_MISSION_NAME
typedef struct st_folder_random_mission_name {
  std::string  value =  "random";       // v3.0.217.3 name of the random folder;
[[nodiscard]]  std::string  getValue() const { return value; }
} st_folder_random_mission_name;
// -- getter -- 
static std::string  get_FOLDER_RANDOM_MISSION_NAME() {
  static const st_folder_random_mission_name instance;
  return instance.getValue();
}
// FOLDER_RANDOM_MISSION_NAME <---

// ---> RANDOM_MISSION_DATA_FILE_NAME
typedef struct st_random_mission_data_file_name {
  std::string  value =  "random.xml";   // v3.0.217.3 name of the random folder;
[[nodiscard]]  std::string  getValue() const { return value; }
} st_random_mission_data_file_name;
// -- getter -- 
static std::string  get_RANDOM_MISSION_DATA_FILE_NAME() {
  static const st_random_mission_data_file_name instance;
  return instance.getValue();
}
// RANDOM_MISSION_DATA_FILE_NAME <---

// ---> COLON
typedef struct st_colon {
  std::string  value =  ":";            // v3.0.223.6;
[[nodiscard]]  std::string  getValue() const { return value; }
} st_colon;
// -- getter -- 
static std::string  get_COLON() {
  static const st_colon instance;
  return instance.getValue();
}
// COLON <---

// ---> COMMA_DELIMITER
typedef struct st_comma_delimiter {
  std::string  value =  ",";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_comma_delimiter;
// -- getter -- 
static std::string  get_COMMA_DELIMITER() {
  static const st_comma_delimiter instance;
  return instance.getValue();
}
// COMMA_DELIMITER <---

// ---> PIPE_DELIMITER
typedef struct st_pipe_delimiter {
  std::string  value =  "|";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_pipe_delimiter;
// -- getter -- 
static std::string  get_PIPE_DELIMITER() {
  static const st_pipe_delimiter instance;
  return instance.getValue();
}
// PIPE_DELIMITER <---



static constexpr  double  TWNENTY_METERS_D =  20.0;  // // v3.0.241.10 b3 - used in position plane. This is the threshold distance in meters that will be converted to NM
static constexpr  double  MIN_ACCEPTABLE_DISTANCE_TO_GUESS_WP_TYPE_NM_D =  1.0;   // // v3.0.255.2 - used in guessing waypoint type.


// ---> CONVERTER_FILE
typedef struct st_converter_file {
  std::string  value =  "converter.sav";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_converter_file;
// -- getter -- 
static std::string  get_CONVERTER_FILE() {
  static const st_converter_file instance;
  return instance.getValue();
}
// CONVERTER_FILE <---



// V3.0.0 /// V3.0.0 /// V3.0.0 /// V3.0.0 /// V3.0.0 ///// V3.0.0 /// V3.0.0 /// V3.0.0 /// V3.0.0 /// V3.0.0 ///
// V3.0.0 /// V3.0.0 /// V3.0.0 /// V3.0.0 /// V3.0.0 ///// V3.0.0 /// V3.0.0 /// V3.0.0 /// V3.0.0 /// V3.0.0 ///
// V3.0.0 /// V3.0.0 /// V3.0.0 /// V3.0.0 /// V3.0.0 ///// V3.0.0 /// V3.0.0 /// V3.0.0 /// V3.0.0 /// V3.0.0 ///

// custom dataref
// ---> FILE_CUSTOM_ACF_CACHED_DATAREFS_NAME
typedef struct st_file_custom_acf_cached_datarefs_name {
  std::string  value =  "missionx_cached_datarefs.txt"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_file_custom_acf_cached_datarefs_name;
// -- getter -- 
static std::string  get_FILE_CUSTOM_ACF_CACHED_DATAREFS_NAME() {
  static const st_file_custom_acf_cached_datarefs_name instance;
  return instance.getValue();
}
// FILE_CUSTOM_ACF_CACHED_DATAREFS_NAME <---



// Common Attributes
// ---> ATTRIB_MXFEATURE
typedef struct st_attrib_mxfeature {
  std::string  value =  "mxfeature";      
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_mxfeature;
// -- getter -- 
static std::string  get_ATTRIB_MXFEATURE() {
  static const st_attrib_mxfeature instance;
  return instance.getValue();
}
// ATTRIB_MXFEATURE <---

// ---> ATTRIB_XP_VERSION
typedef struct st_attrib_xp_version {
  std::string  value =  "xp_version";     
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_xp_version;
// -- getter -- 
static std::string  get_ATTRIB_XP_VERSION() {
  static const st_attrib_xp_version instance;
  return instance.getValue();
}
// ATTRIB_XP_VERSION <---

// ---> ATTRIB_PLUGIN_VERSION
typedef struct st_attrib_plugin_version {
  std::string  value =  "plugin_version"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_plugin_version;
// -- getter -- 
static std::string  get_ATTRIB_PLUGIN_VERSION() {
  static const st_attrib_plugin_version instance;
  return instance.getValue();
}
// ATTRIB_PLUGIN_VERSION <---

// ---> ELEMENT_SETUP
typedef struct st_element_setup {
  std::string  value =  "setup";          
[[nodiscard]]  std::string  getValue() const { return value; }
} st_element_setup;
// -- getter -- 
static std::string  get_ELEMENT_SETUP() {
  static const st_element_setup instance;
  return instance.getValue();
}
// ELEMENT_SETUP <---

// ---> ELEMENT_NODE
typedef struct st_element_node {
  std::string  value =  "node";           
[[nodiscard]]  std::string  getValue() const { return value; }
} st_element_node;
// -- getter -- 
static std::string  get_ELEMENT_NODE() {
  static const st_element_node instance;
  return instance.getValue();
}
// ELEMENT_NODE <---

// ---> ELEMENT_OPTIONS_CAPITAL_LETTERS
typedef struct st_element_options_capital_letters {
  std::string  value =  "OPTIONS";        
[[nodiscard]]  std::string  getValue() const { return value; }
} st_element_options_capital_letters;
// -- getter -- 
static std::string  get_ELEMENT_OPTIONS_CAPITAL_LETTERS() {
  static const st_element_options_capital_letters instance;
  return instance.getValue();
}
// ELEMENT_OPTIONS_CAPITAL_LETTERS <---

// ---> ELEMENT_TEMPLATE_REPLACE_OPTIONS
typedef struct st_element_template_replace_options {
  std::string  value =  "REPLACE_OPTIONS";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_element_template_replace_options;
// -- getter -- 
static std::string  get_ELEMENT_TEMPLATE_REPLACE_OPTIONS() {
  static const st_element_template_replace_options instance;
  return instance.getValue();
}
// ELEMENT_TEMPLATE_REPLACE_OPTIONS <---

// ---> ELEMENT_OPT
typedef struct st_element_opt {
  std::string  value =  "opt";            
[[nodiscard]]  std::string  getValue() const { return value; }
} st_element_opt;
// -- getter -- 
static std::string  get_ELEMENT_OPT() {
  static const st_element_opt instance;
  return instance.getValue();
}
// ELEMENT_OPT <---

// ---> ELEMENT_FIND_REPLACE
typedef struct st_element_find_replace {
  std::string  value =  "find_replace";   
[[nodiscard]]  std::string  getValue() const { return value; }
} st_element_find_replace;
// -- getter -- 
static std::string  get_ELEMENT_FIND_REPLACE() {
  static const st_element_find_replace instance;
  return instance.getValue();
}
// ELEMENT_FIND_REPLACE <---

// ---> ELEMENT_INFO
typedef struct st_element_info {
  std::string  value =  "info";           
[[nodiscard]]  std::string  getValue() const { return value; }
} st_element_info;
// -- getter -- 
static std::string  get_ELEMENT_INFO() {
  static const st_element_info instance;
  return instance.getValue();
}
// ELEMENT_INFO <---

// ---> ELEMENT_ERROR
typedef struct st_element_error {
  std::string  value =  "error";          
[[nodiscard]]  std::string  getValue() const { return value; }
} st_element_error;
// -- getter -- 
static std::string  get_ELEMENT_ERROR() {
  static const st_element_error instance;
  return instance.getValue();
}
// ELEMENT_ERROR <---

// ---> ELEMENT_WARNING
typedef struct st_element_warning {
  std::string  value =  "warning";        
[[nodiscard]]  std::string  getValue() const { return value; }
} st_element_warning;
// -- getter -- 
static std::string  get_ELEMENT_WARNING() {
  static const st_element_warning instance;
  return instance.getValue();
}
// ELEMENT_WARNING <---

// ---> ATTRIB_ID
typedef struct st_attrib_id {
  std::string  value =  "id";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_id;
// -- getter -- 
static std::string  get_ATTRIB_ID() {
  static const st_attrib_id instance;
  return instance.getValue();
}
// ATTRIB_ID <---

// ---> ATTRIB_TITLE
typedef struct st_attrib_title {
  std::string  value =  "title";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_title;
// -- getter -- 
static std::string  get_ATTRIB_TITLE() {
  static const st_attrib_title instance;
  return instance.getValue();
}
// ATTRIB_TITLE <---

// ---> ATTRIB_OPTIONAL
typedef struct st_attrib_optional {
  std::string  value =  "optional";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_optional;
// -- getter -- 
static std::string  get_ATTRIB_OPTIONAL() {
  static const st_attrib_optional instance;
  return instance.getValue();
}
// ATTRIB_OPTIONAL <---


// ---> ATTRIB_STARTING_ICAO
typedef struct st_attrib_starting_icao {
  std::string  value =  "starting_icao";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_starting_icao;
// -- getter -- 
static std::string  get_ATTRIB_STARTING_ICAO() {
  static const st_attrib_starting_icao instance;
  return instance.getValue();
}
// ATTRIB_STARTING_ICAO <---




static constexpr  int    MAX_ITEM_IN_INVENTORY =  15;  // // v3.0.213.4 // used in em_reset_inventory_item_table() function.
static constexpr  float  AGL_TO_GATHER_FPM_DATA =  15.0f;  // // v3.0.213.4 // used in em_reset_inventory_item_table() function.

static constexpr  int  INT_UNDEFINED =  -1;
static constexpr  int  INT_FIRST_0 =  0;

// ---> ZERO
typedef struct st_zero {
  std::string  value =  "0";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_zero;
// -- getter -- 
static std::string  get_ZERO() {
  static const st_zero instance;
  return instance.getValue();
}
// ZERO <---

// ---> ONE
typedef struct st_one {
  std::string  value =  "1";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_one;
// -- getter -- 
static std::string  get_ONE() {
  static const st_one instance;
  return instance.getValue();
}
// ONE <---

// ---> TWO
typedef struct st_two {
  std::string  value =  "2";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_two;
// -- getter -- 
static std::string  get_TWO() {
  static const st_two instance;
  return instance.getValue();
}
// TWO <---

// ---> THREE
typedef struct st_three {
  std::string  value =  "3";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_three;
// -- getter -- 
static std::string  get_THREE() {
  static const st_three instance;
  return instance.getValue();
}
// THREE <---

// ---> FOUR
typedef struct st_four {
  std::string  value =  "4";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_four;
// -- getter -- 
static std::string  get_FOUR() {
  static const st_four instance;
  return instance.getValue();
}
// FOUR <---

// ---> FIVE
typedef struct st_five {
  std::string  value =  "5";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_five;
// -- getter -- 
static std::string  get_FIVE() {
  static const st_five instance;
  return instance.getValue();
}
// FIVE <---

// ---> SIX
typedef struct st_six {
  std::string  value =  "6";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_six;
// -- getter -- 
static std::string  get_SIX() {
  static const st_six instance;
  return instance.getValue();
}
// SIX <---

// ---> SEVEN
typedef struct st_seven {
  std::string  value =  "7";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_seven;
// -- getter -- 
static std::string  get_SEVEN() {
  static const st_seven instance;
  return instance.getValue();
}
// SEVEN <---

// ---> EIGHT
typedef struct st_eight {
  std::string  value =  "8";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_eight;
// -- getter -- 
static std::string  get_EIGHT() {
  static const st_eight instance;
  return instance.getValue();
}
// EIGHT <---

// ---> NINE
typedef struct st_nine {
  std::string  value =  "9";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_nine;
// -- getter -- 
static std::string  get_NINE() {
  static const st_nine instance;
  return instance.getValue();
}
// NINE <---

// ---> TEN
typedef struct st_ten {
  std::string  value =  "10";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_ten;
// -- getter -- 
static std::string  get_TEN() {
  static const st_ten instance;
  return instance.getValue();
}
// TEN <---

// ---> TWELVE
typedef struct st_twelve {
  std::string  value =  "12";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_twelve;
// -- getter -- 
static std::string  get_TWELVE() {
  static const st_twelve instance;
  return instance.getValue();
}
// TWELVE <---

// ---> FORTEEN
typedef struct st_forteen {
  std::string  value =  "14";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_forteen;
// -- getter -- 
static std::string  get_FORTEEN() {
  static const st_forteen instance;
  return instance.getValue();
}
// FORTEEN <---

// ---> FIFTEEN
typedef struct st_fifteen {
  std::string  value =  "15";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_fifteen;
// -- getter -- 
static std::string  get_FIFTEEN() {
  static const st_fifteen instance;
  return instance.getValue();
}
// FIFTEEN <---

// ---> SIXTEEN
typedef struct st_sixteen {
  std::string  value =  "16";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_sixteen;
// -- getter -- 
static std::string  get_SIXTEEN() {
  static const st_sixteen instance;
  return instance.getValue();
}
// SIXTEEN <---


// Mission Data - XML

// missionx configuration file
// ---> MISSIONX_CONF_FILE
typedef struct st_missionx_conf_file {
  std::string  value =  "missionx.cfg"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_missionx_conf_file;
// -- getter -- 
static std::string  get_MISSIONX_CONF_FILE() {
  static const st_missionx_conf_file instance;
  return instance.getValue();
}
// MISSIONX_CONF_FILE <---

// ---> MISSIONX_ROOT_DOC
typedef struct st_missionx_root_doc {
  std::string  value =  "MISSIONX";     
[[nodiscard]]  std::string  getValue() const { return value; }
} st_missionx_root_doc;
// -- getter -- 
static std::string  get_MISSIONX_ROOT_DOC() {
  static const st_missionx_root_doc instance;
  return instance.getValue();
}
// MISSIONX_ROOT_DOC <---

// ---> ELEMENT_OVERPASS
typedef struct st_element_overpass {
  std::string  value =  "overpass";     
[[nodiscard]]  std::string  getValue() const { return value; }
} st_element_overpass;
// -- getter -- 
static std::string  get_ELEMENT_OVERPASS() {
  static const st_element_overpass instance;
  return instance.getValue();
}
// ELEMENT_OVERPASS <---

// ---> ELEMENT_URL
typedef struct st_element_url {
  std::string  value =  "url";          
[[nodiscard]]  std::string  getValue() const { return value; }
} st_element_url;
// -- getter -- 
static std::string  get_ELEMENT_URL() {
  static const st_element_url instance;
  return instance.getValue();
}
// ELEMENT_URL <---


// const static std::string_view OVERPASS_XML_URLS ^ R"(<OVERPASS>
//  <url>https://lz4.overpass-api.de/api/interpreter</url>
//  <url>https://z.overpass-api.de/api/interpreter</url>
//  <url>https://overpass.openstreetmap.ru/api/interpreter</url>
//  <url>https://overpass.openstreetmap.fr/api/interpreter</url>
//  <url>https://overpass.kumi.systems/api/interpreter</url>
//</OVERPASS>)";

// ---> OVERPASS_XML_URLS
typedef struct st_overpass_xml_urls {
  std::string  value =  "<" + get_ELEMENT_OVERPASS() + ">" + "<url>https://lz4.overpass-api.de/api/interpreter</url>       " + "<url>https://z.overpass-api.de/api/interpreter</url> " + "<url>https://overpass.openstreetmap.ru/api/interpreter</url> " + "<url>https://overpass.openstreetmap.fr/api/interpreter</url> " + "<url>https://overpass.kumi.systems/api/interpreter</url> " + "</" + get_ELEMENT_OVERPASS() + ">";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_overpass_xml_urls;
// -- getter -- 
static std::string  get_OVERPASS_XML_URLS() {
  static const st_overpass_xml_urls instance;
  return instance.getValue();
}
// OVERPASS_XML_URLS <---



// ---> MISSION_ELEMENT
typedef struct st_mission_element {
  std::string  value =  "MISSION";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_mission_element;
// -- getter -- 
static std::string  get_MISSION_ELEMENT() {
  static const st_mission_element instance;
  return instance.getValue();
}
// MISSION_ELEMENT <---

// ---> ELEMENT_METADATA
typedef struct st_element_metadata {
  std::string  value =  "metadata"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_element_metadata;
// -- getter -- 
static std::string  get_ELEMENT_METADATA() {
  static const st_element_metadata instance;
  return instance.getValue();
}
// ELEMENT_METADATA <---

// ---> ATTRIB_CATEGORY
typedef struct st_attrib_category {
  std::string  value =  "category"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_category;
// -- getter -- 
static std::string  get_ATTRIB_CATEGORY() {
  static const st_attrib_category instance;
  return instance.getValue();
}
// ATTRIB_CATEGORY <---

// ---> ATTRIB_UI_LAYER
typedef struct st_attrib_ui_layer {
  std::string  value =  "ui_layer"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_ui_layer;
// -- getter -- 
static std::string  get_ATTRIB_UI_LAYER() {
  static const st_attrib_ui_layer instance;
  return instance.getValue();
}
// ATTRIB_UI_LAYER <---

// ---> CONVERSION_ROOT_DOC
typedef struct st_conversion_root_doc {
  std::string  value =  "CONVERSION";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_conversion_root_doc;
// -- getter -- 
static std::string  get_CONVERSION_ROOT_DOC() {
  static const st_conversion_root_doc instance;
  return instance.getValue();
}
// CONVERSION_ROOT_DOC <---

// ---> DUMMY_ROOT_DOC
typedef struct st_dummy_root_doc {
  std::string  value =  "DUMMY";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_dummy_root_doc;
// -- getter -- 
static std::string  get_DUMMY_ROOT_DOC() {
  static const st_dummy_root_doc instance;
  return instance.getValue();
}
// DUMMY_ROOT_DOC <---

// ---> TEMPLATE_ROOT_DOC
typedef struct st_template_root_doc {
  std::string  value =  "TEMPLATE";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_template_root_doc;
// -- getter -- 
static std::string  get_TEMPLATE_ROOT_DOC() {
  static const st_template_root_doc instance;
  return instance.getValue();
}
// TEMPLATE_ROOT_DOC <---

// ---> MAPPING_ROOT_DOC
typedef struct st_mapping_root_doc {
  std::string  value =  "MAPPING";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_mapping_root_doc;
// -- getter -- 
static std::string  get_MAPPING_ROOT_DOC() {
  static const st_mapping_root_doc instance;
  return instance.getValue();
}
// MAPPING_ROOT_DOC <---

// ---> MISSION_ROOT_SAVE_DOC
typedef struct st_mission_root_save_doc {
  std::string  value =  "SAVE";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_mission_root_save_doc;
// -- getter -- 
static std::string  get_MISSION_ROOT_SAVE_DOC() {
  static const st_mission_root_save_doc instance;
  return instance.getValue();
}
// MISSION_ROOT_SAVE_DOC <---

// ---> ATTRIB_VERSION
typedef struct st_attrib_version {
  std::string  value =  "version"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_version;
// -- getter -- 
static std::string  get_ATTRIB_VERSION() {
  static const st_attrib_version instance;
  return instance.getValue();
}
// ATTRIB_VERSION <---

// ---> ATTRIB_MISSION_FILE_FORMAT
typedef struct st_attrib_mission_file_format {
  std::string  value =  "mission_file_format"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_mission_file_format;
// -- getter -- 
static std::string  get_ATTRIB_MISSION_FILE_FORMAT() {
  static const st_attrib_mission_file_format instance;
  return instance.getValue();
}
// ATTRIB_MISSION_FILE_FORMAT <---

// ---> ATTRIB_MISSION_DESIGNER_MODE
typedef struct st_attrib_mission_designer_mode {
  std::string  value =  "designer_mode"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_mission_designer_mode;
// -- getter -- 
static std::string  get_ATTRIB_MISSION_DESIGNER_MODE() {
  static const st_attrib_mission_designer_mode instance;
  return instance.getValue();
}
// ATTRIB_MISSION_DESIGNER_MODE <---

// ---> MX_FILE_SAVE_EXTENSION
typedef struct st_mx_file_save_extension {
  std::string  value =  ".savepoint.sav"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_mx_file_save_extension;
// -- getter -- 
static std::string  get_MX_FILE_SAVE_EXTENSION() {
  static const st_mx_file_save_extension instance;
  return instance.getValue();
}
// MX_FILE_SAVE_EXTENSION <---

// ---> MX_FILE_SAVE_DREF_EXTENSION
typedef struct st_mx_file_save_dref_extension {
  std::string  value =  ".dataref.txt"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_mx_file_save_dref_extension;
// -- getter -- 
static std::string  get_MX_FILE_SAVE_DREF_EXTENSION() {
  static const st_mx_file_save_dref_extension instance;
  return instance.getValue();
}
// MX_FILE_SAVE_DREF_EXTENSION <---

// ---> ATTRIB_TYPE
typedef struct st_attrib_type {
  std::string  value =  "type"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_type;
// -- getter -- 
static std::string  get_ATTRIB_TYPE() {
  static const st_attrib_type instance;
  return instance.getValue();
}
// ATTRIB_TYPE <---

// ---> ATTRIB_ELEV_MIN_FT
typedef struct st_attrib_elev_min_ft {
  std::string  value =  "elev_min_ft"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_elev_min_ft;
// -- getter -- 
static std::string  get_ATTRIB_ELEV_MIN_FT() {
  static const st_attrib_elev_min_ft instance;
  return instance.getValue();
}
// ATTRIB_ELEV_MIN_FT <---

// ---> ATTRIB_ELEV_MAX_FT
typedef struct st_attrib_elev_max_ft {
  std::string  value =  "elev_max_ft"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_elev_max_ft;
// -- getter -- 
static std::string  get_ATTRIB_ELEV_MAX_FT() {
  static const st_attrib_elev_max_ft instance;
  return instance.getValue();
}
// ATTRIB_ELEV_MAX_FT <---

// ---> ATTRIB_RE_ARM
typedef struct st_attrib_re_arm {
  std::string  value =  "rearm"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_re_arm;
// -- getter -- 
static std::string  get_ATTRIB_RE_ARM() {
  static const st_attrib_re_arm instance;
  return instance.getValue();
}
// ATTRIB_RE_ARM <---

// ---> XML_EXTENSION
typedef struct st_xml_extension {
  std::string  value =  ".xml"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_xml_extension;
// -- getter -- 
static std::string  get_XML_EXTENSION() {
  static const st_xml_extension instance;
  return instance.getValue();
}
// XML_EXTENSION <---

// ---> ELEMENT_DESIGNER
typedef struct st_element_designer {
  std::string  value =  "designer";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_element_designer;
// -- getter -- 
static std::string  get_ELEMENT_DESIGNER() {
  static const st_element_designer instance;
  return instance.getValue();
}
// ELEMENT_DESIGNER <---

// ---> ATTRIB_FORCE_LEG_NAME
typedef struct st_attrib_force_leg_name {
  std::string  value =  "force_leg_name"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_force_leg_name;
// -- getter -- 
static std::string  get_ATTRIB_FORCE_LEG_NAME() {
  static const st_attrib_force_leg_name instance;
  return instance.getValue();
}
// ATTRIB_FORCE_LEG_NAME <---

// ---> ELEMENT_DATAREF
typedef struct st_element_dataref {
  std::string  value =  "dataref"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_element_dataref;
// -- getter -- 
static std::string  get_ELEMENT_DATAREF() {
  static const st_element_dataref instance;
  return instance.getValue();
}
// ELEMENT_DATAREF <---

// ---> GLOBAL_SETTINGS
typedef struct st_global_settings {
  std::string  value =  "global_settings";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_global_settings;
// -- getter -- 
static std::string  get_GLOBAL_SETTINGS() {
  static const st_global_settings instance;
  return instance.getValue();
}
// GLOBAL_SETTINGS <---

// ---> ATTRIB_METAR_FILE_NAME
typedef struct st_attrib_metar_file_name {
  std::string  value =  "metar_file_name"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_metar_file_name;
// -- getter -- 
static std::string  get_ATTRIB_METAR_FILE_NAME() {
  static const st_attrib_metar_file_name instance;
  return instance.getValue();
}
// ATTRIB_METAR_FILE_NAME <---

// ---> ELEMENT_COMPATIBILITY
typedef struct st_element_compatibility {
  std::string  value =  "compatibility"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_element_compatibility;
// -- getter -- 
static std::string  get_ELEMENT_COMPATIBILITY() {
  static const st_element_compatibility instance;
  return instance.getValue();
}
// ELEMENT_COMPATIBILITY <---

// ---> ATTRIB_INVENTORY_LAYOUT
typedef struct st_attrib_inventory_layout {
  std::string  value =  "inventory_layout"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_inventory_layout;
// -- getter -- 
static std::string  get_ATTRIB_INVENTORY_LAYOUT() {
  static const st_attrib_inventory_layout instance;
  return instance.getValue();
}
// ATTRIB_INVENTORY_LAYOUT <---

// ---> ATTRIB_TIME_HOURS
typedef struct st_attrib_time_hours {
  std::string  value =  "hours"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_time_hours;
// -- getter -- 
static std::string  get_ATTRIB_TIME_HOURS() {
  static const st_attrib_time_hours instance;
  return instance.getValue();
}
// ATTRIB_TIME_HOURS <---

// ---> ATTRIB_TIME_MIN
typedef struct st_attrib_time_min {
  std::string  value =  "min"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_time_min;
// -- getter -- 
static std::string  get_ATTRIB_TIME_MIN() {
  static const st_attrib_time_min instance;
  return instance.getValue();
}
// ATTRIB_TIME_MIN <---

// ---> ELEMENT_START_TIME
typedef struct st_element_start_time {
  std::string  value =  "start_time";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_element_start_time;
// -- getter -- 
static std::string  get_ELEMENT_START_TIME() {
  static const st_element_start_time instance;
  return instance.getValue();
}
// ELEMENT_START_TIME <---

// ---> ATTRIB_TIME_DAY_IN_YEAR
typedef struct st_attrib_time_day_in_year {
  std::string  value =  "day_in_year"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_time_day_in_year;
// -- getter -- 
static std::string  get_ATTRIB_TIME_DAY_IN_YEAR() {
  static const st_attrib_time_day_in_year instance;
  return instance.getValue();
}
// ATTRIB_TIME_DAY_IN_YEAR <---

// ---> ATTRIB_LOCAL_TIME_SEC
typedef struct st_attrib_local_time_sec {
  std::string  value =  "local_time_sec"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_local_time_sec;
// -- getter -- 
static std::string  get_ATTRIB_LOCAL_TIME_SEC() {
  static const st_attrib_local_time_sec instance;
  return instance.getValue();
}
// ATTRIB_LOCAL_TIME_SEC <---

// ---> ELEMENT_MISSION_INFO
typedef struct st_element_mission_info {
  std::string  value =  "mission_info"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_element_mission_info;
// -- getter -- 
static std::string  get_ELEMENT_MISSION_INFO() {
  static const st_element_mission_info instance;
  return instance.getValue();
}
// ELEMENT_MISSION_INFO <---

// ---> ATTRIB_MISSION_IMAGE_FILE_NAME
typedef struct st_attrib_mission_image_file_name {
  std::string  value =  "mission_image_file_name"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_mission_image_file_name;
// -- getter -- 
static std::string  get_ATTRIB_MISSION_IMAGE_FILE_NAME() {
  static const st_attrib_mission_image_file_name instance;
  return instance.getValue();
}
// ATTRIB_MISSION_IMAGE_FILE_NAME <---

// ---> ATTRIB_TEMPLATE_IMAGE_FILE_NAME
typedef struct st_attrib_template_image_file_name {
  std::string  value =  "template_image_file_name"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_template_image_file_name;
// -- getter -- 
static std::string  get_ATTRIB_TEMPLATE_IMAGE_FILE_NAME() {
  static const st_attrib_template_image_file_name instance;
  return instance.getValue();
}
// ATTRIB_TEMPLATE_IMAGE_FILE_NAME <---

// ---> ATTRIB_PLANE_DESC
typedef struct st_attrib_plane_desc {
  std::string  value =  "plane_desc"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_plane_desc;
// -- getter -- 
static std::string  get_ATTRIB_PLANE_DESC() {
  static const st_attrib_plane_desc instance;
  return instance.getValue();
}
// ATTRIB_PLANE_DESC <---

// ---> ATTRIB_ESTIMATE_TIME
typedef struct st_attrib_estimate_time {
  std::string  value =  "estimate_time"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_estimate_time;
// -- getter -- 
static std::string  get_ATTRIB_ESTIMATE_TIME() {
  static const st_attrib_estimate_time instance;
  return instance.getValue();
}
// ATTRIB_ESTIMATE_TIME <---

// ---> ATTRIB_DIFFICULTY
typedef struct st_attrib_difficulty {
  std::string  value =  "difficulty"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_difficulty;
// -- getter -- 
static std::string  get_ATTRIB_DIFFICULTY() {
  static const st_attrib_difficulty instance;
  return instance.getValue();
}
// ATTRIB_DIFFICULTY <---

// ---> ATTRIB_WEATHER_SETTINGS
typedef struct st_attrib_weather_settings {
  std::string  value =  "weather_settings"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_weather_settings;
// -- getter -- 
static std::string  get_ATTRIB_WEATHER_SETTINGS() {
  static const st_attrib_weather_settings instance;
  return instance.getValue();
}
// ATTRIB_WEATHER_SETTINGS <---

// ---> ATTRIB_SCENERY_SETTINGS
typedef struct st_attrib_scenery_settings {
  std::string  value =  "scenery_settings"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_scenery_settings;
// -- getter -- 
static std::string  get_ATTRIB_SCENERY_SETTINGS() {
  static const st_attrib_scenery_settings instance;
  return instance.getValue();
}
// ATTRIB_SCENERY_SETTINGS <---

// ---> ATTRIB_WRITTEN_BY
typedef struct st_attrib_written_by {
  std::string  value =  "written_by"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_written_by;
// -- getter -- 
static std::string  get_ATTRIB_WRITTEN_BY() {
  static const st_attrib_written_by instance;
  return instance.getValue();
}
// ATTRIB_WRITTEN_BY <---

// ---> ATTRIB_OTHER_SETTINGS
typedef struct st_attrib_other_settings {
  std::string  value =  "other_settings"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_other_settings;
// -- getter -- 
static std::string  get_ATTRIB_OTHER_SETTINGS() {
  static const st_attrib_other_settings instance;
  return instance.getValue();
}
// ATTRIB_OTHER_SETTINGS <---

// ---> ATTRIB_SHORT_DESC
typedef struct st_attrib_short_desc {
  std::string  value =  "short_desc"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_short_desc;
// -- getter -- 
static std::string  get_ATTRIB_SHORT_DESC() {
  static const st_attrib_short_desc instance;
  return instance.getValue();
}
// ATTRIB_SHORT_DESC <---

// ---> ELEMENT_PROPERTIES
typedef struct st_element_properties {
  std::string  value =  "properties"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_element_properties;
// -- getter -- 
static std::string  get_ELEMENT_PROPERTIES() {
  static const st_element_properties instance;
  return instance.getValue();
}
// ELEMENT_PROPERTIES <---

// ---> ELEMENT_SAVE
typedef struct st_element_save {
  std::string  value =  get_MISSION_ROOT_SAVE_DOC(); 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_element_save;
// -- getter -- 
static std::string  get_ELEMENT_SAVE() {
  static const st_element_save instance;
  return instance.getValue();
}
// ELEMENT_SAVE <---

// ---> PROP_MISSION_PROPERTIES
typedef struct st_prop_mission_properties {
  std::string  value =  "mission_properties"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_prop_mission_properties;
// -- getter -- 
static std::string  get_PROP_MISSION_PROPERTIES() {
  static const st_prop_mission_properties instance;
  return instance.getValue();
}
// PROP_MISSION_PROPERTIES <---

// ---> PROP_MISSION_FOLDER_PROPERTIES
typedef struct st_prop_mission_folder_properties {
  std::string  value =  "mission_folder_properties"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_prop_mission_folder_properties;
// -- getter -- 
static std::string  get_PROP_MISSION_FOLDER_PROPERTIES() {
  static const st_prop_mission_folder_properties instance;
  return instance.getValue();
}
// PROP_MISSION_FOLDER_PROPERTIES <---


// ---> ELEMENT_FOLDERS
typedef struct st_element_folders {
  std::string  value =  "folders"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_element_folders;
// -- getter -- 
static std::string  get_ELEMENT_FOLDERS() {
  static const st_element_folders instance;
  return instance.getValue();
}
// ELEMENT_FOLDERS <---

// ---> ATTRIB_MISSION_PACKAGE_FOLDER_PATH
typedef struct st_attrib_mission_package_folder_path {
  std::string  value =  "mission_package_folder_path"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_mission_package_folder_path;
// -- getter -- 
static std::string  get_ATTRIB_MISSION_PACKAGE_FOLDER_PATH() {
  static const st_attrib_mission_package_folder_path instance;
  return instance.getValue();
}
// ATTRIB_MISSION_PACKAGE_FOLDER_PATH <---

// ---> ATTRIB_SOUND_FOLDER_NAME
typedef struct st_attrib_sound_folder_name {
  std::string  value =  "sound_folder_name";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_sound_folder_name;
// -- getter -- 
static std::string  get_ATTRIB_SOUND_FOLDER_NAME() {
  static const st_attrib_sound_folder_name instance;
  return instance.getValue();
}
// ATTRIB_SOUND_FOLDER_NAME <---

// ---> ATTRIB_OBJ3D_FOLDER_NAME
typedef struct st_attrib_obj3d_folder_name {
  std::string  value =  "obj3d_folder_name";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_obj3d_folder_name;
// -- getter -- 
static std::string  get_ATTRIB_OBJ3D_FOLDER_NAME() {
  static const st_attrib_obj3d_folder_name instance;
  return instance.getValue();
}
// ATTRIB_OBJ3D_FOLDER_NAME <---

// ---> ATTRIB_METAR_FOLDER_NAME
typedef struct st_attrib_metar_folder_name {
  std::string  value =  "metar_folder_name";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_metar_folder_name;
// -- getter -- 
static std::string  get_ATTRIB_METAR_FOLDER_NAME() {
  static const st_attrib_metar_folder_name instance;
  return instance.getValue();
}
// ATTRIB_METAR_FOLDER_NAME <---

// ---> ATTRIB_SCRIPT_FOLDER_NAME
typedef struct st_attrib_script_folder_name {
  std::string  value =  "script_folder_name";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_script_folder_name;
// -- getter -- 
static std::string  get_ATTRIB_SCRIPT_FOLDER_NAME() {
  static const st_attrib_script_folder_name instance;
  return instance.getValue();
}
// ATTRIB_SCRIPT_FOLDER_NAME <---

// ---> PROP_XPLANE_VERSION
typedef struct st_prop_xplane_version {
  std::string  value =  "xplane_version"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_prop_xplane_version;
// -- getter -- 
static std::string  get_PROP_XPLANE_VERSION() {
  static const st_prop_xplane_version instance;
  return instance.getValue();
}
// PROP_XPLANE_VERSION <---

// ---> PROP_XPLANE_INSTALL_PATH
typedef struct st_prop_xplane_install_path {
  std::string  value =  "xplane_install_path";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_prop_xplane_install_path;
// -- getter -- 
static std::string  get_PROP_XPLANE_INSTALL_PATH() {
  static const st_prop_xplane_install_path instance;
  return instance.getValue();
}
// PROP_XPLANE_INSTALL_PATH <---

// ---> PROP_XPLANE_PLUGINS_PATH
typedef struct st_prop_xplane_plugins_path {
  std::string  value =  "xplane_plugins_path";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_prop_xplane_plugins_path;
// -- getter -- 
static std::string  get_PROP_XPLANE_PLUGINS_PATH() {
  static const st_prop_xplane_plugins_path instance;
  return instance.getValue();
}
// PROP_XPLANE_PLUGINS_PATH <---

// ---> PROP_MISSIONX_PATH
typedef struct st_prop_missionx_path {
  std::string  value =  "missionx_path";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_prop_missionx_path;
// -- getter -- 
static std::string  get_PROP_MISSIONX_PATH() {
  static const st_prop_missionx_path instance;
  return instance.getValue();
}
// PROP_MISSIONX_PATH <---

// ---> PROP_MISSIONX_BITMAP_PATH
typedef struct st_prop_missionx_bitmap_path {
  std::string  value =  "missionx_bitmap_path"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_prop_missionx_bitmap_path;
// -- getter -- 
static std::string  get_PROP_MISSIONX_BITMAP_PATH() {
  static const st_prop_missionx_bitmap_path instance;
  return instance.getValue();
}
// PROP_MISSIONX_BITMAP_PATH <---

// ---> FLD_MISSIONX_SAVE_PATH
typedef struct st_fld_missionx_save_path {
  std::string  value =  "missionx_save_path";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_fld_missionx_save_path;
// -- getter -- 
static std::string  get_FLD_MISSIONX_SAVE_PATH() {
  static const st_fld_missionx_save_path instance;
  return instance.getValue();
}
// FLD_MISSIONX_SAVE_PATH <---

// ---> FLD_MISSIONX_LOG_PATH
typedef struct st_fld_missionx_log_path {
  std::string  value =  "missionx_log_path";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_fld_missionx_log_path;
// -- getter -- 
static std::string  get_FLD_MISSIONX_LOG_PATH() {
  static const st_fld_missionx_log_path instance;
  return instance.getValue();
}
// FLD_MISSIONX_LOG_PATH <---

// ---> FLD_MISSIONX_SAVEPOINT_PATH
typedef struct st_fld_missionx_savepoint_path {
  std::string  value =  "missionx_savepoint_path";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_fld_missionx_savepoint_path;
// -- getter -- 
static std::string  get_FLD_MISSIONX_SAVEPOINT_PATH() {
  static const st_fld_missionx_savepoint_path instance;
  return instance.getValue();
}
// FLD_MISSIONX_SAVEPOINT_PATH <---

// ---> FLD_MISSIONX_SAVEPOINT_DREF
typedef struct st_fld_missionx_savepoint_dref {
  std::string  value =  "missionx_savepoint_dref";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_fld_missionx_savepoint_dref;
// -- getter -- 
static std::string  get_FLD_MISSIONX_SAVEPOINT_DREF() {
  static const st_fld_missionx_savepoint_dref instance;
  return instance.getValue();
}
// FLD_MISSIONX_SAVEPOINT_DREF <---

// ---> FLD_MISSIONS_ROOT_PATH
typedef struct st_fld_missions_root_path {
  std::string  value =  "missions_root_folder"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_fld_missions_root_path;
// -- getter -- 
static std::string  get_FLD_MISSIONS_ROOT_PATH() {
  static const st_fld_missions_root_path instance;
  return instance.getValue();
}
// FLD_MISSIONS_ROOT_PATH <---

// ---> FLD_RANDOM_TEMPLATES_PATH
typedef struct st_fld_random_templates_path {
  std::string  value =  "missionx_random_templates_folder_path"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_fld_random_templates_path;
// -- getter -- 
static std::string  get_FLD_RANDOM_TEMPLATES_PATH() {
  static const st_fld_random_templates_path instance;
  return instance.getValue();
}
// FLD_RANDOM_TEMPLATES_PATH <---

// ---> FLD_RANDOM_MISSION_PATH
typedef struct st_fld_random_mission_path {
  std::string  value =  "missionx_random_mission_folder_path"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_fld_random_mission_path;
// -- getter -- 
static std::string  get_FLD_RANDOM_MISSION_PATH() {
  static const st_fld_random_mission_path instance;
  return instance.getValue();
}
// FLD_RANDOM_MISSION_PATH <---

// ---> FLD_CUSTOM_SCENERY_FOLDER_PATH
typedef struct st_fld_custom_scenery_folder_path {
  std::string  value =  "xplane_custom_scenery_folder_path"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_fld_custom_scenery_folder_path;
// -- getter -- 
static std::string  get_FLD_CUSTOM_SCENERY_FOLDER_PATH() {
  static const st_fld_custom_scenery_folder_path instance;
  return instance.getValue();
}
// FLD_CUSTOM_SCENERY_FOLDER_PATH <---

// ---> FLD_DEFAULT_APTDATA_PATH
typedef struct st_fld_default_aptdata_path {
  std::string  value =  "xplane_default_aptdata_folder_path"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_fld_default_aptdata_path;
// -- getter -- 
static std::string  get_FLD_DEFAULT_APTDATA_PATH() {
  static const st_fld_default_aptdata_path instance;
  return instance.getValue();
}
// FLD_DEFAULT_APTDATA_PATH <---

// ---> ATTRIB_NAME
typedef struct st_attrib_name {
  std::string  value =  "name";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_name;
// -- getter -- 
static std::string  get_ATTRIB_NAME() {
  static const st_attrib_name instance;
  return instance.getValue();
}
// ATTRIB_NAME <---

// ---> ATTRIB_UNIQUE_ELEMENT_NAME
typedef struct st_attrib_unique_element_name {
  std::string  value =  "unique_element_name"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_unique_element_name;
// -- getter -- 
static std::string  get_ATTRIB_UNIQUE_ELEMENT_NAME() {
  static const st_attrib_unique_element_name instance;
  return instance.getValue();
}
// ATTRIB_UNIQUE_ELEMENT_NAME <---

// ---> ELEMENT_DESC
typedef struct st_element_desc {
  std::string  value =  "desc";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_element_desc;
// -- getter -- 
static std::string  get_ELEMENT_DESC() {
  static const st_element_desc instance;
  return instance.getValue();
}
// ELEMENT_DESC <---

// ---> ATTRIB_IS_TARGET_POI
typedef struct st_attrib_is_target_poi {
  std::string  value =  "is_target_poi"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_is_target_poi;
// -- getter -- 
static std::string  get_ATTRIB_IS_TARGET_POI() {
  static const st_attrib_is_target_poi instance;
  return instance.getValue();
}
// ATTRIB_IS_TARGET_POI <---

// ---> ATTRIB_TARGET_LAT
typedef struct st_attrib_target_lat {
  std::string  value =  "target_lat"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_target_lat;
// -- getter -- 
static std::string  get_ATTRIB_TARGET_LAT() {
  static const st_attrib_target_lat instance;
  return instance.getValue();
}
// ATTRIB_TARGET_LAT <---

// ---> ATTRIB_TARGET_LON
typedef struct st_attrib_target_lon {
  std::string  value =  "target_lon"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_target_lon;
// -- getter -- 
static std::string  get_ATTRIB_TARGET_LON() {
  static const st_attrib_target_lon instance;
  return instance.getValue();
}
// ATTRIB_TARGET_LON <---

// ---> ATTRIB_IS_DUMMY
typedef struct st_attrib_is_dummy {
  std::string  value =  "is_dummy"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_is_dummy;
// -- getter -- 
static std::string  get_ATTRIB_IS_DUMMY() {
  static const st_attrib_is_dummy instance;
  return instance.getValue();
}
// ATTRIB_IS_DUMMY <---

// ---> ATTRIB_DUMMY_LEG_ITERATIONS
typedef struct st_attrib_dummy_leg_iterations {
  std::string  value =  "dummy_leg_iterations"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_dummy_leg_iterations;
// -- getter -- 
static std::string  get_ATTRIB_DUMMY_LEG_ITERATIONS() {
  static const st_attrib_dummy_leg_iterations instance;
  return instance.getValue();
}
// ATTRIB_DUMMY_LEG_ITERATIONS <---



// ---> ELEMENT_METAR
typedef struct st_element_metar {
  std::string  value =  "metar"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_element_metar;
// -- getter -- 
static std::string  get_ELEMENT_METAR() {
  static const st_element_metar instance;
  return instance.getValue();
}
// ELEMENT_METAR <---

// ---> ATTRIB_INJECT_METAR_FILE
typedef struct st_attrib_inject_metar_file {
  std::string  value =  "inject_metar_file"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_inject_metar_file;
// -- getter -- 
static std::string  get_ATTRIB_INJECT_METAR_FILE() {
  static const st_attrib_inject_metar_file instance;
  return instance.getValue();
}
// ATTRIB_INJECT_METAR_FILE <---

// ---> XPLANE_METAR_FILENAME
typedef struct st_xplane_metar_filename {
  std::string  value =  "METAR.rwx"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_xplane_metar_filename;
// -- getter -- 
static std::string  get_XPLANE_METAR_FILENAME() {
  static const st_xplane_metar_filename instance;
  return instance.getValue();
}
// XPLANE_METAR_FILENAME <---

// ---> ATTRIB_FORCE_CUSTOM_METAR_FILE
typedef struct st_attrib_force_custom_metar_file {
  std::string  value =  "force_custom_metar_file"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_force_custom_metar_file;
// -- getter -- 
static std::string  get_ATTRIB_FORCE_CUSTOM_METAR_FILE() {
  static const st_attrib_force_custom_metar_file instance;
  return instance.getValue();
}
// ATTRIB_FORCE_CUSTOM_METAR_FILE <---

// ---> ELEMENT_MAP
typedef struct st_element_map {
  std::string  value =  "map"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_element_map;
// -- getter -- 
static std::string  get_ELEMENT_MAP() {
  static const st_element_map instance;
  return instance.getValue();
}
// ELEMENT_MAP <---

// ---> ATTRIB_MANDATORY
typedef struct st_attrib_mandatory {
  std::string  value =  "mandatory";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_mandatory;
// -- getter -- 
static std::string  get_ATTRIB_MANDATORY() {
  static const st_attrib_mandatory instance;
  return instance.getValue();
}
// ATTRIB_MANDATORY <---

// ---> PROP_TASK_STATE
typedef struct st_prop_task_state {
  std::string  value =  "task_state";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_prop_task_state;
// -- getter -- 
static std::string  get_PROP_TASK_STATE() {
  static const st_prop_task_state instance;
  return instance.getValue();
}
// PROP_TASK_STATE <---

// ---> ATTRIB_MAP_WIDTH
typedef struct st_attrib_map_width {
  std::string  value =  "map_width";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_map_width;
// -- getter -- 
static std::string  get_ATTRIB_MAP_WIDTH() {
  static const st_attrib_map_width instance;
  return instance.getValue();
}
// ATTRIB_MAP_WIDTH <---

// ---> ATTRIB_MAP_HEIGHT
typedef struct st_attrib_map_height {
  std::string  value =  "map_height";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_map_height;
// -- getter -- 
static std::string  get_ATTRIB_MAP_HEIGHT() {
  static const st_attrib_map_height instance;
  return instance.getValue();
}
// ATTRIB_MAP_HEIGHT <---

// ---> ATTRIB_MAP_FILE_NAME
typedef struct st_attrib_map_file_name {
  std::string  value =  "map_file_name";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_map_file_name;
// -- getter -- 
static std::string  get_ATTRIB_MAP_FILE_NAME() {
  static const st_attrib_map_file_name instance;
  return instance.getValue();
}
// ATTRIB_MAP_FILE_NAME <---

// ---> ELEMENT_EMBEDDED_SCRIPTS
typedef struct st_element_embedded_scripts {
  std::string  value =  "embedded_scripts";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_element_embedded_scripts;
// -- getter -- 
static std::string  get_ELEMENT_EMBEDDED_SCRIPTS() {
  static const st_element_embedded_scripts instance;
  return instance.getValue();
}
// ELEMENT_EMBEDDED_SCRIPTS <---

// ---> ELEMENT_FILE
typedef struct st_element_file {
  std::string  value =  "file";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_element_file;
// -- getter -- 
static std::string  get_ELEMENT_FILE() {
  static const st_element_file instance;
  return instance.getValue();
}
// ELEMENT_FILE <---

// ---> ELEMENT_INCLUDE_FILE
typedef struct st_element_include_file {
  std::string  value =  "include_file";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_element_include_file;
// -- getter -- 
static std::string  get_ELEMENT_INCLUDE_FILE() {
  static const st_element_include_file instance;
  return instance.getValue();
}
// ELEMENT_INCLUDE_FILE <---

// ---> ATTRIB_INCLUDE_FILE
typedef struct st_attrib_include_file {
  std::string  value =  get_ELEMENT_INCLUDE_FILE(); 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_include_file;
// -- getter -- 
static std::string  get_ATTRIB_INCLUDE_FILE() {
  static const st_attrib_include_file instance;
  return instance.getValue();
}
// ATTRIB_INCLUDE_FILE <---

// ---> ELEMENT_SCRIPTLET
typedef struct st_element_scriptlet {
  std::string  value =  "scriptlet";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_element_scriptlet;
// -- getter -- 
static std::string  get_ELEMENT_SCRIPTLET() {
  static const st_element_scriptlet instance;
  return instance.getValue();
}
// ELEMENT_SCRIPTLET <---

// ---> ELEMENT_SHARED_VARIABLES
typedef struct st_element_shared_variables {
  std::string  value =  "shared_variables"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_element_shared_variables;
// -- getter -- 
static std::string  get_ELEMENT_SHARED_VARIABLES() {
  static const st_element_shared_variables instance;
  return instance.getValue();
}
// ELEMENT_SHARED_VARIABLES <---

// ---> ELEMENT_VAR
typedef struct st_element_var {
  std::string  value =  "var"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_element_var;
// -- getter -- 
static std::string  get_ELEMENT_VAR() {
  static const st_element_var instance;
  return instance.getValue();
}
// ELEMENT_VAR <---

// ---> ATTRIB_INIT_VAL
typedef struct st_attrib_init_val {
  std::string  value =  "init_val"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_init_val;
// -- getter -- 
static std::string  get_ATTRIB_INIT_VAL() {
  static const st_attrib_init_val instance;
  return instance.getValue();
}
// ATTRIB_INIT_VAL <---

// ---> ELEMENT_SCRIPT_GLOBAL_STRING_PARAMS
typedef struct st_element_script_global_string_params {
  std::string  value =  "global_string_params";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_element_script_global_string_params;
// -- getter -- 
static std::string  get_ELEMENT_SCRIPT_GLOBAL_STRING_PARAMS() {
  static const st_element_script_global_string_params instance;
  return instance.getValue();
}
// ELEMENT_SCRIPT_GLOBAL_STRING_PARAMS <---

// ---> ELEMENT_SCRIPT_GLOBAL_NUMBER_PARAMS
typedef struct st_element_script_global_number_params {
  std::string  value =  "global_number_params";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_element_script_global_number_params;
// -- getter -- 
static std::string  get_ELEMENT_SCRIPT_GLOBAL_NUMBER_PARAMS() {
  static const st_element_script_global_number_params instance;
  return instance.getValue();
}
// ELEMENT_SCRIPT_GLOBAL_NUMBER_PARAMS <---

// ---> ELEMENT_SCRIPT_GLOBAL_BOOL_PARAMS
typedef struct st_element_script_global_bool_params {
  std::string  value =  "global_bool_params";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_element_script_global_bool_params;
// -- getter -- 
static std::string  get_ELEMENT_SCRIPT_GLOBAL_BOOL_PARAMS() {
  static const st_element_script_global_bool_params instance;
  return instance.getValue();
}
// ELEMENT_SCRIPT_GLOBAL_BOOL_PARAMS <---

// ---> ELEMENT_LOGIC
typedef struct st_element_logic {
  std::string  value =  "logic";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_element_logic;
// -- getter -- 
static std::string  get_ELEMENT_LOGIC() {
  static const st_element_logic instance;
  return instance.getValue();
}
// ELEMENT_LOGIC <---

// ---> ELEMENT_INTERPOLATION
typedef struct st_element_interpolation {
  std::string  value =  "interpolation"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_element_interpolation;
// -- getter -- 
static std::string  get_ELEMENT_INTERPOLATION() {
  static const st_element_interpolation instance;
  return instance.getValue();
}
// ELEMENT_INTERPOLATION <---

// ---> ELEMENT_XPDATA
typedef struct st_element_xpdata {
  std::string  value =  "xpdata";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_element_xpdata;
// -- getter -- 
static std::string  get_ELEMENT_XPDATA() {
  static const st_element_xpdata instance;
  return instance.getValue();
}
// ELEMENT_XPDATA <---

// ---> ELEMENT_TASK
typedef struct st_element_task {
  std::string  value =  "task";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_element_task;
// -- getter -- 
static std::string  get_ELEMENT_TASK() {
  static const st_element_task instance;
  return instance.getValue();
}
// ELEMENT_TASK <---

// ---> ATTRIB_BASE_ON_TRIGGER
typedef struct st_attrib_base_on_trigger {
  std::string  value =  "base_on_trigger"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_base_on_trigger;
// -- getter -- 
static std::string  get_ATTRIB_BASE_ON_TRIGGER() {
  static const st_attrib_base_on_trigger instance;
  return instance.getValue();
}
// ATTRIB_BASE_ON_TRIGGER <---

// ---> ATTRIB_BASE_ON_SCRIPT
typedef struct st_attrib_base_on_script {
  std::string  value =  "base_on_script"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_base_on_script;
// -- getter -- 
static std::string  get_ATTRIB_BASE_ON_SCRIPT() {
  static const st_attrib_base_on_script instance;
  return instance.getValue();
}
// ATTRIB_BASE_ON_SCRIPT <---

// ---> ATTRIB_BASE_ON_COMMAND
typedef struct st_attrib_base_on_command {
  std::string  value =  "base_on_command"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_base_on_command;
// -- getter -- 
static std::string  get_ATTRIB_BASE_ON_COMMAND() {
  static const st_attrib_base_on_command instance;
  return instance.getValue();
}
// ATTRIB_BASE_ON_COMMAND <---

// ---> ATTRIB_BASE_ON_SLING_LOAD
typedef struct st_attrib_base_on_sling_load {
  std::string  value =  "base_on_sling_load"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_base_on_sling_load;
// -- getter -- 
static std::string  get_ATTRIB_BASE_ON_SLING_LOAD() {
  static const st_attrib_base_on_sling_load instance;
  return instance.getValue();
}
// ATTRIB_BASE_ON_SLING_LOAD <---

// ---> ATTRIB_IS_PLACEHOLDER
typedef struct st_attrib_is_placeholder {
  std::string  value =  "is_placeholder"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_is_placeholder;
// -- getter -- 
static std::string  get_ATTRIB_IS_PLACEHOLDER() {
  static const st_attrib_is_placeholder instance;
  return instance.getValue();
}
// ATTRIB_IS_PLACEHOLDER <---

// ---> ATTRIB_EVAL_SUCCESS_FOR_N_SEC
typedef struct st_attrib_eval_success_for_n_sec {
  std::string  value =  "eval_success_for_n_sec"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_eval_success_for_n_sec;
// -- getter -- 
static std::string  get_ATTRIB_EVAL_SUCCESS_FOR_N_SEC() {
  static const st_attrib_eval_success_for_n_sec instance;
  return instance.getValue();
}
// ATTRIB_EVAL_SUCCESS_FOR_N_SEC <---

// ---> ATTRIB_FORCE_EVALUATION
typedef struct st_attrib_force_evaluation {
  std::string  value =  "force_evaluation"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_force_evaluation;
// -- getter -- 
static std::string  get_ATTRIB_FORCE_EVALUATION() {
  static const st_attrib_force_evaluation instance;
  return instance.getValue();
}
// ATTRIB_FORCE_EVALUATION <---

// ---> ATTRIB_CUMULATIVE_TIMER_FLAG
typedef struct st_attrib_cumulative_timer_flag {
  std::string  value =  "cumulative_timer_flag"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_cumulative_timer_flag;
// -- getter -- 
static std::string  get_ATTRIB_CUMULATIVE_TIMER_FLAG() {
  static const st_attrib_cumulative_timer_flag instance;
  return instance.getValue();
}
// ATTRIB_CUMULATIVE_TIMER_FLAG <---

// ---> ELEMENT_OBJECTIVES
typedef struct st_element_objectives {
  std::string  value =  "objectives";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_element_objectives;
// -- getter -- 
static std::string  get_ELEMENT_OBJECTIVES() {
  static const st_element_objectives instance;
  return instance.getValue();
}
// ELEMENT_OBJECTIVES <---

// ---> ELEMENT_OBJECTIVE
typedef struct st_element_objective {
  std::string  value =  "objective";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_element_objective;
// -- getter -- 
static std::string  get_ELEMENT_OBJECTIVE() {
  static const st_element_objective instance;
  return instance.getValue();
}
// ELEMENT_OBJECTIVE <---

// ---> ATTRIB_TASK_NAME
typedef struct st_attrib_task_name {
  std::string  value =  "task_name";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_task_name;
// -- getter -- 
static std::string  get_ATTRIB_TASK_NAME() {
  static const st_attrib_task_name instance;
  return instance.getValue();
}
// ATTRIB_TASK_NAME <---

// ---> ATTRIB_DEPENDS_ON_TASK
typedef struct st_attrib_depends_on_task {
  std::string  value =  "depends_on_task"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_depends_on_task;
// -- getter -- 
static std::string  get_ATTRIB_DEPENDS_ON_TASK() {
  static const st_attrib_depends_on_task instance;
  return instance.getValue();
}
// ATTRIB_DEPENDS_ON_TASK <---


// ---> ELEMENT_MX_CHOICES
typedef struct st_element_mx_choices {
  std::string  value =  "mx_choices"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_element_mx_choices;
// -- getter -- 
static std::string  get_ELEMENT_MX_CHOICES() {
  static const st_element_mx_choices instance;
  return instance.getValue();
}
// ELEMENT_MX_CHOICES <---

// ---> ELEMENT_CHOICES
typedef struct st_element_choices {
  std::string  value =  "choices"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_element_choices;
// -- getter -- 
static std::string  get_ELEMENT_CHOICES() {
  static const st_element_choices instance;
  return instance.getValue();
}
// ELEMENT_CHOICES <---

// ---> ELEMENT_CHOICE
typedef struct st_element_choice {
  std::string  value =  "choice"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_element_choice;
// -- getter -- 
static std::string  get_ELEMENT_CHOICE() {
  static const st_element_choice instance;
  return instance.getValue();
}
// ELEMENT_CHOICE <---

// ---> ELEMENT_OPTION
typedef struct st_element_option {
  std::string  value =  "option"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_element_option;
// -- getter -- 
static std::string  get_ELEMENT_OPTION() {
  static const st_element_option instance;
  return instance.getValue();
}
// ELEMENT_OPTION <---

// ---> ELEMENT_OPTION_GROUP
typedef struct st_element_option_group {
  std::string  value =  "option_group"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_element_option_group;
// -- getter -- 
static std::string  get_ELEMENT_OPTION_GROUP() {
  static const st_element_option_group instance;
  return instance.getValue();
}
// ELEMENT_OPTION_GROUP <---

// ---> ATTRIB_TEXT
typedef struct st_attrib_text {
  std::string  value =  "text"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_text;
// -- getter -- 
static std::string  get_ATTRIB_TEXT() {
  static const st_attrib_text instance;
  return instance.getValue();
}
// ATTRIB_TEXT <---

// ---> ATTRIB_ONETIME_OPTION_B
typedef struct st_attrib_onetime_option_b {
  std::string  value =  "onetime_option_b"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_onetime_option_b;
// -- getter -- 
static std::string  get_ATTRIB_ONETIME_OPTION_B() {
  static const st_attrib_onetime_option_b instance;
  return instance.getValue();
}
// ATTRIB_ONETIME_OPTION_B <---

// ---> ATTRIB_NEXT_CHOICE
typedef struct st_attrib_next_choice {
  std::string  value =  "next_choice"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_next_choice;
// -- getter -- 
static std::string  get_ATTRIB_NEXT_CHOICE() {
  static const st_attrib_next_choice instance;
  return instance.getValue();
}
// ATTRIB_NEXT_CHOICE <---

// ---> ATTRIB_ACTIVE_CHOICE
typedef struct st_attrib_active_choice {
  std::string  value =  "active_choice"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_active_choice;
// -- getter -- 
static std::string  get_ATTRIB_ACTIVE_CHOICE() {
  static const st_attrib_active_choice instance;
  return instance.getValue();
}
// ATTRIB_ACTIVE_CHOICE <---

// ---> ELEMENT_FMS
typedef struct st_element_fms {
  std::string  value =  "fms"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_element_fms;
// -- getter -- 
static std::string  get_ELEMENT_FMS() {
  static const st_element_fms instance;
  return instance.getValue();
}
// ELEMENT_FMS <---

// ---> ELEMENT_GPS
typedef struct st_element_gps {
  std::string  value =  "gps"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_element_gps;
// -- getter -- 
static std::string  get_ELEMENT_GPS() {
  static const st_element_gps instance;
  return instance.getValue();
}
// ELEMENT_GPS <---

// ---> ATTRIB_GPS_DISPLAY_FULL_ROUTE_B
typedef struct st_attrib_gps_display_full_route_b {
  std::string  value =  "display_full_route_b"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_gps_display_full_route_b;
// -- getter -- 
static std::string  get_ATTRIB_GPS_DISPLAY_FULL_ROUTE_B() {
  static const st_attrib_gps_display_full_route_b instance;
  return instance.getValue();
}
// ATTRIB_GPS_DISPLAY_FULL_ROUTE_B <---

// ---> ATTRIB_DESTINATION_ENTRY
typedef struct st_attrib_destination_entry {
  std::string  value =  "destination_entry"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_destination_entry;
// -- getter -- 
static std::string  get_ATTRIB_DESTINATION_ENTRY() {
  static const st_attrib_destination_entry instance;
  return instance.getValue();
}
// ATTRIB_DESTINATION_ENTRY <---

// ---> ELEMENT_FMS_ENTRY
typedef struct st_element_fms_entry {
  std::string  value =  "fms_entry"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_element_fms_entry;
// -- getter -- 
static std::string  get_ELEMENT_FMS_ENTRY() {
  static const st_element_fms_entry instance;
  return instance.getValue();
}
// ELEMENT_FMS_ENTRY <---

// ---> ELEMENT_GOALS
typedef struct st_element_goals {
  std::string  value =  "goals";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_element_goals;
// -- getter -- 
static std::string  get_ELEMENT_GOALS() {
  static const st_element_goals instance;
  return instance.getValue();
}
// ELEMENT_GOALS <---

// ---> ELEMENT_GOAL
typedef struct st_element_goal {
  std::string  value =  "goal";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_element_goal;
// -- getter -- 
static std::string  get_ELEMENT_GOAL() {
  static const st_element_goal instance;
  return instance.getValue();
}
// ELEMENT_GOAL <---

// ---> ELEMENT_FLIGHT_PLAN
typedef struct st_element_flight_plan {
  std::string  value =  "flight_plan"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_element_flight_plan;
// -- getter -- 
static std::string  get_ELEMENT_FLIGHT_PLAN() {
  static const st_element_flight_plan instance;
  return instance.getValue();
}
// ELEMENT_FLIGHT_PLAN <---

// ---> ELEMENT_LEG
typedef struct st_element_leg {
  std::string  value =  "leg"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_element_leg;
// -- getter -- 
static std::string  get_ELEMENT_LEG() {
  static const st_element_leg instance;
  return instance.getValue();
}
// ELEMENT_LEG <---

// ---> ELEMENT_WEATHER
typedef struct st_element_weather {
  std::string  value =  "weather"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_element_weather;
// -- getter -- 
static std::string  get_ELEMENT_WEATHER() {
  static const st_element_weather instance;
  return instance.getValue();
}
// ELEMENT_WEATHER <---

// ---> ELEMENT_SAVED_WEATHER
typedef struct st_element_saved_weather {
  std::string  value =  "saved_weather"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_element_saved_weather;
// -- getter -- 
static std::string  get_ELEMENT_SAVED_WEATHER() {
  static const st_element_saved_weather instance;
  return instance.getValue();
}
// ELEMENT_SAVED_WEATHER <---

// ---> ELEMENT_SPECIAL_LEG_DIRECTIVES
typedef struct st_element_special_leg_directives {
  std::string  value =  "special_leg_directives"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_element_special_leg_directives;
// -- getter -- 
static std::string  get_ELEMENT_SPECIAL_LEG_DIRECTIVES() {
  static const st_element_special_leg_directives instance;
  return instance.getValue();
}
// ELEMENT_SPECIAL_LEG_DIRECTIVES <---

// ---> ELEMENT_SPECIAL_GOAL_DIRECTIVES
typedef struct st_element_special_goal_directives {
  std::string  value =  "special_goal_directives"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_element_special_goal_directives;
// -- getter -- 
static std::string  get_ELEMENT_SPECIAL_GOAL_DIRECTIVES() {
  static const st_element_special_goal_directives instance;
  return instance.getValue();
}
// ELEMENT_SPECIAL_GOAL_DIRECTIVES <---

// ---> ELEMENT_LINK_TO_OBJECTIVE
typedef struct st_element_link_to_objective {
  std::string  value =  "link_to_objective";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_element_link_to_objective;
// -- getter -- 
static std::string  get_ELEMENT_LINK_TO_OBJECTIVE() {
  static const st_element_link_to_objective instance;
  return instance.getValue();
}
// ELEMENT_LINK_TO_OBJECTIVE <---

// ---> ELEMENT_LINK_TO_TRIGGER
typedef struct st_element_link_to_trigger {
  std::string  value =  "link_to_trigger";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_element_link_to_trigger;
// -- getter -- 
static std::string  get_ELEMENT_LINK_TO_TRIGGER() {
  static const st_element_link_to_trigger instance;
  return instance.getValue();
}
// ELEMENT_LINK_TO_TRIGGER <---

// ---> ELEMENT_START_LEG_MESSAGE
typedef struct st_element_start_leg_message {
  std::string  value =  "start_leg_message";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_element_start_leg_message;
// -- getter -- 
static std::string  get_ELEMENT_START_LEG_MESSAGE() {
  static const st_element_start_leg_message instance;
  return instance.getValue();
}
// ELEMENT_START_LEG_MESSAGE <---

// ---> ELEMENT_START_GOAL_MESSAGE
typedef struct st_element_start_goal_message {
  std::string  value =  "start_goal_message";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_element_start_goal_message;
// -- getter -- 
static std::string  get_ELEMENT_START_GOAL_MESSAGE() {
  static const st_element_start_goal_message instance;
  return instance.getValue();
}
// ELEMENT_START_GOAL_MESSAGE <---

// ---> PROP_START_LEG_MESSAGE_FIRED
typedef struct st_prop_start_leg_message_fired {
  std::string  value =  "start_leg_message_fired"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_prop_start_leg_message_fired;
// -- getter -- 
static std::string  get_PROP_START_LEG_MESSAGE_FIRED() {
  static const st_prop_start_leg_message_fired instance;
  return instance.getValue();
}
// PROP_START_LEG_MESSAGE_FIRED <---

// ---> ELEMENT_END_LEG_MESSAGE
typedef struct st_element_end_leg_message {
  std::string  value =  "end_leg_message"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_element_end_leg_message;
// -- getter -- 
static std::string  get_ELEMENT_END_LEG_MESSAGE() {
  static const st_element_end_leg_message instance;
  return instance.getValue();
}
// ELEMENT_END_LEG_MESSAGE <---

// ---> ELEMENT_END_GOAL_MESSAGE
typedef struct st_element_end_goal_message {
  std::string  value =  "end_goal_message"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_element_end_goal_message;
// -- getter -- 
static std::string  get_ELEMENT_END_GOAL_MESSAGE() {
  static const st_element_end_goal_message instance;
  return instance.getValue();
}
// ELEMENT_END_GOAL_MESSAGE <---

// ---> ELEMENT_PRE_LEG_SCRIPT
typedef struct st_element_pre_leg_script {
  std::string  value =  "pre_leg_script";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_element_pre_leg_script;
// -- getter -- 
static std::string  get_ELEMENT_PRE_LEG_SCRIPT() {
  static const st_element_pre_leg_script instance;
  return instance.getValue();
}
// ELEMENT_PRE_LEG_SCRIPT <---

// ---> PROP_PRE_LEG_SCRIPT_FIRED
typedef struct st_prop_pre_leg_script_fired {
  std::string  value =  "pre_leg_script_fired"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_prop_pre_leg_script_fired;
// -- getter -- 
static std::string  get_PROP_PRE_LEG_SCRIPT_FIRED() {
  static const st_prop_pre_leg_script_fired instance;
  return instance.getValue();
}
// PROP_PRE_LEG_SCRIPT_FIRED <---

// ---> ELEMENT_POST_LEG_SCRIPT
typedef struct st_element_post_leg_script {
  std::string  value =  "post_leg_script";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_element_post_leg_script;
// -- getter -- 
static std::string  get_ELEMENT_POST_LEG_SCRIPT() {
  static const st_element_post_leg_script instance;
  return instance.getValue();
}
// ELEMENT_POST_LEG_SCRIPT <---

// ---> ATTRIB_DISPLAY_AT_POST_LEG_B
typedef struct st_attrib_display_at_post_leg_b {
  std::string  value =  "display_at_post_leg_b"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_display_at_post_leg_b;
// -- getter -- 
static std::string  get_ATTRIB_DISPLAY_AT_POST_LEG_B() {
  static const st_attrib_display_at_post_leg_b instance;
  return instance.getValue();
}
// ATTRIB_DISPLAY_AT_POST_LEG_B <---


// ---> ATTRIB_NEXT_LEG
typedef struct st_attrib_next_leg {
  std::string  value =  "next_leg";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_next_leg;
// -- getter -- 
static std::string  get_ATTRIB_NEXT_LEG() {
  static const st_attrib_next_leg instance;
  return instance.getValue();
}
// ATTRIB_NEXT_LEG <---

// ---> ATTRIB_NEXT_GOAL
typedef struct st_attrib_next_goal {
  std::string  value =  "next_goal";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_next_goal;
// -- getter -- 
static std::string  get_ATTRIB_NEXT_GOAL() {
  static const st_attrib_next_goal instance;
  return instance.getValue();
}
// ATTRIB_NEXT_GOAL <---

// ---> ELEMENT_DRAW_SCRIPT
typedef struct st_element_draw_script {
  std::string  value =  "draw_script"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_element_draw_script;
// -- getter -- 
static std::string  get_ELEMENT_DRAW_SCRIPT() {
  static const st_element_draw_script instance;
  return instance.getValue();
}
// ELEMENT_DRAW_SCRIPT <---

// ---> DYNAMIC_MESSAGE
typedef struct st_dynamic_message {
  std::string  value =  "dynamic_message"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_dynamic_message;
// -- getter -- 
static std::string  get_DYNAMIC_MESSAGE() {
  static const st_dynamic_message instance;
  return instance.getValue();
}
// DYNAMIC_MESSAGE <---

// ---> PREFIX_DYN_MESSAGE_NAME
typedef struct st_prefix_dyn_message_name {
  std::string  value =  "msg_4_dyn_message_"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_prefix_dyn_message_name;
// -- getter -- 
static std::string  get_PREFIX_DYN_MESSAGE_NAME() {
  static const st_prefix_dyn_message_name instance;
  return instance.getValue();
}
// PREFIX_DYN_MESSAGE_NAME <---

// ---> PREFIX_TRIG_DYN_MESSAGE_NAME
typedef struct st_prefix_trig_dyn_message_name {
  std::string  value =  "trig_dyn_message_"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_prefix_trig_dyn_message_name;
// -- getter -- 
static std::string  get_PREFIX_TRIG_DYN_MESSAGE_NAME() {
  static const st_prefix_trig_dyn_message_name instance;
  return instance.getValue();
}
// PREFIX_TRIG_DYN_MESSAGE_NAME <---

// ---> ATTRIB_MESSAGE_NAME_TO_CALL
typedef struct st_attrib_message_name_to_call {
  std::string  value =  "message_name_to_call"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_message_name_to_call;
// -- getter -- 
static std::string  get_ATTRIB_MESSAGE_NAME_TO_CALL() {
  static const st_attrib_message_name_to_call instance;
  return instance.getValue();
}
// ATTRIB_MESSAGE_NAME_TO_CALL <---

// ---> ATTRIB_RELATIVE_TO_TASK
typedef struct st_attrib_relative_to_task {
  std::string  value =  "relative_to_task"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_relative_to_task;
// -- getter -- 
static std::string  get_ATTRIB_RELATIVE_TO_TASK() {
  static const st_attrib_relative_to_task instance;
  return instance.getValue();
}
// ATTRIB_RELATIVE_TO_TASK <---

// ---> ATTRIB_RELATIVE_TO_TRIGGER
typedef struct st_attrib_relative_to_trigger {
  std::string  value =  "relative_to_trigger"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_relative_to_trigger;
// -- getter -- 
static std::string  get_ATTRIB_RELATIVE_TO_TRIGGER() {
  static const st_attrib_relative_to_trigger instance;
  return instance.getValue();
}
// ATTRIB_RELATIVE_TO_TRIGGER <---

// ---> ATTRIB_OVERRIDE_TASK_NAME
typedef struct st_attrib_override_task_name {
  std::string  value =  "override_task_name"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_override_task_name;
// -- getter -- 
static std::string  get_ATTRIB_OVERRIDE_TASK_NAME() {
  static const st_attrib_override_task_name instance;
  return instance.getValue();
}
// ATTRIB_OVERRIDE_TASK_NAME <---

// ---> ATTRIB_OVERRIDE_TRIGGER_NAME
typedef struct st_attrib_override_trigger_name {
  std::string  value =  "override_trigger_name"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_override_trigger_name;
// -- getter -- 
static std::string  get_ATTRIB_OVERRIDE_TRIGGER_NAME() {
  static const st_attrib_override_trigger_name instance;
  return instance.getValue();
}
// ATTRIB_OVERRIDE_TRIGGER_NAME <---

// ---> ATTRIB_DISABLE_AUTO_MESSAGE_B
typedef struct st_attrib_disable_auto_message_b {
  std::string  value =  "disable_auto_message_b"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_disable_auto_message_b;
// -- getter -- 
static std::string  get_ATTRIB_DISABLE_AUTO_MESSAGE_B() {
  static const st_attrib_disable_auto_message_b instance;
  return instance.getValue();
}
// ATTRIB_DISABLE_AUTO_MESSAGE_B <---

// ---> ATTRIB_SUPPRESS_DISTANCE_MESSAGES_B
typedef struct st_attrib_suppress_distance_messages_b {
  std::string  value =  "suppress_distance_messages_b"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_suppress_distance_messages_b;
// -- getter -- 
static std::string  get_ATTRIB_SUPPRESS_DISTANCE_MESSAGES_B() {
  static const st_attrib_suppress_distance_messages_b instance;
  return instance.getValue();
}
// ATTRIB_SUPPRESS_DISTANCE_MESSAGES_B <---

// ---> ELEMENT_BRIEFER
typedef struct st_element_briefer {
  std::string  value =  "briefer";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_element_briefer;
// -- getter -- 
static std::string  get_ELEMENT_BRIEFER() {
  static const st_element_briefer instance;
  return instance.getValue();
}
// ELEMENT_BRIEFER <---

// ---> ATTRIB_STARTING_LEG
typedef struct st_attrib_starting_leg {
  std::string  value =  "starting_leg"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_starting_leg;
// -- getter -- 
static std::string  get_ATTRIB_STARTING_LEG() {
  static const st_attrib_starting_leg instance;
  return instance.getValue();
}
// ATTRIB_STARTING_LEG <---

// ---> ATTRIB_STARTING_GOAL
typedef struct st_attrib_starting_goal {
  std::string  value =  "starting_goal"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_starting_goal;
// -- getter -- 
static std::string  get_ATTRIB_STARTING_GOAL() {
  static const st_attrib_starting_goal instance;
  return instance.getValue();
}
// ATTRIB_STARTING_GOAL <---

// ---> ATTRIB_POSITION_PREF
typedef struct st_attrib_position_pref {
  std::string  value =  "position_pref"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_position_pref;
// -- getter -- 
static std::string  get_ATTRIB_POSITION_PREF() {
  static const st_attrib_position_pref instance;
  return instance.getValue();
}
// ATTRIB_POSITION_PREF <---

// ---> ELEMENT_LOCATION_ADJUST
typedef struct st_element_location_adjust {
  std::string  value =  "location_adjust";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_element_location_adjust;
// -- getter -- 
static std::string  get_ELEMENT_LOCATION_ADJUST() {
  static const st_element_location_adjust instance;
  return instance.getValue();
}
// ELEMENT_LOCATION_ADJUST <---

// ---> ATTRIB_LAT
typedef struct st_attrib_lat {
  std::string  value =  "lat";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_lat;
// -- getter -- 
static std::string  get_ATTRIB_LAT() {
  static const st_attrib_lat instance;
  return instance.getValue();
}
// ATTRIB_LAT <---

// ---> ATTRIB_LONG
typedef struct st_attrib_long {
  std::string  value =  "long";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_long;
// -- getter -- 
static std::string  get_ATTRIB_LONG() {
  static const st_attrib_long instance;
  return instance.getValue();
}
// ATTRIB_LONG <---

// ---> ATTRIB_LAT_OSM
typedef struct st_attrib_lat_osm {
  std::string  value =  "lat"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_lat_osm;
// -- getter -- 
static std::string  get_ATTRIB_LAT_OSM() {
  static const st_attrib_lat_osm instance;
  return instance.getValue();
}
// ATTRIB_LAT_OSM <---

// ---> ATTRIB_LONG_OSM
typedef struct st_attrib_long_osm {
  std::string  value =  "lon"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_long_osm;
// -- getter -- 
static std::string  get_ATTRIB_LONG_OSM() {
  static const st_attrib_long_osm instance;
  return instance.getValue();
}
// ATTRIB_LONG_OSM <---

// ---> ATTRIB_ELEV_FT
typedef struct st_attrib_elev_ft {
  std::string  value =  "elev_ft"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_elev_ft;
// -- getter -- 
static std::string  get_ATTRIB_ELEV_FT() {
  static const st_attrib_elev_ft instance;
  return instance.getValue();
}
// ATTRIB_ELEV_FT <---

// ---> ATTRIB_HEADING_PSI
typedef struct st_attrib_heading_psi {
  std::string  value =  "heading_psi"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_heading_psi;
// -- getter -- 
static std::string  get_ATTRIB_HEADING_PSI() {
  static const st_attrib_heading_psi instance;
  return instance.getValue();
}
// ATTRIB_HEADING_PSI <---

// ---> ATTRIB_FORCE_HEADING_B
typedef struct st_attrib_force_heading_b {
  std::string  value =  "force_heading_b"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_force_heading_b;
// -- getter -- 
static std::string  get_ATTRIB_FORCE_HEADING_B() {
  static const st_attrib_force_heading_b instance;
  return instance.getValue();
}
// ATTRIB_FORCE_HEADING_B <---

// ---> ATTRIB_FORCE_POSITION_B
typedef struct st_attrib_force_position_b {
  std::string  value =  "force_position_b"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_force_position_b;
// -- getter -- 
static std::string  get_ATTRIB_FORCE_POSITION_B() {
  static const st_attrib_force_position_b instance;
  return instance.getValue();
}
// ATTRIB_FORCE_POSITION_B <---

// ---> ATTRIB_ADJUST_HEADING
typedef struct st_attrib_adjust_heading {
  std::string  value =  "adjust_heading"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_adjust_heading;
// -- getter -- 
static std::string  get_ATTRIB_ADJUST_HEADING() {
  static const st_attrib_adjust_heading instance;
  return instance.getValue();
}
// ATTRIB_ADJUST_HEADING <---

// ---> ATTRIB_PITCH
typedef struct st_attrib_pitch {
  std::string  value =  "pitch"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_pitch;
// -- getter -- 
static std::string  get_ATTRIB_PITCH() {
  static const st_attrib_pitch instance;
  return instance.getValue();
}
// ATTRIB_PITCH <---

// ---> ATTRIB_ROLL
typedef struct st_attrib_roll {
  std::string  value =  "roll"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_roll;
// -- getter -- 
static std::string  get_ATTRIB_ROLL() {
  static const st_attrib_roll instance;
  return instance.getValue();
}
// ATTRIB_ROLL <---

// ---> ATTRIB_STARTING_SPEED_MT_SEC
typedef struct st_attrib_starting_speed_mt_sec {
  std::string  value =  "starting_speed_mt_sec"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_starting_speed_mt_sec;
// -- getter -- 
static std::string  get_ATTRIB_STARTING_SPEED_MT_SEC() {
  static const st_attrib_starting_speed_mt_sec instance;
  return instance.getValue();
}
// ATTRIB_STARTING_SPEED_MT_SEC <---

// ---> ATTRIB_PAUSE_AFTER_LOCATION_ADJUST
typedef struct st_attrib_pause_after_location_adjust {
  std::string  value =  "pause_after_location_adjust";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_pause_after_location_adjust;
// -- getter -- 
static std::string  get_ATTRIB_PAUSE_AFTER_LOCATION_ADJUST() {
  static const st_attrib_pause_after_location_adjust instance;
  return instance.getValue();
}
// ATTRIB_PAUSE_AFTER_LOCATION_ADJUST <---

// ---> PROP_CURRENT_LOCATION
typedef struct st_prop_current_location {
  std::string  value =  "current_location";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_prop_current_location;
// -- getter -- 
static std::string  get_PROP_CURRENT_LOCATION() {
  static const st_prop_current_location instance;
  return instance.getValue();
}
// PROP_CURRENT_LOCATION <---

// ---> PROP_POINT_DATA
typedef struct st_prop_point_data {
  std::string  value =  "point_data";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_prop_point_data;
// -- getter -- 
static std::string  get_PROP_POINT_DATA() {
  static const st_prop_point_data instance;
  return instance.getValue();
}
// PROP_POINT_DATA <---

// ---> ATTRIB_RAMP_INFO
typedef struct st_attrib_ramp_info {
  std::string  value =  "ramp_info"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_ramp_info;
// -- getter -- 
static std::string  get_ATTRIB_RAMP_INFO() {
  static const st_attrib_ramp_info instance;
  return instance.getValue();
}
// ATTRIB_RAMP_INFO <---

// ---> ATTRIB_START_LAT
typedef struct st_attrib_start_lat {
  std::string  value =  "start_lat"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_start_lat;
// -- getter -- 
static std::string  get_ATTRIB_START_LAT() {
  static const st_attrib_start_lat instance;
  return instance.getValue();
}
// ATTRIB_START_LAT <---

// ---> ATTRIB_START_LON
typedef struct st_attrib_start_lon {
  std::string  value =  "start_lon";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_start_lon;
// -- getter -- 
static std::string  get_ATTRIB_START_LON() {
  static const st_attrib_start_lon instance;
  return instance.getValue();
}
// ATTRIB_START_LON <---

// ---> ATTRIB_END_LAT
typedef struct st_attrib_end_lat {
  std::string  value =  "end_lat";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_end_lat;
// -- getter -- 
static std::string  get_ATTRIB_END_LAT() {
  static const st_attrib_end_lat instance;
  return instance.getValue();
}
// ATTRIB_END_LAT <---

// ---> ATTRIB_END_LON
typedef struct st_attrib_end_lon {
  std::string  value =  "end_lon";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_end_lon;
// -- getter -- 
static std::string  get_ATTRIB_END_LON() {
  static const st_attrib_end_lon instance;
  return instance.getValue();
}
// ATTRIB_END_LON <---


// ---> ATTRIB_INIT_SCRIPT
typedef struct st_attrib_init_script {
  std::string  value =  "init_script";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_init_script;
// -- getter -- 
static std::string  get_ATTRIB_INIT_SCRIPT() {
  static const st_attrib_init_script instance;
  return instance.getValue();
}
// ATTRIB_INIT_SCRIPT <---

// ---> PROP_OBJECTS_ROOT
typedef struct st_prop_objects_root {
  std::string  value =  "objects_root"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_prop_objects_root;
// -- getter -- 
static std::string  get_PROP_OBJECTS_ROOT() {
  static const st_prop_objects_root instance;
  return instance.getValue();
}
// PROP_OBJECTS_ROOT <---

// ---> PROP_OBJECTS_INSTANCES
typedef struct st_prop_objects_instances {
  std::string  value =  "objects_instances"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_prop_objects_instances;
// -- getter -- 
static std::string  get_PROP_OBJECTS_INSTANCES() {
  static const st_prop_objects_instances instance;
  return instance.getValue();
}
// PROP_OBJECTS_INSTANCES <---

// ---> ELEMENT_OBJECT_TEMPLATES
typedef struct st_element_object_templates {
  std::string  value =  "object_templates";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_element_object_templates;
// -- getter -- 
static std::string  get_ELEMENT_OBJECT_TEMPLATES() {
  static const st_element_object_templates instance;
  return instance.getValue();
}
// ELEMENT_OBJECT_TEMPLATES <---

// ---> ELEMENT_OBJ3D
typedef struct st_element_obj3d {
  std::string  value =  "obj3d";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_element_obj3d;
// -- getter -- 
static std::string  get_ELEMENT_OBJ3D() {
  static const st_element_obj3d instance;
  return instance.getValue();
}
// ELEMENT_OBJ3D <---

// ---> ELEMENT_PATH
typedef struct st_element_path {
  std::string  value =  "path"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_element_path;
// -- getter -- 
static std::string  get_ELEMENT_PATH() {
  static const st_element_path instance;
  return instance.getValue();
}
// ELEMENT_PATH <---

// ---> ATTRIB_CYCLE
typedef struct st_attrib_cycle {
  std::string  value =  "cycle"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_cycle;
// -- getter -- 
static std::string  get_ATTRIB_CYCLE() {
  static const st_attrib_cycle instance;
  return instance.getValue();
}
// ATTRIB_CYCLE <---

// ---> PROP_POINT_FROM
typedef struct st_prop_point_from {
  std::string  value =  "point_from"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_prop_point_from;
// -- getter -- 
static std::string  get_PROP_POINT_FROM() {
  static const st_prop_point_from instance;
  return instance.getValue();
}
// PROP_POINT_FROM <---

// ---> PROP_POINT_TO
typedef struct st_prop_point_to {
  std::string  value =  "point_to"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_prop_point_to;
// -- getter -- 
static std::string  get_PROP_POINT_TO() {
  static const st_prop_point_to instance;
  return instance.getValue();
}
// PROP_POINT_TO <---

// ---> PROP_CURRENT_POINT_NO
typedef struct st_prop_current_point_no {
  std::string  value =  "current_point_no"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_prop_current_point_no;
// -- getter -- 
static std::string  get_PROP_CURRENT_POINT_NO() {
  static const st_prop_current_point_no instance;
  return instance.getValue();
}
// PROP_CURRENT_POINT_NO <---

// ---> PROP_INSTANCE_DATA_ELEMENT
typedef struct st_prop_instance_data_element {
  std::string  value =  "instance_data"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_prop_instance_data_element;
// -- getter -- 
static std::string  get_PROP_INSTANCE_DATA_ELEMENT() {
  static const st_prop_instance_data_element instance;
  return instance.getValue();
}
// PROP_INSTANCE_DATA_ELEMENT <---

// ---> PROP_INSTANCE_SPECIAL_PROPERTIES
typedef struct st_prop_instance_special_properties {
  std::string  value =  "instance_special_properties"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_prop_instance_special_properties;
// -- getter -- 
static std::string  get_PROP_INSTANCE_SPECIAL_PROPERTIES() {
  static const st_prop_instance_special_properties instance;
  return instance.getValue();
}
// PROP_INSTANCE_SPECIAL_PROPERTIES <---

// ---> PROP_GOAL_INSTANCES_SPECIAL_DATA_ELEMENT
typedef struct st_prop_goal_instances_special_data_element {
  std::string  value =  "goal_instances_special_data_element"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_prop_goal_instances_special_data_element;
// -- getter -- 
static std::string  get_PROP_GOAL_INSTANCES_SPECIAL_DATA_ELEMENT() {
  static const st_prop_goal_instances_special_data_element instance;
  return instance.getValue();
}
// PROP_GOAL_INSTANCES_SPECIAL_DATA_ELEMENT <---

// ---> PROP_LOADED_FROM_CHECKPOINT
typedef struct st_prop_loaded_from_checkpoint {
  std::string  value =  "loaded_from_checkpoint"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_prop_loaded_from_checkpoint;
// -- getter -- 
static std::string  get_PROP_LOADED_FROM_CHECKPOINT() {
  static const st_prop_loaded_from_checkpoint instance;
  return instance.getValue();
}
// PROP_LOADED_FROM_CHECKPOINT <---

// ---> PROP_GOAL_MAP2D
typedef struct st_prop_goal_map2d {
  std::string  value =  "goals_maps"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_prop_goal_map2d;
// -- getter -- 
static std::string  get_PROP_GOAL_MAP2D() {
  static const st_prop_goal_map2d instance;
  return instance.getValue();
}
// PROP_GOAL_MAP2D <---

// ---> ELEMENT_LOCATION
typedef struct st_element_location {
  std::string  value =  "location"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_element_location;
// -- getter -- 
static std::string  get_ELEMENT_LOCATION() {
  static const st_element_location instance;
  return instance.getValue();
}
// ELEMENT_LOCATION <---

// ---> ELEMENT_TILT
typedef struct st_element_tilt {
  std::string  value =  "tilt"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_element_tilt;
// -- getter -- 
static std::string  get_ELEMENT_TILT() {
  static const st_element_tilt instance;
  return instance.getValue();
}
// ELEMENT_TILT <---

// ---> ELEMENT_DISPLAY_OBJECT
typedef struct st_element_display_object {
  std::string  value =  "display_object"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_element_display_object;
// -- getter -- 
static std::string  get_ELEMENT_DISPLAY_OBJECT() {
  static const st_element_display_object instance;
  return instance.getValue();
}
// ELEMENT_DISPLAY_OBJECT <---

// ---> ELEMENT_DISPLAY_OBJECT_SET
typedef struct st_element_display_object_set {
  std::string  value =  "display_object_set"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_element_display_object_set;
// -- getter -- 
static std::string  get_ELEMENT_DISPLAY_OBJECT_SET() {
  static const st_element_display_object_set instance;
  return instance.getValue();
}
// ELEMENT_DISPLAY_OBJECT_SET <---

// ---> ELEMENT_DISPLAY_OBJECT_NEAR_PLANE
typedef struct st_element_display_object_near_plane {
  std::string  value =  "display_object_near_plane"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_element_display_object_near_plane;
// -- getter -- 
static std::string  get_ELEMENT_DISPLAY_OBJECT_NEAR_PLANE() {
  static const st_element_display_object_near_plane instance;
  return instance.getValue();
}
// ELEMENT_DISPLAY_OBJECT_NEAR_PLANE <---

// ---> ATTRIB_REPLACE_LAT
typedef struct st_attrib_replace_lat {
  std::string  value =  "replace_lat"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_replace_lat;
// -- getter -- 
static std::string  get_ATTRIB_REPLACE_LAT() {
  static const st_attrib_replace_lat instance;
  return instance.getValue();
}
// ATTRIB_REPLACE_LAT <---

// ---> ATTRIB_REPLACE_LONG
typedef struct st_attrib_replace_long {
  std::string  value =  "replace_long"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_replace_long;
// -- getter -- 
static std::string  get_ATTRIB_REPLACE_LONG() {
  static const st_attrib_replace_long instance;
  return instance.getValue();
}
// ATTRIB_REPLACE_LONG <---

// ---> ATTRIB_REPLACE_ELEV_FT
typedef struct st_attrib_replace_elev_ft {
  std::string  value =  "replace_elev_ft"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_replace_elev_ft;
// -- getter -- 
static std::string  get_ATTRIB_REPLACE_ELEV_FT() {
  static const st_attrib_replace_elev_ft instance;
  return instance.getValue();
}
// ATTRIB_REPLACE_ELEV_FT <---

// ---> ATTRIB_REPLACE_ELEV_ABOVE_GROUND_FT
typedef struct st_attrib_replace_elev_above_ground_ft {
  std::string  value =  "replace_elev_above_ground_ft"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_replace_elev_above_ground_ft;
// -- getter -- 
static std::string  get_ATTRIB_REPLACE_ELEV_ABOVE_GROUND_FT() {
  static const st_attrib_replace_elev_above_ground_ft instance;
  return instance.getValue();
}
// ATTRIB_REPLACE_ELEV_ABOVE_GROUND_FT <---

// ---> ATTRIB_REPLACE_DISTANCE_TO_DISPLAY_NM
typedef struct st_attrib_replace_distance_to_display_nm {
  std::string  value =  "replace_distance_to_display_nm"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_replace_distance_to_display_nm;
// -- getter -- 
static std::string  get_ATTRIB_REPLACE_DISTANCE_TO_DISPLAY_NM() {
  static const st_attrib_replace_distance_to_display_nm instance;
  return instance.getValue();
}
// ATTRIB_REPLACE_DISTANCE_TO_DISPLAY_NM <---

// ---> ATTRIB_INSTANCE_NAME
typedef struct st_attrib_instance_name {
  std::string  value =  "instance_name"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_instance_name;
// -- getter -- 
static std::string  get_ATTRIB_INSTANCE_NAME() {
  static const st_attrib_instance_name instance;
  return instance.getValue();
}
// ATTRIB_INSTANCE_NAME <---

// ---> ATTRIB_TARGET_MARKER_B
typedef struct st_attrib_target_marker_b {
  std::string  value =  "target_marker_b"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_target_marker_b;
// -- getter -- 
static std::string  get_ATTRIB_TARGET_MARKER_B() {
  static const st_attrib_target_marker_b instance;
  return instance.getValue();
}
// ATTRIB_TARGET_MARKER_B <---

// ---> ATTRIB_OBJ3D_TYPE
typedef struct st_attrib_obj3d_type {
  std::string  value =  "obj_type";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_obj3d_type;
// -- getter -- 
static std::string  get_ATTRIB_OBJ3D_TYPE() {
  static const st_attrib_obj3d_type instance;
  return instance.getValue();
}
// ATTRIB_OBJ3D_TYPE <---

// ---> ATTRIB_IS_VIRTUAL_B
typedef struct st_attrib_is_virtual_b {
  std::string  value =  "is_virtual_b"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_is_virtual_b;
// -- getter -- 
static std::string  get_ATTRIB_IS_VIRTUAL_B() {
  static const st_attrib_is_virtual_b instance;
  return instance.getValue();
}
// ATTRIB_IS_VIRTUAL_B <---

// ---> ATTRIB_ALTERNATE_OBJ_FILE
typedef struct st_attrib_alternate_obj_file {
  std::string  value =  "alternate_obj_file";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_alternate_obj_file;
// -- getter -- 
static std::string  get_ATTRIB_ALTERNATE_OBJ_FILE() {
  static const st_attrib_alternate_obj_file instance;
  return instance.getValue();
}
// ATTRIB_ALTERNATE_OBJ_FILE <---

// ---> ATTRIB_DISTANCE_TO_DISPLAY_NM
typedef struct st_attrib_distance_to_display_nm {
  std::string  value =  "distance_to_display_nm"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_distance_to_display_nm;
// -- getter -- 
static std::string  get_ATTRIB_DISTANCE_TO_DISPLAY_NM() {
  static const st_attrib_distance_to_display_nm instance;
  return instance.getValue();
}
// ATTRIB_DISTANCE_TO_DISPLAY_NM <---

// ---> ATTRIB_KEEP_UNTIL_GOAL
typedef struct st_attrib_keep_until_goal {
  std::string  value =  "keep_until_goal"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_keep_until_goal;
// -- getter -- 
static std::string  get_ATTRIB_KEEP_UNTIL_GOAL() {
  static const st_attrib_keep_until_goal instance;
  return instance.getValue();
}
// ATTRIB_KEEP_UNTIL_GOAL <---

// ---> ATTRIB_KEEP_UNTIL_LEG
typedef struct st_attrib_keep_until_leg {
  std::string  value =  "keep_until_leg"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_keep_until_leg;
// -- getter -- 
static std::string  get_ATTRIB_KEEP_UNTIL_LEG() {
  static const st_attrib_keep_until_leg instance;
  return instance.getValue();
}
// ATTRIB_KEEP_UNTIL_LEG <---

// ---> ATTRIB_HIDE
typedef struct st_attrib_hide {
  std::string  value =  "hide"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_hide;
// -- getter -- 
static std::string  get_ATTRIB_HIDE() {
  static const st_attrib_hide instance;
  return instance.getValue();
}
// ATTRIB_HIDE <---

// ---> PROP_DISPLAY_DEFAULT_OBJECT_FILE_OVER_ALTERNATE
typedef struct st_prop_display_default_object_file_over_alternate {
  std::string  value =  "display_active_object"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_prop_display_default_object_file_over_alternate;
// -- getter -- 
static std::string  get_PROP_DISPLAY_DEFAULT_OBJECT_FILE_OVER_ALTERNATE() {
  static const st_prop_display_default_object_file_over_alternate instance;
  return instance.getValue();
}
// PROP_DISPLAY_DEFAULT_OBJECT_FILE_OVER_ALTERNATE <---

// ---> PROP_CAN_BE_DISPLAYED
typedef struct st_prop_can_be_displayed {
  std::string  value =  "can_be_displayed"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_prop_can_be_displayed;
// -- getter -- 
static std::string  get_PROP_CAN_BE_DISPLAYED() {
  static const st_prop_can_be_displayed instance;
  return instance.getValue();
}
// PROP_CAN_BE_DISPLAYED <---

// ---> ATTRIB_ELEV_ABOVE_GROUND_FT
typedef struct st_attrib_elev_above_ground_ft {
  std::string  value =  "elev_above_ground_ft"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_elev_above_ground_ft;
// -- getter -- 
static std::string  get_ATTRIB_ELEV_ABOVE_GROUND_FT() {
  static const st_attrib_elev_above_ground_ft instance;
  return instance.getValue();
}
// ATTRIB_ELEV_ABOVE_GROUND_FT <---

// ---> PREFIX_REPLACE_
typedef struct st_prefix_replace_ {
  std::string  value =  "replace_"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_prefix_replace_;
// -- getter -- 
static std::string  get_PREFIX_REPLACE_() {
  static const st_prefix_replace_ instance;
  return instance.getValue();
}
// PREFIX_REPLACE_ <---

// ---> ATTRIB_LINK_TASK
typedef struct st_attrib_link_task {
  std::string  value =  "link_task"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_link_task;
// -- getter -- 
static std::string  get_ATTRIB_LINK_TASK() {
  static const st_attrib_link_task instance;
  return instance.getValue();
}
// ATTRIB_LINK_TASK <---


// ---> PROP_LINK_OBJECTIVE_NAME
typedef struct st_prop_link_objective_name {
  std::string  value =  "link_objective_name"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_prop_link_objective_name;
// -- getter -- 
static std::string  get_PROP_LINK_OBJECTIVE_NAME() {
  static const st_prop_link_objective_name instance;
  return instance.getValue();
}
// PROP_LINK_OBJECTIVE_NAME <---

// ---> ATTRIB_SPEED_KMH
typedef struct st_attrib_speed_kmh {
  std::string  value =  "speed_kmh"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_speed_kmh;
// -- getter -- 
static std::string  get_ATTRIB_SPEED_KMH() {
  static const st_attrib_speed_kmh instance;
  return instance.getValue();
}
// ATTRIB_SPEED_KMH <---

// ---> ATTRIB_WAIT_SEC
typedef struct st_attrib_wait_sec {
  std::string  value =  "wait_sec";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_wait_sec;
// -- getter -- 
static std::string  get_ATTRIB_WAIT_SEC() {
  static const st_attrib_wait_sec instance;
  return instance.getValue();
}
// ATTRIB_WAIT_SEC <---

// ---> ELEMENT_TRIGGERS
typedef struct st_element_triggers {
  std::string  value =  "triggers"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_element_triggers;
// -- getter -- 
static std::string  get_ELEMENT_TRIGGERS() {
  static const st_element_triggers instance;
  return instance.getValue();
}
// ELEMENT_TRIGGERS <---

// ---> ELEMENT_TRIGGER
typedef struct st_element_trigger {
  std::string  value =  "trigger";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_element_trigger;
// -- getter -- 
static std::string  get_ELEMENT_TRIGGER() {
  static const st_element_trigger instance;
  return instance.getValue();
}
// ELEMENT_TRIGGER <---

// ---> ELEMENT_SCRIPTS
typedef struct st_element_scripts {
  std::string  value =  "scripts";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_element_scripts;
// -- getter -- 
static std::string  get_ELEMENT_SCRIPTS() {
  static const st_element_scripts instance;
  return instance.getValue();
}
// ELEMENT_SCRIPTS <---

// ---> ELEMENT_SET_DATAREFS
typedef struct st_element_set_datarefs {
  std::string  value =  "set_datarefs"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_element_set_datarefs;
// -- getter -- 
static std::string  get_ELEMENT_SET_DATAREFS() {
  static const st_element_set_datarefs instance;
  return instance.getValue();
}
// ELEMENT_SET_DATAREFS <---

// ---> ELEMENT_SET_DATAREFS_ON_EXIT
typedef struct st_element_set_datarefs_on_exit {
  std::string  value =  "set_datarefs_on_exit"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_element_set_datarefs_on_exit;
// -- getter -- 
static std::string  get_ELEMENT_SET_DATAREFS_ON_EXIT() {
  static const st_element_set_datarefs_on_exit instance;
  return instance.getValue();
}
// ELEMENT_SET_DATAREFS_ON_EXIT <---

// ---> ELEMENT_CONDITIONS
typedef struct st_element_conditions {
  std::string  value =  "conditions";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_element_conditions;
// -- getter -- 
static std::string  get_ELEMENT_CONDITIONS() {
  static const st_element_conditions instance;
  return instance.getValue();
}
// ELEMENT_CONDITIONS <---

// ---> ATTRIB_PLANE_ON_GROUND
typedef struct st_attrib_plane_on_ground {
  std::string  value =  "plane_on_ground"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_plane_on_ground;
// -- getter -- 
static std::string  get_ATTRIB_PLANE_ON_GROUND() {
  static const st_attrib_plane_on_ground instance;
  return instance.getValue();
}
// ATTRIB_PLANE_ON_GROUND <---

// ---> ATTRIB_COND_SCRIPT
typedef struct st_attrib_cond_script {
  std::string  value =  "cond_script"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_cond_script;
// -- getter -- 
static std::string  get_ATTRIB_COND_SCRIPT() {
  static const st_attrib_cond_script instance;
  return instance.getValue();
}
// ATTRIB_COND_SCRIPT <---

// ---> ATTRIB_POST_SCRIPT
typedef struct st_attrib_post_script {
  std::string  value =  "post_script";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_post_script;
// -- getter -- 
static std::string  get_ATTRIB_POST_SCRIPT() {
  static const st_attrib_post_script instance;
  return instance.getValue();
}
// ATTRIB_POST_SCRIPT <---

// ---> ATTRIB_SCRIPT_NAME_WHEN_FIRED
typedef struct st_attrib_script_name_when_fired {
  std::string  value =  "script_name_when_fired"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_script_name_when_fired;
// -- getter -- 
static std::string  get_ATTRIB_SCRIPT_NAME_WHEN_FIRED() {
  static const st_attrib_script_name_when_fired instance;
  return instance.getValue();
}
// ATTRIB_SCRIPT_NAME_WHEN_FIRED <---

// ---> ATTRIB_SCRIPT_NAME_WHEN_LEFT
typedef struct st_attrib_script_name_when_left {
  std::string  value =  "script_name_when_left"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_script_name_when_left;
// -- getter -- 
static std::string  get_ATTRIB_SCRIPT_NAME_WHEN_LEFT() {
  static const st_attrib_script_name_when_left instance;
  return instance.getValue();
}
// ATTRIB_SCRIPT_NAME_WHEN_LEFT <---

// ---> ELEMENT_LOC_AND_ELEV_DATA
typedef struct st_element_loc_and_elev_data {
  std::string  value =  "loc_and_elev_data"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_element_loc_and_elev_data;
// -- getter -- 
static std::string  get_ELEMENT_LOC_AND_ELEV_DATA() {
  static const st_element_loc_and_elev_data instance;
  return instance.getValue();
}
// ELEMENT_LOC_AND_ELEV_DATA <---

// ---> ELEMENT_POINT
typedef struct st_element_point {
  std::string  value =  "point"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_element_point;
// -- getter -- 
static std::string  get_ELEMENT_POINT() {
  static const st_element_point instance;
  return instance.getValue();
}
// ELEMENT_POINT <---

// ---> ELEMENT_REFERENCE_POINT
typedef struct st_element_reference_point {
  std::string  value =  "reference_point"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_element_reference_point;
// -- getter -- 
static std::string  get_ELEMENT_REFERENCE_POINT() {
  static const st_element_reference_point instance;
  return instance.getValue();
}
// ELEMENT_REFERENCE_POINT <---

// ---> ELEMENT_RADIUS
typedef struct st_element_radius {
  std::string  value =  "radius"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_element_radius;
// -- getter -- 
static std::string  get_ELEMENT_RADIUS() {
  static const st_element_radius instance;
  return instance.getValue();
}
// ELEMENT_RADIUS <---

// ---> ELEMENT_RECTANGLE
typedef struct st_element_rectangle {
  std::string  value =  "rectangle"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_element_rectangle;
// -- getter -- 
static std::string  get_ELEMENT_RECTANGLE() {
  static const st_element_rectangle instance;
  return instance.getValue();
}
// ELEMENT_RECTANGLE <---

// ---> ATTRIB_DIMENSIONS
typedef struct st_attrib_dimensions {
  std::string  value =  "dimensions"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_dimensions;
// -- getter -- 
static std::string  get_ATTRIB_DIMENSIONS() {
  static const st_attrib_dimensions instance;
  return instance.getValue();
}
// ATTRIB_DIMENSIONS <---

// ---> DEFAULT_RECT_DIMENTIONS
typedef struct st_default_rect_dimentions {
  std::string  value =  "100|50"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_default_rect_dimentions;
// -- getter -- 
static std::string  get_DEFAULT_RECT_DIMENTIONS() {
  static const st_default_rect_dimentions instance;
  return instance.getValue();
}
// DEFAULT_RECT_DIMENTIONS <---

// ---> ATTRIB_FIRST_POINT_IS_CENTER_B
typedef struct st_attrib_first_point_is_center_b {
  std::string  value =  "first_point_is_center"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_first_point_is_center_b;
// -- getter -- 
static std::string  get_ATTRIB_FIRST_POINT_IS_CENTER_B() {
  static const st_attrib_first_point_is_center_b instance;
  return instance.getValue();
}
// ATTRIB_FIRST_POINT_IS_CENTER_B <---

// ---> ATTRIB_VECTOR_BT_LENGTH_MT
typedef struct st_attrib_vector_bt_length_mt {
  std::string  value =  "vector_bt_length_mt"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_vector_bt_length_mt;
// -- getter -- 
static std::string  get_ATTRIB_VECTOR_BT_LENGTH_MT() {
  static const st_attrib_vector_bt_length_mt instance;
  return instance.getValue();
}
// ATTRIB_VECTOR_BT_LENGTH_MT <---

// ---> ATTRIB_VECTOR_LR_LENGTH_MT
typedef struct st_attrib_vector_lr_length_mt {
  std::string  value =  "vector_lr_length_mt"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_vector_lr_length_mt;
// -- getter -- 
static std::string  get_ATTRIB_VECTOR_LR_LENGTH_MT() {
  static const st_attrib_vector_lr_length_mt instance;
  return instance.getValue();
}
// ATTRIB_VECTOR_LR_LENGTH_MT <---

// ---> ELEMENT_ELEVATION_VOLUME
typedef struct st_element_elevation_volume {
  std::string  value =  "elevation_volume"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_element_elevation_volume;
// -- getter -- 
static std::string  get_ELEMENT_ELEVATION_VOLUME() {
  static const st_element_elevation_volume instance;
  return instance.getValue();
}
// ELEMENT_ELEVATION_VOLUME <---

// ---> ATTRIB_ELEV_MIN_MAX_FT
typedef struct st_attrib_elev_min_max_ft {
  std::string  value =  "elev_min_max_ft"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_elev_min_max_ft;
// -- getter -- 
static std::string  get_ATTRIB_ELEV_MIN_MAX_FT() {
  static const st_attrib_elev_min_max_ft instance;
  return instance.getValue();
}
// ATTRIB_ELEV_MIN_MAX_FT <---

// ---> ATTRIB_ELEV_LOWER_UPPER_FT
typedef struct st_attrib_elev_lower_upper_ft {
  std::string  value =  "elev_lower_upper_ft"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_elev_lower_upper_ft;
// -- getter -- 
static std::string  get_ATTRIB_ELEV_LOWER_UPPER_FT() {
  static const st_attrib_elev_lower_upper_ft instance;
  return instance.getValue();
}
// ATTRIB_ELEV_LOWER_UPPER_FT <---

// ---> ATTRIB_LENGTH_MT
typedef struct st_attrib_length_mt {
  std::string  value =  "length_mt"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_length_mt;
// -- getter -- 
static std::string  get_ATTRIB_LENGTH_MT() {
  static const st_attrib_length_mt instance;
  return instance.getValue();
}
// ATTRIB_LENGTH_MT <---

// ---> ATTRIB_ENABLED
typedef struct st_attrib_enabled {
  std::string  value =  "enabled"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_enabled;
// -- getter -- 
static std::string  get_ATTRIB_ENABLED() {
  static const st_attrib_enabled instance;
  return instance.getValue();
}
// ATTRIB_ENABLED <---

// ---> TRIG_TYPE_RAD
typedef struct st_trig_type_rad {
  std::string  value =  "rad"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_trig_type_rad;
// -- getter -- 
static std::string  get_TRIG_TYPE_RAD() {
  static const st_trig_type_rad instance;
  return instance.getValue();
}
// TRIG_TYPE_RAD <---

// ---> TRIG_TYPE_POLY
typedef struct st_trig_type_poly {
  std::string  value =  "poly"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_trig_type_poly;
// -- getter -- 
static std::string  get_TRIG_TYPE_POLY() {
  static const st_trig_type_poly instance;
  return instance.getValue();
}
// TRIG_TYPE_POLY <---

// ---> TRIG_TYPE_SLOPE
typedef struct st_trig_type_slope {
  std::string  value =  "slope"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_trig_type_slope;
// -- getter -- 
static std::string  get_TRIG_TYPE_SLOPE() {
  static const st_trig_type_slope instance;
  return instance.getValue();
}
// TRIG_TYPE_SLOPE <---

// ---> TRIG_TYPE_SCRIPT
typedef struct st_trig_type_script {
  std::string  value =  "script"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_trig_type_script;
// -- getter -- 
static std::string  get_TRIG_TYPE_SCRIPT() {
  static const st_trig_type_script instance;
  return instance.getValue();
}
// TRIG_TYPE_SCRIPT <---

// ---> TRIG_TYPE_CAMERA
typedef struct st_trig_type_camera {
  std::string  value =  "camera"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_trig_type_camera;
// -- getter -- 
static std::string  get_TRIG_TYPE_CAMERA() {
  static const st_trig_type_camera instance;
  return instance.getValue();
}
// TRIG_TYPE_CAMERA <---


// ---> ATTRIB_ANGLE
typedef struct st_attrib_angle {
  std::string  value =  "angle"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_angle;
// -- getter -- 
static std::string  get_ATTRIB_ANGLE() {
  static const st_attrib_angle instance;
  return instance.getValue();
}
// ATTRIB_ANGLE <---

// ---> ELEMENT_CALC_SLOPE
typedef struct st_element_calc_slope {
  std::string  value =  "calc_slope"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_element_calc_slope;
// -- getter -- 
static std::string  get_ELEMENT_CALC_SLOPE() {
  static const st_element_calc_slope instance;
  return instance.getValue();
}
// ELEMENT_CALC_SLOPE <---

// ---> ATTRIB_BEARING_2D
typedef struct st_attrib_bearing_2d {
  std::string  value =  "bearing_2d"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_bearing_2d;
// -- getter -- 
static std::string  get_ATTRIB_BEARING_2D() {
  static const st_attrib_bearing_2d instance;
  return instance.getValue();
}
// ATTRIB_BEARING_2D <---

// ---> ATTRIB_LENGTH_WITH_UNITS
typedef struct st_attrib_length_with_units {
  std::string  value =  "length_with_units"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_length_with_units;
// -- getter -- 
static std::string  get_ATTRIB_LENGTH_WITH_UNITS() {
  static const st_attrib_length_with_units instance;
  return instance.getValue();
}
// ATTRIB_LENGTH_WITH_UNITS <---

// ---> ATTRIB_SLOPE_ANGLE_3D
typedef struct st_attrib_slope_angle_3d {
  std::string  value =  "slope_angle_3d"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_slope_angle_3d;
// -- getter -- 
static std::string  get_ATTRIB_SLOPE_ANGLE_3D() {
  static const st_attrib_slope_angle_3d instance;
  return instance.getValue();
}
// ATTRIB_SLOPE_ANGLE_3D <---

// ---> PROP_HAS_CALC_SLOPE
typedef struct st_prop_has_calc_slope {
  std::string  value =  "has_calc_slope"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_prop_has_calc_slope;
// -- getter -- 
static std::string  get_PROP_HAS_CALC_SLOPE() {
  static const st_prop_has_calc_slope instance;
  return instance.getValue();
}
// PROP_HAS_CALC_SLOPE <---

// ---> ELEMENT_CARGO_CATEGORIES
typedef struct st_element_cargo_categories {
  std::string  value =  "cargo_categories"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_element_cargo_categories;
// -- getter -- 
static std::string  get_ELEMENT_CARGO_CATEGORIES() {
  static const st_element_cargo_categories instance;
  return instance.getValue();
}
// ELEMENT_CARGO_CATEGORIES <---

// ---> ELEMENT_INVENTORIES
typedef struct st_element_inventories {
  std::string  value =  "inventories";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_element_inventories;
// -- getter -- 
static std::string  get_ELEMENT_INVENTORIES() {
  static const st_element_inventories instance;
  return instance.getValue();
}
// ELEMENT_INVENTORIES <---

// ---> ELEMENT_INVENTORY
typedef struct st_element_inventory {
  std::string  value =  "inventory";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_element_inventory;
// -- getter -- 
static std::string  get_ELEMENT_INVENTORY() {
  static const st_element_inventory instance;
  return instance.getValue();
}
// ELEMENT_INVENTORY <---

// ---> ELEMENT_PLANE
typedef struct st_element_plane {
  std::string  value =  "plane";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_element_plane;
// -- getter -- 
static std::string  get_ELEMENT_PLANE() {
  static const st_element_plane instance;
  return instance.getValue();
}
// ELEMENT_PLANE <---

// ---> ELEMENT_ITEM_BLUEPRINTS
typedef struct st_element_item_blueprints {
  std::string  value =  "item_blueprints";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_element_item_blueprints;
// -- getter -- 
static std::string  get_ELEMENT_ITEM_BLUEPRINTS() {
  static const st_element_item_blueprints instance;
  return instance.getValue();
}
// ELEMENT_ITEM_BLUEPRINTS <---

// ---> ELEMENT_ITEM
typedef struct st_element_item {
  std::string  value =  "item"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_element_item;
// -- getter -- 
static std::string  get_ELEMENT_ITEM() {
  static const st_element_item instance;
  return instance.getValue();
}
// ELEMENT_ITEM <---

// ---> ATTRIB_WEIGHT_KG
typedef struct st_attrib_weight_kg {
  std::string  value =  "weight_kg";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_weight_kg;
// -- getter -- 
static std::string  get_ATTRIB_WEIGHT_KG() {
  static const st_attrib_weight_kg instance;
  return instance.getValue();
}
// ATTRIB_WEIGHT_KG <---

// ---> ATTRIB_QUANTITY
typedef struct st_attrib_quantity {
  std::string  value =  "quantity";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_quantity;
// -- getter -- 
static std::string  get_ATTRIB_QUANTITY() {
  static const st_attrib_quantity instance;
  return instance.getValue();
}
// ATTRIB_QUANTITY <---

// ---> ATTRIB_BARCODE
typedef struct st_attrib_barcode {
  std::string  value =  "barcode";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_barcode;
// -- getter -- 
static std::string  get_ATTRIB_BARCODE() {
  static const st_attrib_barcode instance;
  return instance.getValue();
}
// ATTRIB_BARCODE <---





// ---> ELEMENT_MESSAGE_TEMPLATES
typedef struct st_element_message_templates {
  std::string  value =  "message_templates"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_element_message_templates;
// -- getter -- 
static std::string  get_ELEMENT_MESSAGE_TEMPLATES() {
  static const st_element_message_templates instance;
  return instance.getValue();
}
// ELEMENT_MESSAGE_TEMPLATES <---

// ---> ELEMENT_MESSAGES
typedef struct st_element_messages {
  std::string  value =  "messages";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_element_messages;
// -- getter -- 
static std::string  get_ELEMENT_MESSAGES() {
  static const st_element_messages instance;
  return instance.getValue();
}
// ELEMENT_MESSAGES <---

// ---> ELEMENT_MESSAGE
typedef struct st_element_message {
  std::string  value =  "message";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_element_message;
// -- getter -- 
static std::string  get_ELEMENT_MESSAGE() {
  static const st_element_message instance;
  return instance.getValue();
}
// ELEMENT_MESSAGE <---

// ---> ATTRIB_MESSAGE_NAME_WHEN_FIRED
typedef struct st_attrib_message_name_when_fired {
  std::string  value =  "message_name_when_fired"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_message_name_when_fired;
// -- getter -- 
static std::string  get_ATTRIB_MESSAGE_NAME_WHEN_FIRED() {
  static const st_attrib_message_name_when_fired instance;
  return instance.getValue();
}
// ATTRIB_MESSAGE_NAME_WHEN_FIRED <---

// ---> ATTRIB_MESSAGE_NAME_WHEN_LEFT
typedef struct st_attrib_message_name_when_left {
  std::string  value =  "message_name_when_left"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_message_name_when_left;
// -- getter -- 
static std::string  get_ATTRIB_MESSAGE_NAME_WHEN_LEFT() {
  static const st_attrib_message_name_when_left instance;
  return instance.getValue();
}
// ATTRIB_MESSAGE_NAME_WHEN_LEFT <---

// ---> ATTRIB_ORIGINATE_MESSAGE_NAME
typedef struct st_attrib_originate_message_name {
  std::string  value =  "originate_message_name"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_originate_message_name;
// -- getter -- 
static std::string  get_ATTRIB_ORIGINATE_MESSAGE_NAME() {
  static const st_attrib_originate_message_name instance;
  return instance.getValue();
}
// ATTRIB_ORIGINATE_MESSAGE_NAME <---

// ---> ATTRIB_MESSAGE_NAME_WHEN_ENTERING_PHYSICAL_AREA
typedef struct st_attrib_message_name_when_entering_physical_area {
  std::string  value =  "message_name_when_entering_physical_area"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_message_name_when_entering_physical_area;
// -- getter -- 
static std::string  get_ATTRIB_MESSAGE_NAME_WHEN_ENTERING_PHYSICAL_AREA() {
  static const st_attrib_message_name_when_entering_physical_area instance;
  return instance.getValue();
}
// ATTRIB_MESSAGE_NAME_WHEN_ENTERING_PHYSICAL_AREA <---

// ---> ELEMENT_OUTCOME
typedef struct st_element_outcome {
  std::string  value =  "outcome"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_element_outcome;
// -- getter -- 
static std::string  get_ELEMENT_OUTCOME() {
  static const st_element_outcome instance;
  return instance.getValue();
}
// ELEMENT_OUTCOME <---

// ---> ATTRIB_COMMANDS_TO_EXEC_WHEN_FIRED
typedef struct st_attrib_commands_to_exec_when_fired {
  std::string  value =  "commands_to_exec_when_fired"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_commands_to_exec_when_fired;
// -- getter -- 
static std::string  get_ATTRIB_COMMANDS_TO_EXEC_WHEN_FIRED() {
  static const st_attrib_commands_to_exec_when_fired instance;
  return instance.getValue();
}
// ATTRIB_COMMANDS_TO_EXEC_WHEN_FIRED <---

// ---> ATTRIB_COMMANDS_TO_EXEC_WHEN_LEFT
typedef struct st_attrib_commands_to_exec_when_left {
  std::string  value =  "commands_to_exec_when_left"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_commands_to_exec_when_left;
// -- getter -- 
static std::string  get_ATTRIB_COMMANDS_TO_EXEC_WHEN_LEFT() {
  static const st_attrib_commands_to_exec_when_left instance;
  return instance.getValue();
}
// ATTRIB_COMMANDS_TO_EXEC_WHEN_LEFT <---

// ---> ATTRIB_DATAREF_TO_EXEC_WHEN_FIRED
typedef struct st_attrib_dataref_to_exec_when_fired {
  std::string  value =  "dataref_to_modify_when_fired"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_dataref_to_exec_when_fired;
// -- getter -- 
static std::string  get_ATTRIB_DATAREF_TO_EXEC_WHEN_FIRED() {
  static const st_attrib_dataref_to_exec_when_fired instance;
  return instance.getValue();
}
// ATTRIB_DATAREF_TO_EXEC_WHEN_FIRED <---

// ---> ATTRIB_DATAREF_TO_EXEC_WHEN_LEFT
typedef struct st_attrib_dataref_to_exec_when_left {
  std::string  value =  "dataref_to_modify_when_left"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_dataref_to_exec_when_left;
// -- getter -- 
static std::string  get_ATTRIB_DATAREF_TO_EXEC_WHEN_LEFT() {
  static const st_attrib_dataref_to_exec_when_left instance;
  return instance.getValue();
}
// ATTRIB_DATAREF_TO_EXEC_WHEN_LEFT <---

// ---> ATTRIB_SET_OTHER_TASKS_AS_SUCCESS
typedef struct st_attrib_set_other_tasks_as_success {
  std::string  value =  "set_other_tasks_as_success"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_set_other_tasks_as_success;
// -- getter -- 
static std::string  get_ATTRIB_SET_OTHER_TASKS_AS_SUCCESS() {
  static const st_attrib_set_other_tasks_as_success instance;
  return instance.getValue();
}
// ATTRIB_SET_OTHER_TASKS_AS_SUCCESS <---

// ---> ATTRIB_RESET_OTHER_TASKS_STATE
typedef struct st_attrib_reset_other_tasks_state {
  std::string  value =  "reset_other_tasks_state"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_reset_other_tasks_state;
// -- getter -- 
static std::string  get_ATTRIB_RESET_OTHER_TASKS_STATE() {
  static const st_attrib_reset_other_tasks_state instance;
  return instance.getValue();
}
// ATTRIB_RESET_OTHER_TASKS_STATE <---

// ---> ATTRIB_SET_OTHER_TRIGGERS_AS_SUCCESS
typedef struct st_attrib_set_other_triggers_as_success {
  std::string  value =  "set_other_triggers_as_success"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_set_other_triggers_as_success;
// -- getter -- 
static std::string  get_ATTRIB_SET_OTHER_TRIGGERS_AS_SUCCESS() {
  static const st_attrib_set_other_triggers_as_success instance;
  return instance.getValue();
}
// ATTRIB_SET_OTHER_TRIGGERS_AS_SUCCESS <---

// ---> ELEMENT_MIX
typedef struct st_element_mix {
  std::string  value =  "mix"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_element_mix;
// -- getter -- 
static std::string  get_ELEMENT_MIX() {
  static const st_element_mix instance;
  return instance.getValue();
}
// ELEMENT_MIX <---

// ---> ATTRIB_MESSAGE
typedef struct st_attrib_message {
  std::string  value =  get_ELEMENT_MESSAGE();
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_message;
// -- getter -- 
static std::string  get_ATTRIB_MESSAGE() {
  static const st_attrib_message instance;
  return instance.getValue();
}
// ATTRIB_MESSAGE <---

// ---> ATTRIB_MESSAGE_TYPE
typedef struct st_attrib_message_type {
  std::string  value =  "message_type"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_message_type;
// -- getter -- 
static std::string  get_ATTRIB_MESSAGE_TYPE() {
  static const st_attrib_message_type instance;
  return instance.getValue();
}
// ATTRIB_MESSAGE_TYPE <---

// ---> PROP_IS_MXPAD_MESSAGE
typedef struct st_prop_is_mxpad_message {
  std::string  value =  "is_mxpad"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_prop_is_mxpad_message;
// -- getter -- 
static std::string  get_PROP_IS_MXPAD_MESSAGE() {
  static const st_prop_is_mxpad_message instance;
  return instance.getValue();
}
// PROP_IS_MXPAD_MESSAGE <---

// ---> PROP_MESSAGE_HAS_TEXT_TRACK
typedef struct st_prop_message_has_text_track {
  std::string  value =  "has_text_track"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_prop_message_has_text_track;
// -- getter -- 
static std::string  get_PROP_MESSAGE_HAS_TEXT_TRACK() {
  static const st_prop_message_has_text_track instance;
  return instance.getValue();
}
// PROP_MESSAGE_HAS_TEXT_TRACK <---

// ---> ATTRIB_MESSAGE_MIX_TRACK_TYPE
typedef struct st_attrib_message_mix_track_type {
  std::string  value =  "track_type"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_message_mix_track_type;
// -- getter -- 
static std::string  get_ATTRIB_MESSAGE_MIX_TRACK_TYPE() {
  static const st_attrib_message_mix_track_type instance;
  return instance.getValue();
}
// ATTRIB_MESSAGE_MIX_TRACK_TYPE <---

// ---> ATTRIB_PARENT_MESSAGE
typedef struct st_attrib_parent_message {
  std::string  value =  "parent_message"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_parent_message;
// -- getter -- 
static std::string  get_ATTRIB_PARENT_MESSAGE() {
  static const st_attrib_parent_message instance;
  return instance.getValue();
}
// ATTRIB_PARENT_MESSAGE <---

// ---> ATTRIB_MESSAGE_OVERRIDE_SECONDS_TO_PLAY
typedef struct st_attrib_message_override_seconds_to_play {
  std::string  value =  "override_seconds_to_play"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_message_override_seconds_to_play;
// -- getter -- 
static std::string  get_ATTRIB_MESSAGE_OVERRIDE_SECONDS_TO_PLAY() {
  static const st_attrib_message_override_seconds_to_play instance;
  return instance.getValue();
}
// ATTRIB_MESSAGE_OVERRIDE_SECONDS_TO_PLAY <---

// ---> ATTRIB_MESSAGE_OVERRIDE_SECONDS_TO_DISPLAY_TEXT
typedef struct st_attrib_message_override_seconds_to_display_text {
  std::string  value =  "override_seconds_to_display_text"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_message_override_seconds_to_display_text;
// -- getter -- 
static std::string  get_ATTRIB_MESSAGE_OVERRIDE_SECONDS_TO_DISPLAY_TEXT() {
  static const st_attrib_message_override_seconds_to_display_text instance;
  return instance.getValue();
}
// ATTRIB_MESSAGE_OVERRIDE_SECONDS_TO_DISPLAY_TEXT <---

// ---> ATTRIB_MESSAGE_OVERRIDE_SECONDS_CALC_PER_LINE
typedef struct st_attrib_message_override_seconds_calc_per_line {
  std::string  value =  "override_seconds_calc_per_line"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_message_override_seconds_calc_per_line;
// -- getter -- 
static std::string  get_ATTRIB_MESSAGE_OVERRIDE_SECONDS_CALC_PER_LINE() {
  static const st_attrib_message_override_seconds_calc_per_line instance;
  return instance.getValue();
}
// ATTRIB_MESSAGE_OVERRIDE_SECONDS_CALC_PER_LINE <---

// ---> ATTRIB_MESSAGE_MUTE_XPLANE_NARRATOR
typedef struct st_attrib_message_mute_xplane_narrator {
  std::string  value =  "mute_xplane_narrator"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_message_mute_xplane_narrator;
// -- getter -- 
static std::string  get_ATTRIB_MESSAGE_MUTE_XPLANE_NARRATOR() {
  static const st_attrib_message_mute_xplane_narrator instance;
  return instance.getValue();
}
// ATTRIB_MESSAGE_MUTE_XPLANE_NARRATOR <---

// ---> ATTRIB_MESSAGE_HIDE_TEXT
typedef struct st_attrib_message_hide_text {
  std::string  value =  "hide_text"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_message_hide_text;
// -- getter -- 
static std::string  get_ATTRIB_MESSAGE_HIDE_TEXT() {
  static const st_attrib_message_hide_text instance;
  return instance.getValue();
}
// ATTRIB_MESSAGE_HIDE_TEXT <---

// ---> ATTRIB_SOUND_FILE
typedef struct st_attrib_sound_file {
  std::string  value =  "sound_file"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_sound_file;
// -- getter -- 
static std::string  get_ATTRIB_SOUND_FILE() {
  static const st_attrib_sound_file instance;
  return instance.getValue();
}
// ATTRIB_SOUND_FILE <---

// ---> ATTRIB_SOUND_VOL
typedef struct st_attrib_sound_vol {
  std::string  value =  "sound_vol"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_sound_vol;
// -- getter -- 
static std::string  get_ATTRIB_SOUND_VOL() {
  static const st_attrib_sound_vol instance;
  return instance.getValue();
}
// ATTRIB_SOUND_VOL <---

// ---> ATTRIB_ORIGINAL_SOUND_VOL
typedef struct st_attrib_original_sound_vol {
  std::string  value =  "original_sound_vol"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_original_sound_vol;
// -- getter -- 
static std::string  get_ATTRIB_ORIGINAL_SOUND_VOL() {
  static const st_attrib_original_sound_vol instance;
  return instance.getValue();
}
// ATTRIB_ORIGINAL_SOUND_VOL <---

// ---> ATTRIB_TRACK_INSTRUCTIONS
typedef struct st_attrib_track_instructions {
  std::string  value =  "track_instructions"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_track_instructions;
// -- getter -- 
static std::string  get_ATTRIB_TRACK_INSTRUCTIONS() {
  static const st_attrib_track_instructions instance;
  return instance.getValue();
}
// ATTRIB_TRACK_INSTRUCTIONS <---

// ---> ATTRIB_TIMER_TYPE
typedef struct st_attrib_timer_type {
  std::string  value =  "timer_type"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_timer_type;
// -- getter -- 
static std::string  get_ATTRIB_TIMER_TYPE() {
  static const st_attrib_timer_type instance;
  return instance.getValue();
}
// ATTRIB_TIMER_TYPE <---

// ---> PROP_TIMER_TYPE_XP
typedef struct st_prop_timer_type_xp {
  std::string  value =  "xp"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_prop_timer_type_xp;
// -- getter -- 
static std::string  get_PROP_TIMER_TYPE_XP() {
  static const st_prop_timer_type_xp instance;
  return instance.getValue();
}
// PROP_TIMER_TYPE_XP <---

// ---> PROP_TIMER_TYPE_OS
typedef struct st_prop_timer_type_os {
  std::string  value =  "os"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_prop_timer_type_os;
// -- getter -- 
static std::string  get_PROP_TIMER_TYPE_OS() {
  static const st_prop_timer_type_os instance;
  return instance.getValue();
}
// PROP_TIMER_TYPE_OS <---


// ---> ATTRIB_CHARACTERS
typedef struct st_attrib_characters {
  std::string  value =  "characters"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_characters;
// -- getter -- 
static std::string  get_ATTRIB_CHARACTERS() {
  static const st_attrib_characters instance;
  return instance.getValue();
}
// ATTRIB_CHARACTERS <---

// ---> PROP_IMAGE_FILE_NAME
typedef struct st_prop_image_file_name {
  std::string  value =  "image_file_name"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_prop_image_file_name;
// -- getter -- 
static std::string  get_PROP_IMAGE_FILE_NAME() {
  static const st_prop_image_file_name instance;
  return instance.getValue();
}
// PROP_IMAGE_FILE_NAME <---

// ---> PROP_TEXT_RGB_COLOR
typedef struct st_prop_text_rgb_color {
  std::string  value =  "text_rgb_color"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_prop_text_rgb_color;
// -- getter -- 
static std::string  get_PROP_TEXT_RGB_COLOR() {
  static const st_prop_text_rgb_color instance;
  return instance.getValue();
}
// PROP_TEXT_RGB_COLOR <---

// ---> ATTRIB_LABEL_PLACEMENT
typedef struct st_attrib_label_placement {
  std::string  value =  "label_placement"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_label_placement;
// -- getter -- 
static std::string  get_ATTRIB_LABEL_PLACEMENT() {
  static const st_attrib_label_placement instance;
  return instance.getValue();
}
// ATTRIB_LABEL_PLACEMENT <---

// ---> ATTRIB_LABEL
typedef struct st_attrib_label {
  std::string  value =  "label"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_label;
// -- getter -- 
static std::string  get_ATTRIB_LABEL() {
  static const st_attrib_label instance;
  return instance.getValue();
}
// ATTRIB_LABEL <---

// ---> ATTRIB_LABEL_COLOR
typedef struct st_attrib_label_color {
  std::string  value =  "label_color"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_label_color;
// -- getter -- 
static std::string  get_ATTRIB_LABEL_COLOR() {
  static const st_attrib_label_color instance;
  return instance.getValue();
}
// ATTRIB_LABEL_COLOR <---

// ---> ELEMENT_MXPAD_ACTIVE_MESSAGES
typedef struct st_element_mxpad_active_messages {
  std::string  value =  "mxpad_active_messages"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_element_mxpad_active_messages;
// -- getter -- 
static std::string  get_ELEMENT_MXPAD_ACTIVE_MESSAGES() {
  static const st_element_mxpad_active_messages instance;
  return instance.getValue();
}
// ELEMENT_MXPAD_ACTIVE_MESSAGES <---

// ---> ELEMENT_MXPAD_ACTION_REQUEST
typedef struct st_element_mxpad_action_request {
  std::string  value =  "mxpad_action_request"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_element_mxpad_action_request;
// -- getter -- 
static std::string  get_ELEMENT_MXPAD_ACTION_REQUEST() {
  static const st_element_mxpad_action_request instance;
  return instance.getValue();
}
// ELEMENT_MXPAD_ACTION_REQUEST <---

// ---> ELEMENT_MXPAD_DATA
typedef struct st_element_mxpad_data {
  std::string  value =  "mxpad_data"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_element_mxpad_data;
// -- getter -- 
static std::string  get_ELEMENT_MXPAD_DATA() {
  static const st_element_mxpad_data instance;
  return instance.getValue();
}
// ELEMENT_MXPAD_DATA <---

// ---> PROP_CURRENT_MX_PAD_RUNNING
typedef struct st_prop_current_mx_pad_running {
  std::string  value =  "current_mxpad_running"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_prop_current_mx_pad_running;
// -- getter -- 
static std::string  get_PROP_CURRENT_MX_PAD_RUNNING() {
  static const st_prop_current_mx_pad_running instance;
  return instance.getValue();
}
// PROP_CURRENT_MX_PAD_RUNNING <---

// ---> PROP_NEXT_MSG
typedef struct st_prop_next_msg {
  std::string  value =  "next_msg"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_prop_next_msg;
// -- getter -- 
static std::string  get_PROP_NEXT_MSG() {
  static const st_prop_next_msg instance;
  return instance.getValue();
}
// PROP_NEXT_MSG <---

// ---> ATTRIB_MODE
typedef struct st_attrib_mode {
  std::string  value =  "mode"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_mode;
// -- getter -- 
static std::string  get_ATTRIB_MODE() {
  static const st_attrib_mode instance;
  return instance.getValue();
}
// ATTRIB_MODE <---

// ---> ATTRIB_FADE_BG_CHANNEL
typedef struct st_attrib_fade_bg_channel {
  std::string  value =  "fade_bg_channel"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_fade_bg_channel;
// -- getter -- 
static std::string  get_ATTRIB_FADE_BG_CHANNEL() {
  static const st_attrib_fade_bg_channel instance;
  return instance.getValue();
}
// ATTRIB_FADE_BG_CHANNEL <---

// ---> ATTRIB_ADD_MINUTES
typedef struct st_attrib_add_minutes {
  std::string  value =  "add_minutes"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_add_minutes;
// -- getter -- 
static std::string  get_ATTRIB_ADD_MINUTES() {
  static const st_attrib_add_minutes instance;
  return instance.getValue();
}
// ATTRIB_ADD_MINUTES <---

// ---> ATTRIB_TIMELAPSE_TO_LOCAL_HOURS
typedef struct st_attrib_timelapse_to_local_hours {
  std::string  value =  "timelapse_to_local_hours"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_timelapse_to_local_hours;
// -- getter -- 
static std::string  get_ATTRIB_TIMELAPSE_TO_LOCAL_HOURS() {
  static const st_attrib_timelapse_to_local_hours instance;
  return instance.getValue();
}
// ATTRIB_TIMELAPSE_TO_LOCAL_HOURS <---

// ---> ATTRIB_SET_DAY_HOURS
typedef struct st_attrib_set_day_hours {
  std::string  value =  "set_day_hours"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_set_day_hours;
// -- getter -- 
static std::string  get_ATTRIB_SET_DAY_HOURS() {
  static const st_attrib_set_day_hours instance;
  return instance.getValue();
}
// ATTRIB_SET_DAY_HOURS <---

// ---> MESSAGE_MODE_STORY
typedef struct st_message_mode_story {
  std::string  value =  "story"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_message_mode_story;
// -- getter -- 
static std::string  get_MESSAGE_MODE_STORY() {
  static const st_message_mode_story instance;
  return instance.getValue();
}
// MESSAGE_MODE_STORY <---

// ---> CHANNEL_TYPE_TEXT
typedef struct st_channel_type_text {
  std::string  value =  "text"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_channel_type_text;
// -- getter -- 
static std::string  get_CHANNEL_TYPE_TEXT() {
  static const st_channel_type_text instance;
  return instance.getValue();
}
// CHANNEL_TYPE_TEXT <---

// ---> CHANNEL_TYPE_COMM
typedef struct st_channel_type_comm {
  std::string  value =  "comm"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_channel_type_comm;
// -- getter -- 
static std::string  get_CHANNEL_TYPE_COMM() {
  static const st_channel_type_comm instance;
  return instance.getValue();
}
// CHANNEL_TYPE_COMM <---

// ---> CHANNEL_TYPE_BACKGROUND
typedef struct st_channel_type_background {
  std::string  value =  "back"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_channel_type_background;
// -- getter -- 
static std::string  get_CHANNEL_TYPE_BACKGROUND() {
  static const st_channel_type_background instance;
  return instance.getValue();
}
// CHANNEL_TYPE_BACKGROUND <---

// ---> ELEMENT_END_MISSION
typedef struct st_element_end_mission {
  std::string  value =  "end_mission"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_element_end_mission;
// -- getter -- 
static std::string  get_ELEMENT_END_MISSION() {
  static const st_element_end_mission instance;
  return instance.getValue();
}
// ELEMENT_END_MISSION <---

// ---> ELEMENT_END_MISSION_SUCCESS
typedef struct st_element_end_mission_success {
  std::string  value =  "end_mission_success";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_element_end_mission_success;
// -- getter -- 
static std::string  get_ELEMENT_END_MISSION_SUCCESS() {
  static const st_element_end_mission_success instance;
  return instance.getValue();
}
// ELEMENT_END_MISSION_SUCCESS <---

// ---> ELEMENT_END_MISSION_FAIL
typedef struct st_element_end_mission_fail {
  std::string  value =  "end_mission_fail";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_element_end_mission_fail;
// -- getter -- 
static std::string  get_ELEMENT_END_MISSION_FAIL() {
  static const st_element_end_mission_fail instance;
  return instance.getValue();
}
// ELEMENT_END_MISSION_FAIL <---

// ---> ELEMENT_END_SUCCESS_IMAGE
typedef struct st_element_end_success_image {
  std::string  value =  "success_image";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_element_end_success_image;
// -- getter -- 
static std::string  get_ELEMENT_END_SUCCESS_IMAGE() {
  static const st_element_end_success_image instance;
  return instance.getValue();
}
// ELEMENT_END_SUCCESS_IMAGE <---

// ---> ELEMENT_END_SUCCESS_MSG
typedef struct st_element_end_success_msg {
  std::string  value =  "success_msg";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_element_end_success_msg;
// -- getter -- 
static std::string  get_ELEMENT_END_SUCCESS_MSG() {
  static const st_element_end_success_msg instance;
  return instance.getValue();
}
// ELEMENT_END_SUCCESS_MSG <---

// ---> ELEMENT_END_SUCCESS_SOUND
typedef struct st_element_end_success_sound {
  std::string  value =  "success_sound";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_element_end_success_sound;
// -- getter -- 
static std::string  get_ELEMENT_END_SUCCESS_SOUND() {
  static const st_element_end_success_sound instance;
  return instance.getValue();
}
// ELEMENT_END_SUCCESS_SOUND <---

// ---> ELEMENT_END_FAIL_IMAGE
typedef struct st_element_end_fail_image {
  std::string  value =  "fail_image";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_element_end_fail_image;
// -- getter -- 
static std::string  get_ELEMENT_END_FAIL_IMAGE() {
  static const st_element_end_fail_image instance;
  return instance.getValue();
}
// ELEMENT_END_FAIL_IMAGE <---

// ---> ELEMENT_END_FAIL_MSG
typedef struct st_element_end_fail_msg {
  std::string  value =  "fail_msg";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_element_end_fail_msg;
// -- getter -- 
static std::string  get_ELEMENT_END_FAIL_MSG() {
  static const st_element_end_fail_msg instance;
  return instance.getValue();
}
// ELEMENT_END_FAIL_MSG <---

// ---> ELEMENT_END_FAIL_SOUND
typedef struct st_element_end_fail_sound {
  std::string  value =  "fail_sound";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_element_end_fail_sound;
// -- getter -- 
static std::string  get_ELEMENT_END_FAIL_SOUND() {
  static const st_element_end_fail_sound instance;
  return instance.getValue();
}
// ELEMENT_END_FAIL_SOUND <---

// ---> ATTRIB_OPEN_CHOICE
typedef struct st_attrib_open_choice {
  std::string  value =  "open_choice"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_open_choice;
// -- getter -- 
static std::string  get_ATTRIB_OPEN_CHOICE() {
  static const st_attrib_open_choice instance;
  return instance.getValue();
}
// ATTRIB_OPEN_CHOICE <---

// ---> ATTRIB_FILE_NAME
typedef struct st_attrib_file_name {
  std::string  value =  "file_name"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_file_name;
// -- getter -- 
static std::string  get_ATTRIB_FILE_NAME() {
  static const st_attrib_file_name instance;
  return instance.getValue();
}
// ATTRIB_FILE_NAME <---

// ---> ATTRIB_FILE_PATH
typedef struct st_attrib_file_path {
  std::string  value =  "file_path";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_file_path;
// -- getter -- 
static std::string  get_ATTRIB_FILE_PATH() {
  static const st_attrib_file_path instance;
  return instance.getValue();
}
// ATTRIB_FILE_PATH <---

// ---> ATTRIB_FULL_FILE_PATH
typedef struct st_attrib_full_file_path {
  std::string  value =  "full_file_path"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_full_file_path;
// -- getter -- 
static std::string  get_ATTRIB_FULL_FILE_PATH() {
  static const st_attrib_full_file_path instance;
  return instance.getValue();
}
// ATTRIB_FULL_FILE_PATH <---

// ---> ATTRIB_REAL_W
typedef struct st_attrib_real_w {
  std::string  value =  "realW"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_real_w;
// -- getter -- 
static std::string  get_ATTRIB_REAL_W() {
  static const st_attrib_real_w instance;
  return instance.getValue();
}
// ATTRIB_REAL_W <---

// ---> ATTRIB_REAL_H
typedef struct st_attrib_real_h {
  std::string  value =  "realH"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_real_h;
// -- getter -- 
static std::string  get_ATTRIB_REAL_H() {
  static const st_attrib_real_h instance;
  return instance.getValue();
}
// ATTRIB_REAL_H <---

// ---> ELEMENT_MXPAD
typedef struct st_element_mxpad {
  std::string  value =  "mxpad"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_element_mxpad;
// -- getter -- 
static std::string  get_ELEMENT_MXPAD() {
  static const st_element_mxpad instance;
  return instance.getValue();
}
// ELEMENT_MXPAD <---

// ---> ATTRIB_MANAGE_SCRIPT
typedef struct st_attrib_manage_script {
  std::string  value =  "manage_script"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_manage_script;
// -- getter -- 
static std::string  get_ATTRIB_MANAGE_SCRIPT() {
  static const st_attrib_manage_script instance;
  return instance.getValue();
}
// ATTRIB_MANAGE_SCRIPT <---


// ---> ATTRIB_STARTING_FUNCTION
typedef struct st_attrib_starting_function {
  std::string  value =  "starting_function"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_starting_function;
// -- getter -- 
static std::string  get_ATTRIB_STARTING_FUNCTION() {
  static const st_attrib_starting_function instance;
  return instance.getValue();
}
// ATTRIB_STARTING_FUNCTION <---

// ---> PROP_NEXT_RUNNING_FUNCTION
typedef struct st_prop_next_running_function {
  std::string  value =  "next_running_function"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_prop_next_running_function;
// -- getter -- 
static std::string  get_PROP_NEXT_RUNNING_FUNCTION() {
  static const st_prop_next_running_function instance;
  return instance.getValue();
}
// PROP_NEXT_RUNNING_FUNCTION <---

// ---> PROP_CURRENT_RUNNING_FUNCTION
typedef struct st_prop_current_running_function {
  std::string  value =  "current_running_function"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_prop_current_running_function;
// -- getter -- 
static std::string  get_PROP_CURRENT_RUNNING_FUNCTION() {
  static const st_prop_current_running_function instance;
  return instance.getValue();
}
// PROP_CURRENT_RUNNING_FUNCTION <---

// ---> PROP_PREV_RUNNING_FUNCTION
typedef struct st_prop_prev_running_function {
  std::string  value =  "prev_running_function"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_prop_prev_running_function;
// -- getter -- 
static std::string  get_PROP_PREV_RUNNING_FUNCTION() {
  static const st_prop_prev_running_function instance;
  return instance.getValue();
}
// PROP_PREV_RUNNING_FUNCTION <---

// ---> PROP_IS_LINKED
typedef struct st_prop_is_linked {
  std::string  value =  "is_linked"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_prop_is_linked;
// -- getter -- 
static std::string  get_PROP_IS_LINKED() {
  static const st_prop_is_linked instance;
  return instance.getValue();
}
// PROP_IS_LINKED <---

// ---> PROP_LINKED_TO
typedef struct st_prop_linked_to {
  std::string  value =  "linked_to"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_prop_linked_to;
// -- getter -- 
static std::string  get_PROP_LINKED_TO() {
  static const st_prop_linked_to instance;
  return instance.getValue();
}
// PROP_LINKED_TO <---

// ---> PROP_All_COND_MET_B
typedef struct st_prop_all_cond_met_b {
  std::string  value =  "all_conditions_met_b"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_prop_all_cond_met_b;
// -- getter -- 
static std::string  get_PROP_All_COND_MET_B() {
  static const st_prop_all_cond_met_b instance;
  return instance.getValue();
}
// PROP_All_COND_MET_B <---

// ---> PROP_PLANE_IN_PHYSICAL_AREA
typedef struct st_prop_plane_in_physical_area {
  std::string  value =  "plane_in_physical_area_b"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_prop_plane_in_physical_area;
// -- getter -- 
static std::string  get_PROP_PLANE_IN_PHYSICAL_AREA() {
  static const st_prop_plane_in_physical_area instance;
  return instance.getValue();
}
// PROP_PLANE_IN_PHYSICAL_AREA <---

// ---> PROP_PLANE_IN_ELEV_VOLUME
typedef struct st_prop_plane_in_elev_volume {
  std::string  value =  "plane_in_elev_volume_b"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_prop_plane_in_elev_volume;
// -- getter -- 
static std::string  get_PROP_PLANE_IN_ELEV_VOLUME() {
  static const st_prop_plane_in_elev_volume instance;
  return instance.getValue();
}
// PROP_PLANE_IN_ELEV_VOLUME <---

// ---> PROP_PLANE_ON_GROUND
typedef struct st_prop_plane_on_ground {
  std::string  value =  "plane_on_ground_b"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_prop_plane_on_ground;
// -- getter -- 
static std::string  get_PROP_PLANE_ON_GROUND() {
  static const st_prop_plane_on_ground instance;
  return instance.getValue();
}
// PROP_PLANE_ON_GROUND <---

// ---> PROP_SCRIPT_COND_MET_B
typedef struct st_prop_script_cond_met_b {
  std::string  value =  "script_conditions_met_b"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_prop_script_cond_met_b;
// -- getter -- 
static std::string  get_PROP_SCRIPT_COND_MET_B() {
  static const st_prop_script_cond_met_b instance;
  return instance.getValue();
}
// PROP_SCRIPT_COND_MET_B <---

// ---> PROP_STATE_ENUM
typedef struct st_prop_state_enum {
  std::string  value =  "enum_state"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_prop_state_enum;
// -- getter -- 
static std::string  get_PROP_STATE_ENUM() {
  static const st_prop_state_enum instance;
  return instance.getValue();
}
// PROP_STATE_ENUM <---

// ---> PROP_TRIG_ELEV_TYPE
typedef struct st_prop_trig_elev_type {
  std::string  value =  "trig_elev_type"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_prop_trig_elev_type;
// -- getter -- 
static std::string  get_PROP_TRIG_ELEV_TYPE() {
  static const st_prop_trig_elev_type instance;
  return instance.getValue();
}
// PROP_TRIG_ELEV_TYPE <---

// ---> PROP_IS_VALID
typedef struct st_prop_is_valid {
  std::string  value =  "is_valid"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_prop_is_valid;
// -- getter -- 
static std::string  get_PROP_IS_VALID() {
  static const st_prop_is_valid instance;
  return instance.getValue();
}
// PROP_IS_VALID <---

// ---> PROP_HAS_MANDATORY
typedef struct st_prop_has_mandatory {
  std::string  value =  "has_mandatory"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_prop_has_mandatory;
// -- getter -- 
static std::string  get_PROP_HAS_MANDATORY() {
  static const st_prop_has_mandatory instance;
  return instance.getValue();
}
// PROP_HAS_MANDATORY <---

// ---> PROP_IS_COMPLETE
typedef struct st_prop_is_complete {
  std::string  value =  "is_complete"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_prop_is_complete;
// -- getter -- 
static std::string  get_PROP_IS_COMPLETE() {
  static const st_prop_is_complete instance;
  return instance.getValue();
}
// PROP_IS_COMPLETE <---

// ---> PROP_IS_FIRST_TIME
typedef struct st_prop_is_first_time {
  std::string  value =  "is_first_time"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_prop_is_first_time;
// -- getter -- 
static std::string  get_PROP_IS_FIRST_TIME() {
  static const st_prop_is_first_time instance;
  return instance.getValue();
}
// PROP_IS_FIRST_TIME <---

// ---> PROP_COMPLETE_DESC
typedef struct st_prop_complete_desc {
  std::string  value =  "complete_desc"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_prop_complete_desc;
// -- getter -- 
static std::string  get_PROP_COMPLETE_DESC() {
  static const st_prop_complete_desc instance;
  return instance.getValue();
}
// PROP_COMPLETE_DESC <---

// ---> PROP_ERROR_REASON
typedef struct st_prop_error_reason {
  std::string  value =  "error_reason"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_prop_error_reason;
// -- getter -- 
static std::string  get_PROP_ERROR_REASON() {
  static const st_prop_error_reason instance;
  return instance.getValue();
}
// PROP_ERROR_REASON <---

// ---> PROP_COUNTER
typedef struct st_prop_counter {
  std::string  value =  "counter"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_prop_counter;
// -- getter -- 
static std::string  get_PROP_COUNTER() {
  static const st_prop_counter instance;
  return instance.getValue();
}
// PROP_COUNTER <---

// ---> PROP_MESSAGE_BROADCAST_FOR
typedef struct st_prop_message_broadcast_for {
  std::string  value =  "broadcast_for"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_prop_message_broadcast_for;
// -- getter -- 
static std::string  get_PROP_MESSAGE_BROADCAST_FOR() {
  static const st_prop_message_broadcast_for instance;
  return instance.getValue();
}
// PROP_MESSAGE_BROADCAST_FOR <---

// ---> PROP_MESSAGE_TRACK_NAME
typedef struct st_prop_message_track_name {
  std::string  value =  "track_name"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_prop_message_track_name;
// -- getter -- 
static std::string  get_PROP_MESSAGE_TRACK_NAME() {
  static const st_prop_message_track_name instance;
  return instance.getValue();
}
// PROP_MESSAGE_TRACK_NAME <---

// ---> PROP_POINTS
typedef struct st_prop_points {
  std::string  value =  "points"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_prop_points;
// -- getter -- 
static std::string  get_PROP_POINTS() {
  static const st_prop_points instance;
  return instance.getValue();
}
// PROP_POINTS <---

// ---> PROP_HAS_ALWAYS_TASK
typedef struct st_prop_has_always_task {
  std::string  value =  "has_always_task"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_prop_has_always_task;
// -- getter -- 
static std::string  get_PROP_HAS_ALWAYS_TASK() {
  static const st_prop_has_always_task instance;
  return instance.getValue();
}
// PROP_HAS_ALWAYS_TASK <---

// ---> PROP_MISSION_FILE_LOCATION
typedef struct st_prop_mission_file_location {
  std::string  value =  "mission_file_location"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_prop_mission_file_location;
// -- getter -- 
static std::string  get_PROP_MISSION_FILE_LOCATION() {
  static const st_prop_mission_file_location instance;
  return instance.getValue();
}
// PROP_MISSION_FILE_LOCATION <---

// ---> ATTRIB_DREF_KEY
typedef struct st_attrib_dref_key {
  std::string  value =  "key"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_attrib_dref_key;
// -- getter -- 
static std::string  get_ATTRIB_DREF_KEY() {
  static const st_attrib_dref_key instance;
  return instance.getValue();
}
// ATTRIB_DREF_KEY <---

// ---> PROP_MISSION_CURRENT_LEG
typedef struct st_prop_mission_current_leg {
  std::string  value =  "mission_current_leg"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_prop_mission_current_leg;
// -- getter -- 
static std::string  get_PROP_MISSION_CURRENT_LEG() {
  static const st_prop_mission_current_leg instance;
  return instance.getValue();
}
// PROP_MISSION_CURRENT_LEG <---

// ---> PROP_MISSION_STATE
typedef struct st_prop_mission_state {
  std::string  value =  "mission_state"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_prop_mission_state;
// -- getter -- 
static std::string  get_PROP_MISSION_STATE() {
  static const st_prop_mission_state instance;
  return instance.getValue();
}
// PROP_MISSION_STATE <---

// ---> PROP_MISSION_ABORT_REASON
typedef struct st_prop_mission_abort_reason {
  std::string  value =  "mission_abort_reason"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_prop_mission_abort_reason;
// -- getter -- 
static std::string  get_PROP_MISSION_ABORT_REASON() {
  static const st_prop_mission_abort_reason instance;
  return instance.getValue();
}
// PROP_MISSION_ABORT_REASON <---

// ---> SAVEPOINT_PLANE_LATITUDE
typedef struct st_savepoint_plane_latitude {
  std::string  value =  "savepoint_latitude"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_savepoint_plane_latitude;
// -- getter -- 
static std::string  get_SAVEPOINT_PLANE_LATITUDE() {
  static const st_savepoint_plane_latitude instance;
  return instance.getValue();
}
// SAVEPOINT_PLANE_LATITUDE <---

// ---> SAVEPOINT_PLANE_LONGITUDE
typedef struct st_savepoint_plane_longitude {
  std::string  value =  "savepoint_longitude"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_savepoint_plane_longitude;
// -- getter -- 
static std::string  get_SAVEPOINT_PLANE_LONGITUDE() {
  static const st_savepoint_plane_longitude instance;
  return instance.getValue();
}
// SAVEPOINT_PLANE_LONGITUDE <---

// ---> SAVEPOINT_PLANE_ELEVATION
typedef struct st_savepoint_plane_elevation {
  std::string  value =  "savepoint_elevation"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_savepoint_plane_elevation;
// -- getter -- 
static std::string  get_SAVEPOINT_PLANE_ELEVATION() {
  static const st_savepoint_plane_elevation instance;
  return instance.getValue();
}
// SAVEPOINT_PLANE_ELEVATION <---

// ---> SAVEPOINT_PLANE_SPEED
typedef struct st_savepoint_plane_speed {
  std::string  value =  "savepoint_speed"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_savepoint_plane_speed;
// -- getter -- 
static std::string  get_SAVEPOINT_PLANE_SPEED() {
  static const st_savepoint_plane_speed instance;
  return instance.getValue();
}
// SAVEPOINT_PLANE_SPEED <---

// ---> SAVEPOINT_PLANE_HEADING
typedef struct st_savepoint_plane_heading {
  std::string  value =  "savepoint_heading"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_savepoint_plane_heading;
// -- getter -- 
static std::string  get_SAVEPOINT_PLANE_HEADING() {
  static const st_savepoint_plane_heading instance;
  return instance.getValue();
}
// SAVEPOINT_PLANE_HEADING <---


// ---> MX_
typedef struct st_mx_ {
  std::string  value =  "mx_"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_mx_;
// -- getter -- 
static std::string  get_MX_() {
  static const st_mx_ instance;
  return instance.getValue();
}
// MX_ <---

// ---> EXT_MX_FUNC_CALL
typedef struct st_ext_mx_func_call {
  std::string  value =  "mxFuncCall";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_ext_mx_func_call;
// -- getter -- 
static std::string  get_EXT_MX_FUNC_CALL() {
  static const st_ext_mx_func_call instance;
  return instance.getValue();
}
// EXT_MX_FUNC_CALL <---

// ---> EXT_MX_CURRENT_LEG
typedef struct st_ext_mx_current_leg {
  std::string  value =  "mxCurrentLeg"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_ext_mx_current_leg;
// -- getter -- 
static std::string  get_EXT_MX_CURRENT_LEG() {
  static const st_ext_mx_current_leg instance;
  return instance.getValue();
}
// EXT_MX_CURRENT_LEG <---

// ---> EXT_MX_CURRENT_OBJ
typedef struct st_ext_mx_current_obj {
  std::string  value =  "mxCurrentObjective";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_ext_mx_current_obj;
// -- getter -- 
static std::string  get_EXT_MX_CURRENT_OBJ() {
  static const st_ext_mx_current_obj instance;
  return instance.getValue();
}
// EXT_MX_CURRENT_OBJ <---

// ---> EXT_MX_CURRENT_TASK
typedef struct st_ext_mx_current_task {
  std::string  value =  "mxCurrentTask";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_ext_mx_current_task;
// -- getter -- 
static std::string  get_EXT_MX_CURRENT_TASK() {
  static const st_ext_mx_current_task instance;
  return instance.getValue();
}
// EXT_MX_CURRENT_TASK <---

// ---> EXT_MX_CURRENT_TRIGGER
typedef struct st_ext_mx_current_trigger {
  std::string  value =  "mxCurrentTrigger";
[[nodiscard]]  std::string  getValue() const { return value; }
} st_ext_mx_current_trigger;
// -- getter -- 
static std::string  get_EXT_MX_CURRENT_TRIGGER() {
  static const st_ext_mx_current_trigger instance;
  return instance.getValue();
}
// EXT_MX_CURRENT_TRIGGER <---

// ---> EXT_MX_CURRENT_3DOBJECT
typedef struct st_ext_mx_current_3dobject {
  std::string  value =  "mxCurrent3dObject"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_ext_mx_current_3dobject;
// -- getter -- 
static std::string  get_EXT_MX_CURRENT_3DOBJECT() {
  static const st_ext_mx_current_3dobject instance;
  return instance.getValue();
}
// EXT_MX_CURRENT_3DOBJECT <---

// ---> EXT_MX_CURRENT_3DINSTANCE
typedef struct st_ext_mx_current_3dinstance {
  std::string  value =  "mxCurrent3dInstance"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_ext_mx_current_3dinstance;
// -- getter -- 
static std::string  get_EXT_MX_CURRENT_3DINSTANCE() {
  static const st_ext_mx_current_3dinstance instance;
  return instance.getValue();
}
// EXT_MX_CURRENT_3DINSTANCE <---

// ---> EXT_MX_QM_MESSAGE
typedef struct st_ext_mx_qm_message {
  std::string  value =  "mxQmMessage"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_ext_mx_qm_message;
// -- getter -- 
static std::string  get_EXT_MX_QM_MESSAGE() {
  static const st_ext_mx_qm_message instance;
  return instance.getValue();
}
// EXT_MX_QM_MESSAGE <---

// ---> EXT_mxState
typedef struct st_ext_mxstate {
  std::string  value =  "state"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_ext_mxstate;
// -- getter -- 
static std::string  get_EXT_mxState() {
  static const st_ext_mxstate instance;
  return instance.getValue();
}
// EXT_mxState <---

// ---> EXT_mxType
typedef struct st_ext_mxtype {
  std::string  value =  get_ATTRIB_TYPE(); 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_ext_mxtype;
// -- getter -- 
static std::string  get_EXT_mxType() {
  static const st_ext_mxtype instance;
  return instance.getValue();
}
// EXT_mxType <---

// ---> EXT_mxTaskActionName
typedef struct st_ext_mxtaskactionname {
  std::string  value =  "taskActionName"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_ext_mxtaskactionname;
// -- getter -- 
static std::string  get_EXT_mxTaskActionName() {
  static const st_ext_mxtaskactionname instance;
  return instance.getValue();
}
// EXT_mxTaskActionName <---

// ---> EXT_mxTaskHasBeenEvaluated
typedef struct st_ext_mxtaskhasbeenevaluated {
  std::string  value =  "taskHasBeenEvaluated"; 
[[nodiscard]]  std::string  getValue() const { return value; }
} st_ext_mxtaskhasbeenevaluated;
// -- getter -- 
static std::string  get_EXT_mxTaskHasBeenEvaluated() {
  static const st_ext_mxtaskhasbeenevaluated instance;
  return instance.getValue();
}
// EXT_mxTaskHasBeenEvaluated <---



// ---> EXT_mxNavType
typedef struct st_ext_mxnavtype {
  std::string value =  "mxNavType"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_ext_mxnavtype;
// -- getter -- 
static std::string get_EXT_mxNavType() {
  static const st_ext_mxnavtype instance;
  return instance.getValue();
}
// EXT_mxNavType <---

// ---> EXT_mxNavLat
typedef struct st_ext_mxnavlat {
  std::string value =  "mxNavLat";
[[nodiscard]]  std::string getValue() const { return value; }
} st_ext_mxnavlat;
// -- getter -- 
static std::string get_EXT_mxNavLat() {
  static const st_ext_mxnavlat instance;
  return instance.getValue();
}
// EXT_mxNavLat <---

// ---> EXT_mxNavLon
typedef struct st_ext_mxnavlon {
  std::string value =  "mxNavLon";
[[nodiscard]]  std::string getValue() const { return value; }
} st_ext_mxnavlon;
// -- getter -- 
static std::string get_EXT_mxNavLon() {
  static const st_ext_mxnavlon instance;
  return instance.getValue();
}
// EXT_mxNavLon <---

// ---> EXT_mxNavHeight
typedef struct st_ext_mxnavheight {
  std::string value =  "mxNavHeight";
[[nodiscard]]  std::string getValue() const { return value; }
} st_ext_mxnavheight;
// -- getter -- 
static std::string get_EXT_mxNavHeight() {
  static const st_ext_mxnavheight instance;
  return instance.getValue();
}
// EXT_mxNavHeight <---

// ---> EXT_mxNavFreq
typedef struct st_ext_mxnavfreq {
  std::string value =  "mxNavFreq";
[[nodiscard]]  std::string getValue() const { return value; }
} st_ext_mxnavfreq;
// -- getter -- 
static std::string get_EXT_mxNavFreq() {
  static const st_ext_mxnavfreq instance;
  return instance.getValue();
}
// EXT_mxNavFreq <---

// ---> EXT_mxNavHead
typedef struct st_ext_mxnavhead {
  std::string value =  "mxNavHeading";
[[nodiscard]]  std::string getValue() const { return value; }
} st_ext_mxnavhead;
// -- getter -- 
static std::string get_EXT_mxNavHead() {
  static const st_ext_mxnavhead instance;
  return instance.getValue();
}
// EXT_mxNavHead <---

// ---> EXT_mxNavID
typedef struct st_ext_mxnavid {
  std::string value =  "mxNavID";
[[nodiscard]]  std::string getValue() const { return value; }
} st_ext_mxnavid;
// -- getter -- 
static std::string get_EXT_mxNavID() {
  static const st_ext_mxnavid instance;
  return instance.getValue();
}
// EXT_mxNavID <---

// ---> EXT_mxNavName
typedef struct st_ext_mxnavname {
  std::string value =  "mxNavName";
[[nodiscard]]  std::string getValue() const { return value; }
} st_ext_mxnavname;
// -- getter -- 
static std::string get_EXT_mxNavName() {
  static const st_ext_mxnavname instance;
  return instance.getValue();
}
// EXT_mxNavName <---

// ---> EXT_mxNavRegion
typedef struct st_ext_mxnavregion {
  std::string value =  "mxNavRegion";
[[nodiscard]]  std::string getValue() const { return value; }
} st_ext_mxnavregion;
// -- getter -- 
static std::string get_EXT_mxNavRegion() {
  static const st_ext_mxnavregion instance;
  return instance.getValue();
}
// EXT_mxNavRegion <---

// ---> EXT_mxCargoPosLat
typedef struct st_ext_mxcargoposlat {
  std::string value =  "mxCargoPosLat"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_ext_mxcargoposlat;
// -- getter -- 
static std::string get_EXT_mxCargoPosLat() {
  static const st_ext_mxcargoposlat instance;
  return instance.getValue();
}
// EXT_mxCargoPosLat <---

// ---> EXT_mxCargoPosLon
typedef struct st_ext_mxcargoposlon {
  std::string value =  "mxCargoPosLon";
[[nodiscard]]  std::string getValue() const { return value; }
} st_ext_mxcargoposlon;
// -- getter -- 
static std::string get_EXT_mxCargoPosLon() {
  static const st_ext_mxcargoposlon instance;
  return instance.getValue();
}
// EXT_mxCargoPosLon <---

// ---> QMM_DUMMY_MSG_NAME_PREFIX
typedef struct st_qmm_dummy_msg_name_prefix {
  std::string value =  "msg_"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_qmm_dummy_msg_name_prefix;
// -- getter -- 
static std::string get_QMM_DUMMY_MSG_NAME_PREFIX() {
  static const st_qmm_dummy_msg_name_prefix instance;
  return instance.getValue();
}
// QMM_DUMMY_MSG_NAME_PREFIX <---

// ---> ELEMENT_BASE_WEIGHTS_KG
typedef struct st_element_base_weights_kg {
  std::string value =  "base_weights_kg"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_element_base_weights_kg;
// -- getter -- 
static std::string get_ELEMENT_BASE_WEIGHTS_KG() {
  static const st_element_base_weights_kg instance;
  return instance.getValue();
}
// ELEMENT_BASE_WEIGHTS_KG <---

// ---> ATTRIB_PILOT
typedef struct st_attrib_pilot {
  std::string value =  "pilot"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_attrib_pilot;
// -- getter -- 
static std::string get_ATTRIB_PILOT() {
  static const st_attrib_pilot instance;
  return instance.getValue();
}
// ATTRIB_PILOT <---

// ---> ATTRIB_PASSENGERS
typedef struct st_attrib_passengers {
  std::string value =  "passengers"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_attrib_passengers;
// -- getter -- 
static std::string get_ATTRIB_PASSENGERS() {
  static const st_attrib_passengers instance;
  return instance.getValue();
}
// ATTRIB_PASSENGERS <---

// ---> ATTRIB_STORAGE
typedef struct st_attrib_storage {
  std::string value =  "storage"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_attrib_storage;
// -- getter -- 
static std::string get_ATTRIB_STORAGE() {
  static const st_attrib_storage instance;
  return instance.getValue();
}
// ATTRIB_STORAGE <---

// ---> ELEMENT_POSITION
typedef struct st_element_position {
  std::string value =  "position"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_element_position;
// -- getter -- 
static std::string get_ELEMENT_POSITION() {
  static const st_element_position instance;
  return instance.getValue();
}
// ELEMENT_POSITION <---

// ---> ATTRIB_AUTO_POSITION_PLANE
typedef struct st_attrib_auto_position_plane {
  std::string value =  "auto_position_plane"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_attrib_auto_position_plane;
// -- getter -- 
static std::string get_ATTRIB_AUTO_POSITION_PLANE() {
  static const st_attrib_auto_position_plane instance;
  return instance.getValue();
}
// ATTRIB_AUTO_POSITION_PLANE <---

// ---> OPT_MUTE_MX_SOUNDS
typedef struct st_opt_mute_mx_sounds {
  std::string value =  "mute_missionx_sound"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_opt_mute_mx_sounds;
// -- getter -- 
static std::string get_OPT_MUTE_MX_SOUNDS() {
  static const st_opt_mute_mx_sounds instance;
  return instance.getValue();
}
// OPT_MUTE_MX_SOUNDS <---

// ---> OPT_ABORT_MISSION_ON_CRASH
typedef struct st_opt_abort_mission_on_crash {
  std::string value =  "abort_mission_on_crash"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_opt_abort_mission_on_crash;
// -- getter -- 
static std::string get_OPT_ABORT_MISSION_ON_CRASH() {
  static const st_opt_abort_mission_on_crash instance;
  return instance.getValue();
}
// OPT_ABORT_MISSION_ON_CRASH <---

// ---> OPT_ENABLE_DESIGNER_MODE
typedef struct st_opt_enable_designer_mode {
  std::string value =  "enable_designer_mode"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_opt_enable_designer_mode;
// -- getter -- 
static std::string get_OPT_ENABLE_DESIGNER_MODE() {
  static const st_opt_enable_designer_mode instance;
  return instance.getValue();
}
// OPT_ENABLE_DESIGNER_MODE <---

// ---> OPT_DISPLAY_VISUAL_CUES
typedef struct st_opt_display_visual_cues {
  std::string value =  "enable_visual_cues"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_opt_display_visual_cues;
// -- getter -- 
static std::string get_OPT_DISPLAY_VISUAL_CUES() {
  static const st_opt_display_visual_cues instance;
  return instance.getValue();
}
// OPT_DISPLAY_VISUAL_CUES <---

// ---> OPT_AUTO_HIDE_SHOW_MXPAD
typedef struct st_opt_auto_hide_show_mxpad {
  std::string value =  "auto_hide_mxpad"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_opt_auto_hide_show_mxpad;
// -- getter -- 
static std::string get_OPT_AUTO_HIDE_SHOW_MXPAD() {
  static const st_opt_auto_hide_show_mxpad instance;
  return instance.getValue();
}
// OPT_AUTO_HIDE_SHOW_MXPAD <---

// ---> OPT_AUTO_PAUSE_IN_2D
typedef struct st_opt_auto_pause_in_2d {
  std::string value =  "auto_pause_in_2D"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_opt_auto_pause_in_2d;
// -- getter -- 
static std::string get_OPT_AUTO_PAUSE_IN_2D() {
  static const st_opt_auto_pause_in_2d instance;
  return instance.getValue();
}
// OPT_AUTO_PAUSE_IN_2D <---

// ---> OPT_AUTO_PAUSE_IN_VR
typedef struct st_opt_auto_pause_in_vr {
  std::string value =  "auto_pause_in_vr"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_opt_auto_pause_in_vr;
// -- getter -- 
static std::string get_OPT_AUTO_PAUSE_IN_VR() {
  static const st_opt_auto_pause_in_vr instance;
  return instance.getValue();
}
// OPT_AUTO_PAUSE_IN_VR <---

// ---> OPT_CYCLE_LOG_FILES
typedef struct st_opt_cycle_log_files {
  std::string value =  "cycle_log_files"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_opt_cycle_log_files;
// -- getter -- 
static std::string get_OPT_CYCLE_LOG_FILES() {
  static const st_opt_cycle_log_files instance;
  return instance.getValue();
}
// OPT_CYCLE_LOG_FILES <---

// ---> OPT_DISPLAY_MISSIONX_IN_VR
typedef struct st_opt_display_missionx_in_vr {
  std::string value =  "display_missionx_in_vr"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_opt_display_missionx_in_vr;
// -- getter -- 
static std::string get_OPT_DISPLAY_MISSIONX_IN_VR() {
  static const st_opt_display_missionx_in_vr instance;
  return instance.getValue();
}
// OPT_DISPLAY_MISSIONX_IN_VR <---

// ---> OPT_WRITE_CONVERTED_FPLN_TO_XPLANE_FOLDER
typedef struct st_opt_write_converted_fpln_to_xplane_folder {
  std::string value =  "write_convert_fms_to_xplane_folder"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_opt_write_converted_fpln_to_xplane_folder;
// -- getter -- 
static std::string get_OPT_WRITE_CONVERTED_FPLN_TO_XPLANE_FOLDER() {
  static const st_opt_write_converted_fpln_to_xplane_folder instance;
  return instance.getValue();
}
// OPT_WRITE_CONVERTED_FPLN_TO_XPLANE_FOLDER <---

// ---> OPT_DISABLE_PLUGIN_COLD_AND_DARK_WORKAROUND
typedef struct st_opt_disable_plugin_cold_and_dark_workaround {
  std::string value =  "disable_plugin_cold_and_dark_workaround"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_opt_disable_plugin_cold_and_dark_workaround;
// -- getter -- 
static std::string get_OPT_DISABLE_PLUGIN_COLD_AND_DARK_WORKAROUND() {
  static const st_opt_disable_plugin_cold_and_dark_workaround instance;
  return instance.getValue();
}
// OPT_DISABLE_PLUGIN_COLD_AND_DARK_WORKAROUND <---

// ---> OPT_OVERPASS_FILTER
typedef struct st_opt_overpass_filter {
  std::string value =  "overpass_filter"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_opt_overpass_filter;
// -- getter -- 
static std::string get_OPT_OVERPASS_FILTER() {
  static const st_opt_overpass_filter instance;
  return instance.getValue();
}
// OPT_OVERPASS_FILTER <---

// ---> OPT_OVERPASS_URL
typedef struct st_opt_overpass_url {
  std::string value =  "overpass_url"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_opt_overpass_url;
// -- getter -- 
static std::string get_OPT_OVERPASS_URL() {
  static const st_opt_overpass_url instance;
  return instance.getValue();
}
// OPT_OVERPASS_URL <---

// ---> OPT_GPS_IMMEDIATE_EXPOSURE
typedef struct st_opt_gps_immediate_exposure {
  std::string value =  "gps_immediate_exposure"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_opt_gps_immediate_exposure;
// -- getter -- 
static std::string get_OPT_GPS_IMMEDIATE_EXPOSURE() {
  static const st_opt_gps_immediate_exposure instance;
  return instance.getValue();
}
// OPT_GPS_IMMEDIATE_EXPOSURE <---

// ---> OPT_FLIGHT_LEG_PROGRESS_COUNTER
typedef struct st_opt_flight_leg_progress_counter {
  std::string value =  "flight_leg_progress_counter"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_opt_flight_leg_progress_counter;
// -- getter -- 
static std::string get_OPT_FLIGHT_LEG_PROGRESS_COUNTER() {
  static const st_opt_flight_leg_progress_counter instance;
  return instance.getValue();
}
// OPT_FLIGHT_LEG_PROGRESS_COUNTER <---



static constexpr  float    MINIMUM_EXPECTED_PILOT_WEIGHT_IN_STATION =  40.0f;  // // v24.12.2 used when evaluating if to add pilot weight to the plane.
static constexpr  int      MAX_LAPS_I =  24;  // // v3.0.223.1
static constexpr  int      MXPAD_LINE_WIDTH =  50;
static constexpr  bool     DEFAULT_AUTO_PAUSE_IN_VR =  false;  // // v3.0.255.4.2
static constexpr  bool     DEFAULT_AUTO_PAUSE_IN_2D =  true;  // // v3.0.255.4.2
static constexpr  bool     DEFAULT_DISPLAY_MISSIONX_IN_VR =  true;  // // v3.0.255.4.2
static constexpr  bool     DEFAULT_WRITE_CONVERTED_FMS_TO_XPLANE_FOLDER =  false;  // // v3.0.255.4.2
static constexpr  bool     DEFAULT_DISABLE_PLUGIN_COLD_AND_DARK =  false;  // // v3.0.255.4.2
static constexpr  float    DEFAULT_PILOT_WEIGHT =  85.0f;  // // v3.0.213.3  85kg // calculate weight related
static constexpr  float    DEFAULT_STORED_WEIGHT =  5.0f;  // // v3.0.213.3  5kg
static constexpr  float    DEFUALT_3D_OBJECT_SPEED_KMH =  10.0f;  // // MOVING OBJECT Constants
static constexpr  float    MANDATORY_R =  0.99f;
static constexpr  float    MANDATORY_G =  0.001f;
static constexpr  float    MANDATORY_B =  0.001f;
static constexpr  float    DEFAULT_R =  0.9f;
static constexpr  float    DEFAULT_G =  0.65f;
static constexpr  float    DEFAULT_B =  0.0f;
static constexpr  int      FONT_HEIGHT =  8;  // // 14;  // x-plane default font height
static constexpr  int      MAX_MXPAD_SELECTIONS =  6;  // // ####### MXPAD SELECTION ####
static constexpr  double   MAX_AWAY_SKEWED_DISTANCE_NM =  0.5;  // // v3.0.253.12 added for general use in all classes and not just RandomMission:get_skewed_target_position() function
static constexpr  float    DEFAULT_RANDOM_POINT_JUMP_NM =  0.5f;  // // v3.0.219.5 used in RandomEngine::getRandomAirport(). Represent how much nautical miles to jump each airport search
static constexpr  int      MAX_DISTANCE_TO_SEARCH_AIRPORT =  2500;  // // v3.0.219.5 used in RandomEngine::getRandomAirport(). Represent the maximum distance we allow to search for next airport in nautical miles.
static constexpr  float    MIN_DISTANCE_TO_SEARCH_AIRPORT =  1.5f;  // // v3.0.219.12 used in RandomEngine::getRandomAirport(). Represent the minimum distance to filter out airports.
static constexpr  int      DEFAULT_RANDOM_DEGREES_TO_EXCLUDE =  20;  // // v3.0.219.5 used in RandomEngine::getRandomAirport(). Represent the degrees to include in the "exclude" configuration
static constexpr  float    DEFAULT_MAX_SLOPE_TO_LAND_ON =  6.0f;  // // v3.0.219.11
static constexpr  double   SLIDER_SHORTEST_MIN_ILS_SEARCH_RADIUS =  50;  // // ILS LAYER // v3.0.253.6 holds the minimum search ILS airport
static constexpr  float    SLIDER_SHORTEST_MAX_ILS_SEARCH_RADIUS =  250.0;  // // v3.0.253.6 holds the lowest MAX radius we will search for ILS airports.
static constexpr  float    SLIDER_ILS_MAX_SEARCH_RADIUS =  9000.0;  // // v3.0.253.6 holds the MAX radius we will search for ILS airports.
static constexpr  int      SLIDER_ILS_SHORTEST_RW_LENGTH_MT =  740;  // // v3.0.253.6 holds the shortest slider value allowed for runway length (ILS layer).
static constexpr  int      SLIDER_ILS_LOGEST_RW_LENGTH_MT =  3740;  // // v3.0.253.6 holds the longest slider value for runway length (ILS layer)
static constexpr  int      SLIDER_ILS_STARTING_RW_LENGTH_VALUE =  1000;  // // v3.0.253.6 holds the longest slider value for runway length (ILS layer)
static constexpr  int      SLIDER_ILS_SHORTEST_RW_WIDTH_MT =  15;  // // v3.0.253.6 holds the shortest slider value allowed for runway width (ILS layer).
static constexpr  int      SLIDER_ILS_WIDEST_RW_WIDTH_MT =  70;  // // v3.0.253.6 holds the longest slider value for runway width (ILS layer)
static constexpr  int      SLIDER_ILS_STARTING_RW_WIDTH_VALUE =  45;  // // v3.0.253.6 holds the longest slider value for runway width (ILS layer)
static constexpr  int      SLIDER_ILS_LOWEST_AIRPORT_ELEV_FT =  -80;  // // v3.0.253.6 holds the lowest slider value allowed for airport elevation (ILS layer).
static constexpr  int      SLIDER_ILS_HIGHEST_AIRPORT_ELEV_FT =  7000;  // // v3.0.253.6 holds the highest slider value for airport elevation (ILS layer)
static constexpr  int      SLIDER_ILS_STARTING_AIRPORT_ELEV_VALUE_FT =  0;  // // v3.0.253.6 holds the default slider value for airport elevation (ILS layer)
static constexpr  double   SLIDER_MIN_RND_DIST =  5.0;  // // SETUP Screen
static constexpr  double   SLIDER_MAX_RND_DIST =  50.0;
static constexpr  float    MAX_RAD_4_OSM_MAX_DIST =  20.0;  // // v25.12.2
static constexpr  int      DEFAULT_SETUP_MISSION_VOLUME_I =  30;  // // v3.0.303.6 holds default volume value
static constexpr  float    NEAR_ENOUGH_DISTANCE_FOR_CUSTOM_NAVAID_SCENERY =  20.0f;  // // v3.0.253.6 used when picking near navaid and we want to also consider custom scenery, so we first pick the closest scenery and then loop over the navaids that have custom scenery and check their distance relative to the one we know is nearest. In  20nm distance from nearest we should pick the custom scenery navaid over the default one.
static constexpr  int      PERCENT_TO_PICK_CUSTOM_SCENERY_OVER_GENERIC =  40;  // // v3.0.253.6 used in RandomEngine::getRandomAirport_localThread()
static constexpr  double   SLING_LOAD_SUCCESS_RADIUS_MT =  10.0;  // // sling load success radius in meters
static constexpr  float    MIN_SOUND_VOLUME_F =  0.0f;  // // SOUND related
static constexpr  float    MAX_SOUND_VOLUME_F =  100.0f;
static constexpr  float    GATHER_STATS_INTERVAL_SEC =  1.0f;  // // gather stats


constexpr const static  char  *SETUP_PILOT_NAME =  "setup_pilot_name";  // // v3.305.1 pilot nickname used in story mode messages
constexpr const static  char  *DEFAULT_SETUP_PILOT_NAME =  "Pilot";  // // v3.305.1 pilot nickname used in story mode messages
constexpr const static  char  *SETUP_USE_XP11_INV_LAYOUT =  "setup_use_xp11_inv_layout";  // // v24.12.2 Toggle option to use the Original inventory ui layout, instead of "station" layout.
constexpr const static  char  *SETUP_WRITE_CACHE_TO_DB =  "setup_write_cache_to_db";  // // v3.0.253.3 Write information to SQLITE DB too. // DEPRECATED ELEMENTS turned to constexpr
constexpr const static  char  *SETUP_FONT_PIXEL_SIZE =  "setup_font_pixel_size";  // // v3.0.251.1 holds preferred font pixel size
constexpr const static  char  *SETUP_FONT_LOCATION =  "setup_font_location";  // // v3.0.251.1 holds preferred font pixel size




// ---> OPT_PILOT_BASE_WEIGHT
typedef struct st_opt_pilot_base_weight {
  std::string value =  "pilot_base_weight"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_opt_pilot_base_weight;
// -- getter -- 
static std::string get_OPT_PILOT_BASE_WEIGHT() {
  static const st_opt_pilot_base_weight instance;
  return instance.getValue();
}
// OPT_PILOT_BASE_WEIGHT <---

// ---> OPT_STORAGE_BASE_WEIGHT
typedef struct st_opt_storage_base_weight {
  std::string value =  "storage_base_weight"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_opt_storage_base_weight;
// -- getter -- 
static std::string get_OPT_STORAGE_BASE_WEIGHT() {
  static const st_opt_storage_base_weight instance;
  return instance.getValue();
}
// OPT_STORAGE_BASE_WEIGHT <---

// ---> OPT_PASSENGERS_BASE_WEIGHT
typedef struct st_opt_passengers_base_weight {
  std::string value =  "passengers_base_weight"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_opt_passengers_base_weight;
// -- getter -- 
static std::string get_OPT_PASSENGERS_BASE_WEIGHT() {
  static const st_opt_passengers_base_weight instance;
  return instance.getValue();
}
// OPT_PASSENGERS_BASE_WEIGHT <---

// ---> OPT_PILOT
typedef struct st_opt_pilot {
  std::string value =  "pilot"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_opt_pilot;
// -- getter -- 
static std::string get_OPT_PILOT() {
  static const st_opt_pilot instance;
  return instance.getValue();
}
// OPT_PILOT <---

// ---> OPT_STORAGE
typedef struct st_opt_storage {
  std::string value =  "storage"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_opt_storage;
// -- getter -- 
static std::string get_OPT_STORAGE() {
  static const st_opt_storage instance;
  return instance.getValue();
}
// OPT_STORAGE <---

// ---> OPT_PASSENGERS
typedef struct st_opt_passengers {
  std::string value =  "passengers"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_opt_passengers;
// -- getter -- 
static std::string get_OPT_PASSENGERS() {
  static const st_opt_passengers instance;
  return instance.getValue();
}
// OPT_PASSENGERS <---

// ---> MESSAGE_NEED_TO_RESTART_XPLANE
typedef struct st_message_need_to_restart_xplane {
  std::string value =  "Please restart X-Plane so changes will take effect!"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_message_need_to_restart_xplane;
// -- getter -- 
static std::string get_MESSAGE_NEED_TO_RESTART_XPLANE() {
  static const st_message_need_to_restart_xplane instance;
  return instance.getValue();
}
// MESSAGE_NEED_TO_RESTART_XPLANE <---

// ---> ELEMENT_XP_COMMANDS
typedef struct st_element_xp_commands {
  std::string value =  "xp_commands"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_element_xp_commands;
// -- getter -- 
static std::string get_ELEMENT_XP_COMMANDS() {
  static const st_element_xp_commands instance;
  return instance.getValue();
}
// ELEMENT_XP_COMMANDS <---

// ---> ATTRIB_COMMANDS
typedef struct st_attrib_commands {
  std::string value =  "commands"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_attrib_commands;
// -- getter -- 
static std::string get_ATTRIB_COMMANDS() {
  static const st_attrib_commands instance;
  return instance.getValue();
}
// ATTRIB_COMMANDS <---

// ---> ELEMENT_FIRE_COMMANDS_AT_LEG_START
typedef struct st_element_fire_commands_at_leg_start {
  std::string value =  "fire_commands_at_leg_start";
[[nodiscard]]  std::string getValue() const { return value; }
} st_element_fire_commands_at_leg_start;
// -- getter -- 
static std::string get_ELEMENT_FIRE_COMMANDS_AT_LEG_START() {
  static const st_element_fire_commands_at_leg_start instance;
  return instance.getValue();
}
// ELEMENT_FIRE_COMMANDS_AT_LEG_START <---

// ---> ELEMENT_FIRE_COMMANDS_AT_GOAL_START
typedef struct st_element_fire_commands_at_goal_start {
  std::string value =  "fire_commands_at_goal_start";
[[nodiscard]]  std::string getValue() const { return value; }
} st_element_fire_commands_at_goal_start;
// -- getter -- 
static std::string get_ELEMENT_FIRE_COMMANDS_AT_GOAL_START() {
  static const st_element_fire_commands_at_goal_start instance;
  return instance.getValue();
}
// ELEMENT_FIRE_COMMANDS_AT_GOAL_START <---

// ---> ELEMENT_FIRE_COMMANDS_AT_LEG_END
typedef struct st_element_fire_commands_at_leg_end {
  std::string value =  "fire_commands_at_leg_end";
[[nodiscard]]  std::string getValue() const { return value; }
} st_element_fire_commands_at_leg_end;
// -- getter -- 
static std::string get_ELEMENT_FIRE_COMMANDS_AT_LEG_END() {
  static const st_element_fire_commands_at_leg_end instance;
  return instance.getValue();
}
// ELEMENT_FIRE_COMMANDS_AT_LEG_END <---

// ---> ELEMENT_FIRE_COMMANDS_AT_GOAL_END
typedef struct st_element_fire_commands_at_goal_end {
  std::string value =  "fire_commands_at_goal_end";
[[nodiscard]]  std::string getValue() const { return value; }
} st_element_fire_commands_at_goal_end;
// -- getter -- 
static std::string get_ELEMENT_FIRE_COMMANDS_AT_GOAL_END() {
  static const st_element_fire_commands_at_goal_end instance;
  return instance.getValue();
}
// ELEMENT_FIRE_COMMANDS_AT_GOAL_END <---

// ---> ATTRIB_FIRE_COMMANDS_ON_SUCCESS
typedef struct st_attrib_fire_commands_on_success {
  std::string value =  "fire_commands_on_success"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_attrib_fire_commands_on_success;
// -- getter -- 
static std::string get_ATTRIB_FIRE_COMMANDS_ON_SUCCESS() {
  static const st_attrib_fire_commands_on_success instance;
  return instance.getValue();
}
// ATTRIB_FIRE_COMMANDS_ON_SUCCESS <---

// ---> ATTRIB_FIRE_COMMANDS_ON_FAILURE
typedef struct st_attrib_fire_commands_on_failure {
  std::string value =  "fire_commands_on_failure"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_attrib_fire_commands_on_failure;
// -- getter -- 
static std::string get_ATTRIB_FIRE_COMMANDS_ON_FAILURE() {
  static const st_attrib_fire_commands_on_failure instance;
  return instance.getValue();
}
// ATTRIB_FIRE_COMMANDS_ON_FAILURE <---

// ---> ATTRIB_FIRE_COMMANDS_AT_TASK_END
typedef struct st_attrib_fire_commands_at_task_end {
  std::string value =  "fire_commands_at_task_end"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_attrib_fire_commands_at_task_end;
// -- getter -- 
static std::string get_ATTRIB_FIRE_COMMANDS_AT_TASK_END() {
  static const st_attrib_fire_commands_at_task_end instance;
  return instance.getValue();
}
// ATTRIB_FIRE_COMMANDS_AT_TASK_END <---

// ---> ATTRIB_START_COLD_AND_DARK
typedef struct st_attrib_start_cold_and_dark {
  std::string value =  "start_cold_and_dark"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_attrib_start_cold_and_dark;
// -- getter -- 
static std::string get_ATTRIB_START_COLD_AND_DARK() {
  static const st_attrib_start_cold_and_dark instance;
  return instance.getValue();
}
// ATTRIB_START_COLD_AND_DARK <---

// ---> ELEMENT_DATAREFS_START_COLD_AND_DARK
typedef struct st_element_datarefs_start_cold_and_dark {
  std::string value =  "datarefs_start_cold_and_dark"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_element_datarefs_start_cold_and_dark;
// -- getter -- 
static std::string get_ELEMENT_DATAREFS_START_COLD_AND_DARK() {
  static const st_element_datarefs_start_cold_and_dark instance;
  return instance.getValue();
}
// ELEMENT_DATAREFS_START_COLD_AND_DARK <---

// ---> MX_TRUE
typedef struct st_mx_true {
  std::string value =  "true"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_mx_true;
// -- getter -- 
static std::string get_MX_TRUE() {
  static const st_mx_true instance;
  return instance.getValue();
}
// MX_TRUE <---

// ---> MX_FALSE
typedef struct st_mx_false {
  std::string value =  "false"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_mx_false;
// -- getter -- 
static std::string get_MX_FALSE() {
  static const st_mx_false instance;
  return instance.getValue();
}
// MX_FALSE <---

// ---> MX_YES
typedef struct st_mx_yes {
  std::string value =  "yes"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_mx_yes;
// -- getter -- 
static std::string get_MX_YES() {
  static const st_mx_yes instance;
  return instance.getValue();
}
// MX_YES <---

// ---> MX_NO
typedef struct st_mx_no {
  std::string value =  "no"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_mx_no;
// -- getter -- 
static std::string get_MX_NO() {
  static const st_mx_no instance;
  return instance.getValue();
}
// MX_NO <---


// ---> BITMAP_INVENTORY_MXPAD
typedef struct st_bitmap_inventory_mxpad {
  std::string value =  "inventory_mxpad.png"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_bitmap_inventory_mxpad;
// -- getter -- 
static std::string get_BITMAP_INVENTORY_MXPAD() {
  static const st_bitmap_inventory_mxpad instance;
  return instance.getValue();
}
// BITMAP_INVENTORY_MXPAD <---

// ---> BITMAP_MAP_MXPAD
typedef struct st_bitmap_map_mxpad {
  std::string value =  "map_mxpad.png";
[[nodiscard]]  std::string getValue() const { return value; }
} st_bitmap_map_mxpad;
// -- getter -- 
static std::string get_BITMAP_MAP_MXPAD() {
  static const st_bitmap_map_mxpad instance;
  return instance.getValue();
}
// BITMAP_MAP_MXPAD <---

// ---> BITMAP_AUTO_HIDE_EYE_FOCUS
typedef struct st_bitmap_auto_hide_eye_focus {
  std::string value =  "eye_focus_16x16.png"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_bitmap_auto_hide_eye_focus;
// -- getter -- 
static std::string get_BITMAP_AUTO_HIDE_EYE_FOCUS() {
  static const st_bitmap_auto_hide_eye_focus instance;
  return instance.getValue();
}
// BITMAP_AUTO_HIDE_EYE_FOCUS <---

// ---> BITMAP_AUTO_HIDE_EYE_FOCUS_DISABLED
typedef struct st_bitmap_auto_hide_eye_focus_disabled {
  std::string value =  "eye_focus_disabled_16x16.png"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_bitmap_auto_hide_eye_focus_disabled;
// -- getter -- 
static std::string get_BITMAP_AUTO_HIDE_EYE_FOCUS_DISABLED() {
  static const st_bitmap_auto_hide_eye_focus_disabled instance;
  return instance.getValue();
}
// BITMAP_AUTO_HIDE_EYE_FOCUS_DISABLED <---

// ---> BITMAP_LOAD_MISSION
typedef struct st_bitmap_load_mission {
  std::string value =  "load_missions.png"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_bitmap_load_mission;
// -- getter -- 
static std::string get_BITMAP_LOAD_MISSION() {
  static const st_bitmap_load_mission instance;
  return instance.getValue();
}
// BITMAP_LOAD_MISSION <---

// ---> BITMAP_HOME
typedef struct st_bitmap_home {
  std::string value =  "btn_home_64x64.png"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_bitmap_home;
// -- getter -- 
static std::string get_BITMAP_HOME() {
  static const st_bitmap_home instance;
  return instance.getValue();
}
// BITMAP_HOME <---

// ---> BITMAP_TARGET_MARKER_ICON
typedef struct st_bitmap_target_marker_icon {
  std::string value =  "btn_target_icon_64x64.png"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_bitmap_target_marker_icon;
// -- getter -- 
static std::string get_BITMAP_TARGET_MARKER_ICON() {
  static const st_bitmap_target_marker_icon instance;
  return instance.getValue();
}
// BITMAP_TARGET_MARKER_ICON <---

// ---> BITMAP_BTN_LAB_24X18
typedef struct st_bitmap_btn_lab_24x18 {
  std::string value =  "btn_lab_240x180.png"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_bitmap_btn_lab_24x18;
// -- getter -- 
static std::string get_BITMAP_BTN_LAB_24X18() {
  static const st_bitmap_btn_lab_24x18 instance;
  return instance.getValue();
}
// BITMAP_BTN_LAB_24X18 <---

// ---> BITMAP_BTN_WORLD_PATH_24X18
typedef struct st_bitmap_btn_world_path_24x18 {
  std::string value =  "btn_world_paths_240x180.png"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_bitmap_btn_world_path_24x18;
// -- getter -- 
static std::string get_BITMAP_BTN_WORLD_PATH_24X18() {
  static const st_bitmap_btn_world_path_24x18 instance;
  return instance.getValue();
}
// BITMAP_BTN_WORLD_PATH_24X18 <---

// ---> BITMAP_BTN_PREPARE_MISSION_24X18
typedef struct st_bitmap_btn_prepare_mission_24x18 {
  std::string value =  "btn_prepare_mission_240x180.png"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_bitmap_btn_prepare_mission_24x18;
// -- getter -- 
static std::string get_BITMAP_BTN_PREPARE_MISSION_24X18() {
  static const st_bitmap_btn_prepare_mission_24x18 instance;
  return instance.getValue();
}
// BITMAP_BTN_PREPARE_MISSION_24X18 <---

// ---> BITMAP_BTN_FLY_MISSION_24X18
typedef struct st_bitmap_btn_fly_mission_24x18 {
  std::string value =  "btn_fly_mission_240x180.png"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_bitmap_btn_fly_mission_24x18;
// -- getter -- 
static std::string get_BITMAP_BTN_FLY_MISSION_24X18() {
  static const st_bitmap_btn_fly_mission_24x18 instance;
  return instance.getValue();
}
// BITMAP_BTN_FLY_MISSION_24X18 <---

// ---> BITMAP_BTN_SETUP_24X18
typedef struct st_bitmap_btn_setup_24x18 {
  std::string value =  "btn_setup_240x180.png"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_bitmap_btn_setup_24x18;
// -- getter -- 
static std::string get_BITMAP_BTN_SETUP_24X18() {
  static const st_bitmap_btn_setup_24x18 instance;
  return instance.getValue();
}
// BITMAP_BTN_SETUP_24X18 <---

// ---> BITMAP_BTN_CONVERT_FPLN_TO_MISSION_24X18
typedef struct st_bitmap_btn_convert_fpln_to_mission_24x18 {
  std::string value =  "btn_fpln_convert_to_mission_240x180.png"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_bitmap_btn_convert_fpln_to_mission_24x18;
// -- getter -- 
static std::string get_BITMAP_BTN_CONVERT_FPLN_TO_MISSION_24X18() {
  static const st_bitmap_btn_convert_fpln_to_mission_24x18 instance;
  return instance.getValue();
}
// BITMAP_BTN_CONVERT_FPLN_TO_MISSION_24X18 <---

// ---> BITMAP_BTN_TOOLBAR_SETUP_64x64
typedef struct st_bitmap_btn_toolbar_setup_64x64 {
  std::string value =  "btn_setup_icon_64x64.png"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_bitmap_btn_toolbar_setup_64x64;
// -- getter -- 
static std::string get_BITMAP_BTN_TOOLBAR_SETUP_64x64() {
  static const st_bitmap_btn_toolbar_setup_64x64 instance;
  return instance.getValue();
}
// BITMAP_BTN_TOOLBAR_SETUP_64x64 <---

// ---> BITMAP_BTN_QUIT_48x48
typedef struct st_bitmap_btn_quit_48x48 {
  std::string value =  "btn_quit_48x48.png"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_bitmap_btn_quit_48x48;
// -- getter -- 
static std::string get_BITMAP_BTN_QUIT_48x48() {
  static const st_bitmap_btn_quit_48x48 instance;
  return instance.getValue();
}
// BITMAP_BTN_QUIT_48x48 <---

// ---> BITMAP_BTN_SAVE_48x48
typedef struct st_bitmap_btn_save_48x48 {
  std::string value =  "btn_save_48x48.png"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_bitmap_btn_save_48x48;
// -- getter -- 
static std::string get_BITMAP_BTN_SAVE_48x48() {
  static const st_bitmap_btn_save_48x48 instance;
  return instance.getValue();
}
// BITMAP_BTN_SAVE_48x48 <---

// ---> BITMAP_BTN_ABOUT_64x64
typedef struct st_bitmap_btn_about_64x64 {
  std::string value =  "btn_about_64x64.png"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_bitmap_btn_about_64x64;
// -- getter -- 
static std::string get_BITMAP_BTN_ABOUT_64x64() {
  static const st_bitmap_btn_about_64x64 instance;
  return instance.getValue();
}
// BITMAP_BTN_ABOUT_64x64 <---

// ---> BITMAP_BTN_NAV_24x18
typedef struct st_bitmap_btn_nav_24x18 {
  std::string value =  "btn_nav_24x18.png"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_bitmap_btn_nav_24x18;
// -- getter -- 
static std::string get_BITMAP_BTN_NAV_24x18() {
  static const st_bitmap_btn_nav_24x18 instance;
  return instance.getValue();
}
// BITMAP_BTN_NAV_24x18 <---

// ---> BITMAP_FMOD_LOGO
typedef struct st_bitmap_fmod_logo {
  std::string value =  "fmod_logo.jpg"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_bitmap_fmod_logo;
// -- getter -- 
static std::string get_BITMAP_FMOD_LOGO() {
  static const st_bitmap_fmod_logo instance;
  return instance.getValue();
}
// BITMAP_FMOD_LOGO <---

// ---> BITMAP_BTN_WARN_SMALL_32x28
typedef struct st_bitmap_btn_warn_small_32x28 {
  std::string value =  "btn_warn_small_32x28.png"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_bitmap_btn_warn_small_32x28;
// -- getter -- 
static std::string get_BITMAP_BTN_WARN_SMALL_32x28() {
  static const st_bitmap_btn_warn_small_32x28 instance;
  return instance.getValue();
}
// BITMAP_BTN_WARN_SMALL_32x28 <---

// ---> BITMAP_BTN_NAVINFO
typedef struct st_bitmap_btn_navinfo {
  std::string value =  "btn_navinfo.png"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_bitmap_btn_navinfo;
// -- getter -- 
static std::string get_BITMAP_BTN_NAVINFO() {
  static const st_bitmap_btn_navinfo instance;
  return instance.getValue();
}
// BITMAP_BTN_NAVINFO <---

// ---> BITMAP_BTN_SIMBRIEF_ICO
typedef struct st_bitmap_btn_simbrief_ico {
  std::string value =  "simbrief_64x64.png"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_bitmap_btn_simbrief_ico;
// -- getter -- 
static std::string get_BITMAP_BTN_SIMBRIEF_ICO() {
  static const st_bitmap_btn_simbrief_ico instance;
  return instance.getValue();
}
// BITMAP_BTN_SIMBRIEF_ICO <---

// ---> BITMAP_BTN_SIMBRIEF_BIG
typedef struct st_bitmap_btn_simbrief_big {
  std::string value =  "simbrief_256.png"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_bitmap_btn_simbrief_big;
// -- getter -- 
static std::string get_BITMAP_BTN_SIMBRIEF_BIG() {
  static const st_bitmap_btn_simbrief_big instance;
  return instance.getValue();
}
// BITMAP_BTN_SIMBRIEF_BIG <---

// ---> BITMAP_BTN_FLIGHTPLANDB
typedef struct st_bitmap_btn_flightplandb {
  std::string value =  "flightplandb_256.png"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_bitmap_btn_flightplandb;
// -- getter -- 
static std::string get_BITMAP_BTN_FLIGHTPLANDB() {
  static const st_bitmap_btn_flightplandb instance;
  return instance.getValue();
}
// BITMAP_BTN_FLIGHTPLANDB <---


// ---> WHITE
typedef struct st_white {
  std::string value =  "white";
[[nodiscard]]  std::string getValue() const { return value; }
} st_white;
// -- getter -- 
static std::string get_WHITE() {
  static const st_white instance;
  return instance.getValue();
}
// WHITE <---

// ---> RED
typedef struct st_red {
  std::string value =  "red";
[[nodiscard]]  std::string getValue() const { return value; }
} st_red;
// -- getter -- 
static std::string get_RED() {
  static const st_red instance;
  return instance.getValue();
}
// RED <---

// ---> YELLOW
typedef struct st_yellow {
  std::string value =  "yellow";
[[nodiscard]]  std::string getValue() const { return value; }
} st_yellow;
// -- getter -- 
static std::string get_YELLOW() {
  static const st_yellow instance;
  return instance.getValue();
}
// YELLOW <---

// ---> GREEN
typedef struct st_green {
  std::string value =  "green";
[[nodiscard]]  std::string getValue() const { return value; }
} st_green;
// -- getter -- 
static std::string get_GREEN() {
  static const st_green instance;
  return instance.getValue();
}
// GREEN <---

// ---> ORANGE
typedef struct st_orange {
  std::string value =  "orange";
[[nodiscard]]  std::string getValue() const { return value; }
} st_orange;
// -- getter -- 
static std::string get_ORANGE() {
  static const st_orange instance;
  return instance.getValue();
}
// ORANGE <---

// ---> PURPLE
typedef struct st_purple {
  std::string value =  "purple";
[[nodiscard]]  std::string getValue() const { return value; }
} st_purple;
// -- getter -- 
static std::string get_PURPLE() {
  static const st_purple instance;
  return instance.getValue();
}
// PURPLE <---

// ---> BLUE
typedef struct st_blue {
  std::string value =  "blue";
[[nodiscard]]  std::string getValue() const { return value; }
} st_blue;
// -- getter -- 
static std::string get_BLUE() {
  static const st_blue instance;
  return instance.getValue();
}
// BLUE <---

// ---> BLACK
typedef struct st_black {
  std::string value =  "black";
[[nodiscard]]  std::string getValue() const { return value; }
} st_black;
// -- getter -- 
static std::string get_BLACK() {
  static const st_black instance;
  return instance.getValue();
}
// BLACK <---

// ---> MXPAD_SELECTION_DELIMITER
typedef struct st_mxpad_selection_delimiter {
  std::string value =  "#SEL#";
[[nodiscard]]  std::string getValue() const { return value; }
} st_mxpad_selection_delimiter;
// -- getter -- 
static std::string get_MXPAD_SELECTION_DELIMITER() {
  static const st_mxpad_selection_delimiter instance;
  return instance.getValue();
}
// MXPAD_SELECTION_DELIMITER <---


// ---> ATTRIB_USE_TRIGGER_NAME_FROM_TEMPLATE
typedef struct st_attrib_use_trigger_name_from_template {
  std::string value =  "use_trigger_from_template"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_attrib_use_trigger_name_from_template;
// -- getter -- 
static std::string get_ATTRIB_USE_TRIGGER_NAME_FROM_TEMPLATE() {
  static const st_attrib_use_trigger_name_from_template instance;
  return instance.getValue();
}
// ATTRIB_USE_TRIGGER_NAME_FROM_TEMPLATE <---

// ---> ATTRIB_ADD_TASKS_FROM_TEMPLATE
typedef struct st_attrib_add_tasks_from_template {
  std::string value =  "add_tasks_from_template"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_attrib_add_tasks_from_template;
// -- getter -- 
static std::string get_ATTRIB_ADD_TASKS_FROM_TEMPLATE() {
  static const st_attrib_add_tasks_from_template instance;
  return instance.getValue();
}
// ATTRIB_ADD_TASKS_FROM_TEMPLATE <---

// ---> ATTRIB_ADD_MESSAGES_FROM_TEMPLATE
typedef struct st_attrib_add_messages_from_template {
  std::string value =  "add_messages_from_template"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_attrib_add_messages_from_template;
// -- getter -- 
static std::string get_ATTRIB_ADD_MESSAGES_FROM_TEMPLATE() {
  static const st_attrib_add_messages_from_template instance;
  return instance.getValue();
}
// ATTRIB_ADD_MESSAGES_FROM_TEMPLATE <---

// ---> ATTRIB_ADD_TRIGGERS_FROM_TEMPLATE
typedef struct st_attrib_add_triggers_from_template {
  std::string value =  "add_triggers_from_template"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_attrib_add_triggers_from_template;
// -- getter -- 
static std::string get_ATTRIB_ADD_TRIGGERS_FROM_TEMPLATE() {
  static const st_attrib_add_triggers_from_template instance;
  return instance.getValue();
}
// ATTRIB_ADD_TRIGGERS_FROM_TEMPLATE <---

// ---> ATTRIB_ADD_SCRIPTS_FROM_TEMPLATE
typedef struct st_attrib_add_scripts_from_template {
  std::string value =  "add_scripts_from_template"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_attrib_add_scripts_from_template;
// -- getter -- 
static std::string get_ATTRIB_ADD_SCRIPTS_FROM_TEMPLATE() {
  static const st_attrib_add_scripts_from_template instance;
  return instance.getValue();
}
// ATTRIB_ADD_SCRIPTS_FROM_TEMPLATE <---

// ---> ATTRIB_LOCATION_TYPE
typedef struct st_attrib_location_type {
  std::string value =  "location_type";
[[nodiscard]]  std::string getValue() const { return value; }
} st_attrib_location_type;
// -- getter -- 
static std::string get_ATTRIB_LOCATION_TYPE() {
  static const st_attrib_location_type instance;
  return instance.getValue();
}
// ATTRIB_LOCATION_TYPE <---

// ---> ATTRIB_LOCATION_VALUE
typedef struct st_attrib_location_value {
  std::string value =  "location_value";
[[nodiscard]]  std::string getValue() const { return value; }
} st_attrib_location_value;
// -- getter -- 
static std::string get_ATTRIB_LOCATION_VALUE() {
  static const st_attrib_location_value instance;
  return instance.getValue();
}
// ATTRIB_LOCATION_VALUE <---

// ---> ATTRIB_EXPECTED_LAND_ON
typedef struct st_attrib_expected_land_on {
  std::string value =  "expected_land_on";
[[nodiscard]]  std::string getValue() const { return value; }
} st_attrib_expected_land_on;
// -- getter -- 
static std::string get_ATTRIB_EXPECTED_LAND_ON() {
  static const st_attrib_expected_land_on instance;
  return instance.getValue();
}
// ATTRIB_EXPECTED_LAND_ON <---

// ---> ELEMENT_TEMPLATE
typedef struct st_element_template {
  std::string value =  "TEMPLATE";
[[nodiscard]]  std::string getValue() const { return value; }
} st_element_template;
// -- getter -- 
static std::string get_ELEMENT_TEMPLATE() {
  static const st_element_template instance;
  return instance.getValue();
}
// ELEMENT_TEMPLATE <---

// ---> ATTRIB_TEMPLATE
typedef struct st_attrib_template {
  std::string value =  "template";
[[nodiscard]]  std::string getValue() const { return value; }
} st_attrib_template;
// -- getter -- 
static std::string get_ATTRIB_TEMPLATE() {
  static const st_attrib_template instance;
  return instance.getValue();
}
// ATTRIB_TEMPLATE <---

// ---> ELEMENT_BRIEFER_AND_START_LOCATION
typedef struct st_element_briefer_and_start_location {
  std::string value =  "briefer_and_start_location";
[[nodiscard]]  std::string getValue() const { return value; }
} st_element_briefer_and_start_location;
// -- getter -- 
static std::string get_ELEMENT_BRIEFER_AND_START_LOCATION() {
  static const st_element_briefer_and_start_location instance;
  return instance.getValue();
}
// ELEMENT_BRIEFER_AND_START_LOCATION <---

// ---> ELEMENT_EXPECTED_LOCATION
typedef struct st_element_expected_location {
  std::string value =  "expected_location";
[[nodiscard]]  std::string getValue() const { return value; }
} st_element_expected_location;
// -- getter -- 
static std::string get_ELEMENT_EXPECTED_LOCATION() {
  static const st_element_expected_location instance;
  return instance.getValue();
}
// ELEMENT_EXPECTED_LOCATION <---

// ---> ATTRIB_PLANE_TYPE
typedef struct st_attrib_plane_type {
  std::string value =  "plane_type"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_attrib_plane_type;
// -- getter -- 
static std::string get_ATTRIB_PLANE_TYPE() {
  static const st_attrib_plane_type instance;
  return instance.getValue();
}
// ATTRIB_PLANE_TYPE <---

// ---> PLANE_TYPE_HELOS
typedef struct st_plane_type_helos {
  std::string value =  "helos"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_plane_type_helos;
// -- getter -- 
static std::string get_PLANE_TYPE_HELOS() {
  static const st_plane_type_helos instance;
  return instance.getValue();
}
// PLANE_TYPE_HELOS <---

// ---> PLANE_TYPE_JETS
typedef struct st_plane_type_jets {
  std::string value =  "jets"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_plane_type_jets;
// -- getter -- 
static std::string get_PLANE_TYPE_JETS() {
  static const st_plane_type_jets instance;
  return instance.getValue();
}
// PLANE_TYPE_JETS <---

// ---> PLANE_TYPE_PROPS
typedef struct st_plane_type_props {
  std::string value =  "props"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_plane_type_props;
// -- getter -- 
static std::string get_PLANE_TYPE_PROPS() {
  static const st_plane_type_props instance;
  return instance.getValue();
}
// PLANE_TYPE_PROPS <---

// ---> PLANE_TYPE_TURBOPROPS
typedef struct st_plane_type_turboprops {
  std::string value =  "turboprops"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_plane_type_turboprops;
// -- getter -- 
static std::string get_PLANE_TYPE_TURBOPROPS() {
  static const st_plane_type_turboprops instance;
  return instance.getValue();
}
// PLANE_TYPE_TURBOPROPS <---

// ---> PLANE_TYPE_HEAVY
typedef struct st_plane_type_heavy {
  std::string value =  "heavy"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_plane_type_heavy;
// -- getter -- 
static std::string get_PLANE_TYPE_HEAVY() {
  static const st_plane_type_heavy instance;
  return instance.getValue();
}
// PLANE_TYPE_HEAVY <---

// ---> ELEMENT_CONTENT
typedef struct st_element_content {
  std::string value =  "content"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_element_content;
// -- getter -- 
static std::string get_ELEMENT_CONTENT() {
  static const st_element_content instance;
  return instance.getValue();
}
// ELEMENT_CONTENT <---

// ---> ATTRIB_LIST
typedef struct st_attrib_list {
  std::string value =  "list"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_attrib_list;
// -- getter -- 
static std::string get_ATTRIB_LIST() {
  static const st_attrib_list instance;
  return instance.getValue();
}
// ATTRIB_LIST <---

// ---> LOCATION_TYPE_SAME_AS
typedef struct st_location_type_same_as {
  std::string value =  "same_as"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_location_type_same_as;
// -- getter -- 
static std::string get_LOCATION_TYPE_SAME_AS() {
  static const st_location_type_same_as instance;
  return instance.getValue();
}
// LOCATION_TYPE_SAME_AS <---

// ---> FL_TEMPLATE_VAL_START
typedef struct st_fl_template_val_start {
  std::string value =  "start"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_fl_template_val_start;
// -- getter -- 
static std::string get_FL_TEMPLATE_VAL_START() {
  static const st_fl_template_val_start instance;
  return instance.getValue();
}
// FL_TEMPLATE_VAL_START <---

// ---> FL_TEMPLATE_VAL_LAND
typedef struct st_fl_template_val_land {
  std::string value =  "land"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_fl_template_val_land;
// -- getter -- 
static std::string get_FL_TEMPLATE_VAL_LAND() {
  static const st_fl_template_val_land instance;
  return instance.getValue();
}
// FL_TEMPLATE_VAL_LAND <---

// ---> FL_TEMPLATE_VAL_HOVER
typedef struct st_fl_template_val_hover {
  std::string value =  "hover"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_fl_template_val_hover;
// -- getter -- 
static std::string get_FL_TEMPLATE_VAL_HOVER() {
  static const st_fl_template_val_hover instance;
  return instance.getValue();
}
// FL_TEMPLATE_VAL_HOVER <---

// ---> FL_TEMPLATE_VAL_LAND_HOVER
typedef struct st_fl_template_val_land_hover {
  std::string value =  "land_hover"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_fl_template_val_land_hover;
// -- getter -- 
static std::string get_FL_TEMPLATE_VAL_LAND_HOVER() {
  static const st_fl_template_val_land_hover instance;
  return instance.getValue();
}
// FL_TEMPLATE_VAL_LAND_HOVER <---

// ---> FL_TEMPLATE_VAL_DELIVER
typedef struct st_fl_template_val_deliver {
  std::string value =  "deliver"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_fl_template_val_deliver;
// -- getter -- 
static std::string get_FL_TEMPLATE_VAL_DELIVER() {
  static const st_fl_template_val_deliver instance;
  return instance.getValue();
}
// FL_TEMPLATE_VAL_DELIVER <---

// ---> EXPECTED_LOCATION_TYPE_ICAO
typedef struct st_expected_location_type_icao {
  std::string value =  "icao"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_expected_location_type_icao;
// -- getter -- 
static std::string get_EXPECTED_LOCATION_TYPE_ICAO() {
  static const st_expected_location_type_icao instance;
  return instance.getValue();
}
// EXPECTED_LOCATION_TYPE_ICAO <---

// ---> EXPECTED_LOCATION_TYPE_XY
typedef struct st_expected_location_type_xy {
  std::string value =  "xy"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_expected_location_type_xy;
// -- getter -- 
static std::string get_EXPECTED_LOCATION_TYPE_XY() {
  static const st_expected_location_type_xy instance;
  return instance.getValue();
}
// EXPECTED_LOCATION_TYPE_XY <---

// ---> EXPECTED_LOCATION_TYPE_OILRIG
typedef struct st_expected_location_type_oilrig {
  std::string value =  "oilrig"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_expected_location_type_oilrig;
// -- getter -- 
static std::string get_EXPECTED_LOCATION_TYPE_OILRIG() {
  static const st_expected_location_type_oilrig instance;
  return instance.getValue();
}
// EXPECTED_LOCATION_TYPE_OILRIG <---

// ---> EXPECTED_LOCATION_TYPE_OSM
typedef struct st_expected_location_type_osm {
  std::string value =  "osm"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_expected_location_type_osm;
// -- getter -- 
static std::string get_EXPECTED_LOCATION_TYPE_OSM() {
  static const st_expected_location_type_osm instance;
  return instance.getValue();
}
// EXPECTED_LOCATION_TYPE_OSM <---

// ---> EXPECTED_LOCATION_TYPE_WEBOSM
typedef struct st_expected_location_type_webosm {
  std::string value =  "webosm"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_expected_location_type_webosm;
// -- getter -- 
static std::string get_EXPECTED_LOCATION_TYPE_WEBOSM() {
  static const st_expected_location_type_webosm instance;
  return instance.getValue();
}
// EXPECTED_LOCATION_TYPE_WEBOSM <---

// ---> EXPECTED_LOCATION_TYPE_NEAR
typedef struct st_expected_location_type_near {
  std::string value =  "near"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_expected_location_type_near;
// -- getter -- 
static std::string get_EXPECTED_LOCATION_TYPE_NEAR() {
  static const st_expected_location_type_near instance;
  return instance.getValue();
}
// EXPECTED_LOCATION_TYPE_NEAR <---

// ---> ELEMENT_ICAO
typedef struct st_element_icao {
  std::string value =  "icao"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_element_icao;
// -- getter -- 
static std::string get_ELEMENT_ICAO() {
  static const st_element_icao instance;
  return instance.getValue();
}
// ELEMENT_ICAO <---

// ---> ATTRIB_ICAO_ID
typedef struct st_attrib_icao_id {
  std::string value =  "icao_id"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_attrib_icao_id;
// -- getter -- 
static std::string get_ATTRIB_ICAO_ID() {
  static const st_attrib_icao_id instance;
  return instance.getValue();
}
// ATTRIB_ICAO_ID <---

// ---> ATTRIB_AP_NAME
typedef struct st_attrib_ap_name {
  std::string value =  "ap_name"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_attrib_ap_name;
// -- getter -- 
static std::string get_ATTRIB_AP_NAME() {
  static const st_attrib_ap_name instance;
  return instance.getValue();
}
// ATTRIB_AP_NAME <---

// ---> ATTRIB_NAVREF
typedef struct st_attrib_navref {
  std::string value =  "navref"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_attrib_navref;
// -- getter -- 
static std::string get_ATTRIB_NAVREF() {
  static const st_attrib_navref instance;
  return instance.getValue();
}
// ATTRIB_NAVREF <---

// ---> ATTRIB_NAV_TYPE
typedef struct st_attrib_nav_type {
  std::string value =  "nav_type"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_attrib_nav_type;
// -- getter -- 
static std::string get_ATTRIB_NAV_TYPE() {
  static const st_attrib_nav_type instance;
  return instance.getValue();
}
// ATTRIB_NAV_TYPE <---

// ---> ATTRIB_DISP_FMS_ENTRY
typedef struct st_attrib_disp_fms_entry {
  std::string value =  "displayed_fms_entry"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_attrib_disp_fms_entry;
// -- getter -- 
static std::string get_ATTRIB_DISP_FMS_ENTRY() {
  static const st_attrib_disp_fms_entry instance;
  return instance.getValue();
}
// ATTRIB_DISP_FMS_ENTRY <---


// ---> GENERATE_TYPE_MEDEVAC
typedef struct st_generate_type_medevac {
  std::string value =  "medevac";
[[nodiscard]]  std::string getValue() const { return value; }
} st_generate_type_medevac;
// -- getter -- 
static std::string get_GENERATE_TYPE_MEDEVAC() {
  static const st_generate_type_medevac instance;
  return instance.getValue();
}
// GENERATE_TYPE_MEDEVAC <---

// ---> GENERATE_TYPE_DELIVERY
typedef struct st_generate_type_delivery {
  std::string value =  "delivery"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_generate_type_delivery;
// -- getter -- 
static std::string get_GENERATE_TYPE_DELIVERY() {
  static const st_generate_type_delivery instance;
  return instance.getValue();
}
// GENERATE_TYPE_DELIVERY <---

// ---> GENERATE_TYPE_CARGO
typedef struct st_generate_type_cargo {
  std::string value =  "cargo"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_generate_type_cargo;
// -- getter -- 
static std::string get_GENERATE_TYPE_CARGO() {
  static const st_generate_type_cargo instance;
  return instance.getValue();
}
// GENERATE_TYPE_CARGO <---

// ---> GENERATE_TYPE_OILRIG_MED
typedef struct st_generate_type_oilrig_med {
  std::string value =  "oilrig_med"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_generate_type_oilrig_med;
// -- getter -- 
static std::string get_GENERATE_TYPE_OILRIG_MED() {
  static const st_generate_type_oilrig_med instance;
  return instance.getValue();
}
// GENERATE_TYPE_OILRIG_MED <---

// ---> GENERATE_TYPE_OILRIG_CARGO
typedef struct st_generate_type_oilrig_cargo {
  std::string value =  "oilrig_cargo"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_generate_type_oilrig_cargo;
// -- getter -- 
static std::string get_GENERATE_TYPE_OILRIG_CARGO() {
  static const st_generate_type_oilrig_cargo instance;
  return instance.getValue();
}
// GENERATE_TYPE_OILRIG_CARGO <---

// ---> ELEMENT_CARGO
typedef struct st_element_cargo {
  std::string value =  "cargo"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_element_cargo;
// -- getter -- 
static std::string get_ELEMENT_CARGO() {
  static const st_element_cargo instance;
  return instance.getValue();
}
// ELEMENT_CARGO <---

// ---> DEFAULT_RANDOM_IMAGE_FILE
typedef struct st_default_random_image_file {
  std::string value =  "random.png"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_default_random_image_file;
// -- getter -- 
static std::string get_DEFAULT_RANDOM_IMAGE_FILE() {
  static const st_default_random_image_file instance;
  return instance.getValue();
}
// DEFAULT_RANDOM_IMAGE_FILE <---

// ---> TERRAIN_TYPE_MEDEVAC_SLOPE
typedef struct st_terrain_type_medevac_slope {
  std::string value =  "medevac_slope"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_terrain_type_medevac_slope;
// -- getter -- 
static std::string get_TERRAIN_TYPE_MEDEVAC_SLOPE() {
  static const st_terrain_type_medevac_slope instance;
  return instance.getValue();
}
// TERRAIN_TYPE_MEDEVAC_SLOPE <---

// ---> ATTRIB_RADIUS_MT
typedef struct st_attrib_radius_mt {
  std::string value =  "radius_mt"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_attrib_radius_mt;
// -- getter -- 
static std::string get_ATTRIB_RADIUS_MT() {
  static const st_attrib_radius_mt instance;
  return instance.getValue();
}
// ATTRIB_RADIUS_MT <---

// ---> ATTRIB_LOC_DESC
typedef struct st_attrib_loc_desc {
  std::string value =  "loc_desc"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_attrib_loc_desc;
// -- getter -- 
static std::string get_ATTRIB_LOC_DESC() {
  static const st_attrib_loc_desc instance;
  return instance.getValue();
}
// ATTRIB_LOC_DESC <---

// ---> ATTRIB_RANDOM_TAG
typedef struct st_attrib_random_tag {
  std::string value =  "random_tag"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_attrib_random_tag;
// -- getter -- 
static std::string get_ATTRIB_RANDOM_TAG() {
  static const st_attrib_random_tag instance;
  return instance.getValue();
}
// ATTRIB_RANDOM_TAG <---

// ---> ATTRIB_SET_NAME
typedef struct st_attrib_set_name {
  std::string value =  "set_name"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_attrib_set_name;
// -- getter -- 
static std::string get_ATTRIB_SET_NAME() {
  static const st_attrib_set_name instance;
  return instance.getValue();
}
// ATTRIB_SET_NAME <---

// ---> ATTRIB_RANDOM_WATER_TAG
typedef struct st_attrib_random_water_tag {
  std::string value =  "random_water_tag"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_attrib_random_water_tag;
// -- getter -- 
static std::string get_ATTRIB_RANDOM_WATER_TAG() {
  static const st_attrib_random_water_tag instance;
  return instance.getValue();
}
// ATTRIB_RANDOM_WATER_TAG <---

// ---> ATTRIB_RELATIVE_POS_BEARING_DEG_DISTANCE_MT
typedef struct st_attrib_relative_pos_bearing_deg_distance_mt {
  std::string value =  "relative_pos_bearing_deg_distance_mt"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_attrib_relative_pos_bearing_deg_distance_mt;
// -- getter -- 
static std::string get_ATTRIB_RELATIVE_POS_BEARING_DEG_DISTANCE_MT() {
  static const st_attrib_relative_pos_bearing_deg_distance_mt instance;
  return instance.getValue();
}
// ATTRIB_RELATIVE_POS_BEARING_DEG_DISTANCE_MT <---

// ---> ATTRIB_DEBUG_RELATIVE_POS
typedef struct st_attrib_debug_relative_pos {
  std::string value =  "debug_relative_pos"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_attrib_debug_relative_pos;
// -- getter -- 
static std::string get_ATTRIB_DEBUG_RELATIVE_POS() {
  static const st_attrib_debug_relative_pos instance;
  return instance.getValue();
}
// ATTRIB_DEBUG_RELATIVE_POS <---

// ---> ATTRIB_EXCLUDE_OBJ
typedef struct st_attrib_exclude_obj {
  std::string value =  "exclude_obj"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_attrib_exclude_obj;
// -- getter -- 
static std::string get_ATTRIB_EXCLUDE_OBJ() {
  static const st_attrib_exclude_obj instance;
  return instance.getValue();
}
// ATTRIB_EXCLUDE_OBJ <---

// ---> ATTRIB_INCLUDE_OBJ
typedef struct st_attrib_include_obj {
  std::string value =  "include_obj"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_attrib_include_obj;
// -- getter -- 
static std::string get_ATTRIB_INCLUDE_OBJ() {
  static const st_attrib_include_obj instance;
  return instance.getValue();
}
// ATTRIB_INCLUDE_OBJ <---

// ---> PROP_IS_WET
typedef struct st_prop_is_wet {
  std::string value =  "is_wet"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_prop_is_wet;
// -- getter -- 
static std::string get_PROP_IS_WET() {
  static const st_prop_is_wet instance;
  return instance.getValue();
}
// PROP_IS_WET <---

// ---> PROP_FOUND_ICAO
typedef struct st_prop_found_icao {
  std::string value =  "found_icao"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_prop_found_icao;
// -- getter -- 
static std::string get_PROP_FOUND_ICAO() {
  static const st_prop_found_icao instance;
  return instance.getValue();
}
// PROP_FOUND_ICAO <---

// ---> ATTRIB_LIMIT_TO_TERRAIN_SLOPE
typedef struct st_attrib_limit_to_terrain_slope {
  std::string value =  "limit_to_terrain_slope"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_attrib_limit_to_terrain_slope;
// -- getter -- 
static std::string get_ATTRIB_LIMIT_TO_TERRAIN_SLOPE() {
  static const st_attrib_limit_to_terrain_slope instance;
  return instance.getValue();
}
// ATTRIB_LIMIT_TO_TERRAIN_SLOPE <---

// ---> ATTRIB_IS_SET_OF_FLIGHT_LEGS
typedef struct st_attrib_is_set_of_flight_legs {
  std::string value =  "is_set_of_flight_legs"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_attrib_is_set_of_flight_legs;
// -- getter -- 
static std::string get_ATTRIB_IS_SET_OF_FLIGHT_LEGS() {
  static const st_attrib_is_set_of_flight_legs instance;
  return instance.getValue();
}
// ATTRIB_IS_SET_OF_FLIGHT_LEGS <---

// ---> ATTRIB_COPY_LEG_AS_IS_B
typedef struct st_attrib_copy_leg_as_is_b {
  std::string value =  "copy_leg_as_is_b"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_attrib_copy_leg_as_is_b;
// -- getter -- 
static std::string get_ATTRIB_COPY_LEG_AS_IS_B() {
  static const st_attrib_copy_leg_as_is_b instance;
  return instance.getValue();
}
// ATTRIB_COPY_LEG_AS_IS_B <---

// ---> ATTRIB_IS_RANDOM_COORDINATES
typedef struct st_attrib_is_random_coordinates {
  std::string value =  "is_random_coordinates"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_attrib_is_random_coordinates;
// -- getter -- 
static std::string get_ATTRIB_IS_RANDOM_COORDINATES() {
  static const st_attrib_is_random_coordinates instance;
  return instance.getValue();
}
// ATTRIB_IS_RANDOM_COORDINATES <---

// ---> ATTRIB_POI_TAG
typedef struct st_attrib_poi_tag {
  std::string value =  "poi_tag"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_attrib_poi_tag;
// -- getter -- 
static std::string get_ATTRIB_POI_TAG() {
  static const st_attrib_poi_tag instance;
  return instance.getValue();
}
// ATTRIB_POI_TAG <---

// ---> ATTRIB_BASE_ON_EXTERNAL_PLUGIN
typedef struct st_attrib_base_on_external_plugin {
  std::string value =  "base_on_external_plugin"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_attrib_base_on_external_plugin;
// -- getter -- 
static std::string get_ATTRIB_BASE_ON_EXTERNAL_PLUGIN() {
  static const st_attrib_base_on_external_plugin instance;
  return instance.getValue();
}
// ATTRIB_BASE_ON_EXTERNAL_PLUGIN <---

// ---> ATTRIB_HOVER_TIME_SEC_RANDOM
typedef struct st_attrib_hover_time_sec_random {
  std::string value =  "hover_time_sec_random"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_attrib_hover_time_sec_random;
// -- getter -- 
static std::string get_ATTRIB_HOVER_TIME_SEC_RANDOM() {
  static const st_attrib_hover_time_sec_random instance;
  return instance.getValue();
}
// ATTRIB_HOVER_TIME_SEC_RANDOM <---

// ---> ATTRIB_DEFAULT_RANDOM_HOVER_TIME
typedef struct st_attrib_default_random_hover_time {
  std::string value =  "10-30"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_attrib_default_random_hover_time;
// -- getter -- 
static std::string get_ATTRIB_DEFAULT_RANDOM_HOVER_TIME() {
  static const st_attrib_default_random_hover_time instance;
  return instance.getValue();
}
// ATTRIB_DEFAULT_RANDOM_HOVER_TIME <---

// ---> ATTRIB_CUSTOM_FLIGHT_LEG_DESC_FLAG
typedef struct st_attrib_custom_flight_leg_desc_flag {
  std::string value =  "custom_flight_leg_desc_flag"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_attrib_custom_flight_leg_desc_flag;
// -- getter -- 
static std::string get_ATTRIB_CUSTOM_FLIGHT_LEG_DESC_FLAG() {
  static const st_attrib_custom_flight_leg_desc_flag instance;
  return instance.getValue();
}
// ATTRIB_CUSTOM_FLIGHT_LEG_DESC_FLAG <---

// ---> ATTRIB_FORCE_TEMPLATE_DISTANCES_B
typedef struct st_attrib_force_template_distances_b {
  std::string value =  "force_template_distances_b"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_attrib_force_template_distances_b;
// -- getter -- 
static std::string get_ATTRIB_FORCE_TEMPLATE_DISTANCES_B() {
  static const st_attrib_force_template_distances_b instance;
  return instance.getValue();
}
// ATTRIB_FORCE_TEMPLATE_DISTANCES_B <---

// ---> ATTRIB_IS_SKEWED_POSITION_B
typedef struct st_attrib_is_skewed_position_b {
  std::string value =  "is_skewed_position_b"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_attrib_is_skewed_position_b;
// -- getter -- 
static std::string get_ATTRIB_IS_SKEWED_POSITION_B() {
  static const st_attrib_is_skewed_position_b instance;
  return instance.getValue();
}
// ATTRIB_IS_SKEWED_POSITION_B <---

// ---> ATTRIB_IS_BRIEFER_OR_START_LOCATION_B
typedef struct st_attrib_is_briefer_or_start_location_b {
  std::string value =  "is_briefer_or_start_location_b"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_attrib_is_briefer_or_start_location_b;
// -- getter -- 
static std::string get_ATTRIB_IS_BRIEFER_OR_START_LOCATION_B() {
  static const st_attrib_is_briefer_or_start_location_b instance;
  return instance.getValue();
}
// ATTRIB_IS_BRIEFER_OR_START_LOCATION_B <---

// ---> ATTRIB_SKEWED_NAME
typedef struct st_attrib_skewed_name {
  std::string value =  "skewed_name"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_attrib_skewed_name;
// -- getter -- 
static std::string get_ATTRIB_SKEWED_NAME() {
  static const st_attrib_skewed_name instance;
  return instance.getValue();
}
// ATTRIB_SKEWED_NAME <---

// ---> ATTRIB_REAL_POSITION
typedef struct st_attrib_real_position {
  std::string value =  "real_position"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_attrib_real_position;
// -- getter -- 
static std::string get_ATTRIB_REAL_POSITION() {
  static const st_attrib_real_position instance;
  return instance.getValue();
}
// ATTRIB_REAL_POSITION <---

// ---> ATTRIB_IS_TARGET_POINT_B
typedef struct st_attrib_is_target_point_b {
  std::string value =  "is_target_point_b"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_attrib_is_target_point_b;
// -- getter -- 
static std::string get_ATTRIB_IS_TARGET_POINT_B() {
  static const st_attrib_is_target_point_b instance;
  return instance.getValue();
}
// ATTRIB_IS_TARGET_POINT_B <---



// ---> ATTRIB_PICK_LOCATION_BASED_ON_SAME_TEMPLATE_B
typedef struct st_attrib_pick_location_based_on_same_template_b {
  std::string value =  "pick_location_based_on_same_template_b"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_attrib_pick_location_based_on_same_template_b;
// -- getter -- 
static std::string get_ATTRIB_PICK_LOCATION_BASED_ON_SAME_TEMPLATE_B() {
  static const st_attrib_pick_location_based_on_same_template_b instance;
  return instance.getValue();
}
// ATTRIB_PICK_LOCATION_BASED_ON_SAME_TEMPLATE_B <---

// ---> ATTRIB_MIN_VALID_FLIGHT_LEGS
typedef struct st_attrib_min_valid_flight_legs {
  std::string value =  "min_valid_flight_legs"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_attrib_min_valid_flight_legs;
// -- getter -- 
static std::string get_ATTRIB_MIN_VALID_FLIGHT_LEGS() {
  static const st_attrib_min_valid_flight_legs instance;
  return instance.getValue();
}
// ATTRIB_MIN_VALID_FLIGHT_LEGS <---

// ---> ATTRIB_SKIP_AUTO_TASK_CREATION_B
typedef struct st_attrib_skip_auto_task_creation_b {
  std::string value =  "skip_auto_task_creation_b"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_attrib_skip_auto_task_creation_b;
// -- getter -- 
static std::string get_ATTRIB_SKIP_AUTO_TASK_CREATION_B() {
  static const st_attrib_skip_auto_task_creation_b instance;
  return instance.getValue();
}
// ATTRIB_SKIP_AUTO_TASK_CREATION_B <---

// ---> ATTRIB_FORCE_SLOPED_TERRAIN
typedef struct st_attrib_force_sloped_terrain {
  std::string value =  "force_sloped_terrain"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_attrib_force_sloped_terrain;
// -- getter -- 
static std::string get_ATTRIB_FORCE_SLOPED_TERRAIN() {
  static const st_attrib_force_sloped_terrain instance;
  return instance.getValue();
}
// ATTRIB_FORCE_SLOPED_TERRAIN <---

// ---> ATTRIB_FORCE_LEVELED_TERRAIN
typedef struct st_attrib_force_leveled_terrain {
  std::string value =  "force_leveled_terrain"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_attrib_force_leveled_terrain;
// -- getter -- 
static std::string get_ATTRIB_FORCE_LEVELED_TERRAIN() {
  static const st_attrib_force_leveled_terrain instance;
  return instance.getValue();
}
// ATTRIB_FORCE_LEVELED_TERRAIN <---

// ---> ATTRIB_FORCE_TYPE_OF_TEMPLATE
typedef struct st_attrib_force_type_of_template {
  std::string value =  "force_type_of_template"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_attrib_force_type_of_template;
// -- getter -- 
static std::string get_ATTRIB_FORCE_TYPE_OF_TEMPLATE() {
  static const st_attrib_force_type_of_template instance;
  return instance.getValue();
}
// ATTRIB_FORCE_TYPE_OF_TEMPLATE <---

// ---> ATTRIB_DESIGNER_MAX_SLOPE_TO_LAND
typedef struct st_attrib_designer_max_slope_to_land {
  std::string value =  "max_slope_to_land"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_attrib_designer_max_slope_to_land;
// -- getter -- 
static std::string get_ATTRIB_DESIGNER_MAX_SLOPE_TO_LAND() {
  static const st_attrib_designer_max_slope_to_land instance;
  return instance.getValue();
}
// ATTRIB_DESIGNER_MAX_SLOPE_TO_LAND <---

// ---> PROP_NUMBER_OF_LOOPS_TO_FORCE_TYPE_TEMPLATE
typedef struct st_prop_number_of_loops_to_force_type_template {
  std::string value =  "no_of_loops_to_force_slope"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_prop_number_of_loops_to_force_type_template;
// -- getter -- 
static std::string get_PROP_NUMBER_OF_LOOPS_TO_FORCE_TYPE_TEMPLATE() {
  static const st_prop_number_of_loops_to_force_type_template instance;
  return instance.getValue();
}
// PROP_NUMBER_OF_LOOPS_TO_FORCE_TYPE_TEMPLATE <---

// ---> PROP_IS_LAST_FLIGHT_LEG
typedef struct st_prop_is_last_flight_leg {
  std::string value =  "is_last_flight_leg"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_prop_is_last_flight_leg;
// -- getter -- 
static std::string get_PROP_IS_LAST_FLIGHT_LEG() {
  static const st_prop_is_last_flight_leg instance;
  return instance.getValue();
}
// PROP_IS_LAST_FLIGHT_LEG <---

// ---> APT_1_LAND_AIRPORT_HEADER_CODE_v11_SPACE
typedef struct st_apt_1_land_airport_header_code_v11_space {
  std::string value =  "1 "; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_apt_1_land_airport_header_code_v11_space;
// -- getter -- 
static std::string get_APT_1_LAND_AIRPORT_HEADER_CODE_v11_SPACE() {
  static const st_apt_1_land_airport_header_code_v11_space instance;
  return instance.getValue();
}
// APT_1_LAND_AIRPORT_HEADER_CODE_v11_SPACE <---

// ---> APT_16_SEAPLANE_BASE_HEADER_CODE_v11_SPACE
typedef struct st_apt_16_seaplane_base_header_code_v11_space {
  std::string value =  "16 "; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_apt_16_seaplane_base_header_code_v11_space;
// -- getter -- 
static std::string get_APT_16_SEAPLANE_BASE_HEADER_CODE_v11_SPACE() {
  static const st_apt_16_seaplane_base_header_code_v11_space instance;
  return instance.getValue();
}
// APT_16_SEAPLANE_BASE_HEADER_CODE_v11_SPACE <---

// ---> APT_17_HELIPORT_HEADER_CODE_v11_SPACE
typedef struct st_apt_17_heliport_header_code_v11_space {
  std::string value =  "17 "; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_apt_17_heliport_header_code_v11_space;
// -- getter -- 
static std::string get_APT_17_HELIPORT_HEADER_CODE_v11_SPACE() {
  static const st_apt_17_heliport_header_code_v11_space instance;
  return instance.getValue();
}
// APT_17_HELIPORT_HEADER_CODE_v11_SPACE <---

// ---> APT_1300_RAMP_CODE_v11_SPACE
typedef struct st_apt_1300_ramp_code_v11_space {
  std::string value =  "1300 "; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_apt_1300_ramp_code_v11_space;
// -- getter -- 
static std::string get_APT_1300_RAMP_CODE_v11_SPACE() {
  static const st_apt_1300_ramp_code_v11_space instance;
  return instance.getValue();
}
// APT_1300_RAMP_CODE_v11_SPACE <---

// ---> APT_100_LAND_RW_CODE_v11_SPACE
typedef struct st_apt_100_land_rw_code_v11_space {
  std::string value =  "100 "; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_apt_100_land_rw_code_v11_space;
// -- getter -- 
static std::string get_APT_100_LAND_RW_CODE_v11_SPACE() {
  static const st_apt_100_land_rw_code_v11_space instance;
  return instance.getValue();
}
// APT_100_LAND_RW_CODE_v11_SPACE <---

// ---> APT_101_WATER_RW_CODE_v11_SPACE
typedef struct st_apt_101_water_rw_code_v11_space {
  std::string value =  "101 "; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_apt_101_water_rw_code_v11_space;
// -- getter -- 
static std::string get_APT_101_WATER_RW_CODE_v11_SPACE() {
  static const st_apt_101_water_rw_code_v11_space instance;
  return instance.getValue();
}
// APT_101_WATER_RW_CODE_v11_SPACE <---

// ---> APT_102_HELIPAD_RW_CODE_v11_SPACE
typedef struct st_apt_102_helipad_rw_code_v11_space {
  std::string value =  "102 "; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_apt_102_helipad_rw_code_v11_space;
// -- getter -- 
static std::string get_APT_102_HELIPAD_RW_CODE_v11_SPACE() {
  static const st_apt_102_helipad_rw_code_v11_space instance;
  return instance.getValue();
}
// APT_102_HELIPAD_RW_CODE_v11_SPACE <---

// ---> APT_1_LAND_AIRPORT_HEADER_CODE_v11
typedef struct st_apt_1_land_airport_header_code_v11 {
  std::string value =  "1"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_apt_1_land_airport_header_code_v11;
// -- getter -- 
static std::string get_APT_1_LAND_AIRPORT_HEADER_CODE_v11() {
  static const st_apt_1_land_airport_header_code_v11 instance;
  return instance.getValue();
}
// APT_1_LAND_AIRPORT_HEADER_CODE_v11 <---

// ---> APT_16_SEAPLANE_BASE_HEADER_CODE_v11
typedef struct st_apt_16_seaplane_base_header_code_v11 {
  std::string value =  "16"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_apt_16_seaplane_base_header_code_v11;
// -- getter -- 
static std::string get_APT_16_SEAPLANE_BASE_HEADER_CODE_v11() {
  static const st_apt_16_seaplane_base_header_code_v11 instance;
  return instance.getValue();
}
// APT_16_SEAPLANE_BASE_HEADER_CODE_v11 <---

// ---> APT_17_HELIPORT_HEADER_CODE_v11
typedef struct st_apt_17_heliport_header_code_v11 {
  std::string value =  "17"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_apt_17_heliport_header_code_v11;
// -- getter -- 
static std::string get_APT_17_HELIPORT_HEADER_CODE_v11() {
  static const st_apt_17_heliport_header_code_v11 instance;
  return instance.getValue();
}
// APT_17_HELIPORT_HEADER_CODE_v11 <---

// ---> APT_1300_RAMP_CODE_v11
typedef struct st_apt_1300_ramp_code_v11 {
  std::string value =  "1300"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_apt_1300_ramp_code_v11;
// -- getter -- 
static std::string get_APT_1300_RAMP_CODE_v11() {
  static const st_apt_1300_ramp_code_v11 instance;
  return instance.getValue();
}
// APT_1300_RAMP_CODE_v11 <---

// ---> APT_100_LAND_RW_CODE_v11
typedef struct st_apt_100_land_rw_code_v11 {
  std::string value =  "100"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_apt_100_land_rw_code_v11;
// -- getter -- 
static std::string get_APT_100_LAND_RW_CODE_v11() {
  static const st_apt_100_land_rw_code_v11 instance;
  return instance.getValue();
}
// APT_100_LAND_RW_CODE_v11 <---

// ---> APT_101_WATER_RW_CODE_v11
typedef struct st_apt_101_water_rw_code_v11 {
  std::string value =  "101"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_apt_101_water_rw_code_v11;
// -- getter -- 
static std::string get_APT_101_WATER_RW_CODE_v11() {
  static const st_apt_101_water_rw_code_v11 instance;
  return instance.getValue();
}
// APT_101_WATER_RW_CODE_v11 <---

// ---> APT_102_HELIPAD_RW_CODE_v11
typedef struct st_apt_102_helipad_rw_code_v11 {
  std::string value =  "102"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_apt_102_helipad_rw_code_v11;
// -- getter -- 
static std::string get_APT_102_HELIPAD_RW_CODE_v11() {
  static const st_apt_102_helipad_rw_code_v11 instance;
  return instance.getValue();
}
// APT_102_HELIPAD_RW_CODE_v11 <---

// ---> ATTRIB_DISTANCE_NM
typedef struct st_attrib_distance_nm {
  std::string value =  "distance_nm"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_attrib_distance_nm;
// -- getter -- 
static std::string get_ATTRIB_DISTANCE_NM() {
  static const st_attrib_distance_nm instance;
  return instance.getValue();
}
// ATTRIB_DISTANCE_NM <---

// ---> ATTRIB_SHARED_TEMPLATE_TYPE
typedef struct st_attrib_shared_template_type {
  std::string value =  "shared_template_type"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_attrib_shared_template_type;
// -- getter -- 
static std::string get_ATTRIB_SHARED_TEMPLATE_TYPE() {
  static const st_attrib_shared_template_type instance;
  return instance.getValue();
}
// ATTRIB_SHARED_TEMPLATE_TYPE <---

// ---> ATTRIB_SHARED_FLIGHT_LEG_TEMPLATE
typedef struct st_attrib_shared_flight_leg_template {
  std::string value =  "shared_flight_leg_template"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_attrib_shared_flight_leg_template;
// -- getter -- 
static std::string get_ATTRIB_SHARED_FLIGHT_LEG_TEMPLATE() {
  static const st_attrib_shared_flight_leg_template instance;
  return instance.getValue();
}
// ATTRIB_SHARED_FLIGHT_LEG_TEMPLATE <---

// ---> ATTRIB_SHARED_GOAL_TEMPLATE
typedef struct st_attrib_shared_goal_template {
  std::string value =  "shared_goal_template"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_attrib_shared_goal_template;
// -- getter -- 
static std::string get_ATTRIB_SHARED_GOAL_TEMPLATE() {
  static const st_attrib_shared_goal_template instance;
  return instance.getValue();
}
// ATTRIB_SHARED_GOAL_TEMPLATE <---

// ---> ATTRIB_TARGET_POS
typedef struct st_attrib_target_pos {
  std::string value =  "target_pos"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_attrib_target_pos;
// -- getter -- 
static std::string get_ATTRIB_TARGET_POS() {
  static const st_attrib_target_pos instance;
  return instance.getValue();
}
// ATTRIB_TARGET_POS <---

// ---> ATTRIB_TASK_TRIGGER_NAME
typedef struct st_attrib_task_trigger_name {
  std::string value =  "task_trigger_name"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_attrib_task_trigger_name;
// -- getter -- 
static std::string get_ATTRIB_TASK_TRIGGER_NAME() {
  static const st_attrib_task_trigger_name instance;
  return instance.getValue();
}
// ATTRIB_TASK_TRIGGER_NAME <---

// ---> ATTRIB_HOVER_TIME
typedef struct st_attrib_hover_time {
  std::string value =  "hover_time"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_attrib_hover_time;
// -- getter -- 
static std::string get_ATTRIB_HOVER_TIME() {
  static const st_attrib_hover_time instance;
  return instance.getValue();
}
// ATTRIB_HOVER_TIME <---

// ---> ATTRIB_DEPENDS_ON
typedef struct st_attrib_depends_on {
  std::string value =  "depends_on"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_attrib_depends_on;
// -- getter -- 
static std::string get_ATTRIB_DEPENDS_ON() {
  static const st_attrib_depends_on instance;
  return instance.getValue();
}
// ATTRIB_DEPENDS_ON <---

// ---> ATTRIB_TERRAIN_SLOPE
typedef struct st_attrib_terrain_slope {
  std::string value =  "terrain_slope"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_attrib_terrain_slope;
// -- getter -- 
static std::string get_ATTRIB_TERRAIN_SLOPE() {
  static const st_attrib_terrain_slope instance;
  return instance.getValue();
}
// ATTRIB_TERRAIN_SLOPE <---

// ---> DEFAULT_HOVER_HEIGHT_FT
typedef struct st_default_hover_height_ft {
  int         value =  static_cast<int> (100 * mxconst::meter2feet);
[[nodiscard]]  int         getValue() const { return value; }
} st_default_hover_height_ft;
// -- getter -- 
static int         get_DEFAULT_HOVER_HEIGHT_FT() {
  static const st_default_hover_height_ft instance;
  return instance.getValue();
}
// DEFAULT_HOVER_HEIGHT_FT <---


// ---> DEFAULT_TEMPLATE_EXPECTED_LOCATION_LAND_ON
typedef struct st_default_template_expected_location_land_on {
  std::string value =  "any";
[[nodiscard]]  std::string getValue() const { return value; }
} st_default_template_expected_location_land_on;
// -- getter -- 
static std::string get_DEFAULT_TEMPLATE_EXPECTED_LOCATION_LAND_ON() {
  static const st_default_template_expected_location_land_on instance;
  return instance.getValue();
}
// DEFAULT_TEMPLATE_EXPECTED_LOCATION_LAND_ON <---

// ---> DEFAULT_TEMPLATE_DELIVERY_EXPECTED_LOCATION_TYPE_VALUE
typedef struct st_default_template_delivery_expected_location_type_value {
  std::string value =  get_EXPECTED_LOCATION_TYPE_ICAO(); 
[[nodiscard]]  std::string getValue() const { return value; }
} st_default_template_delivery_expected_location_type_value;
// -- getter -- 
static std::string get_DEFAULT_TEMPLATE_DELIVERY_EXPECTED_LOCATION_TYPE_VALUE() {
  static const st_default_template_delivery_expected_location_type_value instance;
  return instance.getValue();
}
// DEFAULT_TEMPLATE_DELIVERY_EXPECTED_LOCATION_TYPE_VALUE <---

// ---> EXPECTED_LOCATION_VALUE_DEFAULT_DISTANCE
typedef struct st_expected_location_value_default_distance {
  std::string value =  "30"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_expected_location_value_default_distance;
// -- getter -- 
static std::string get_EXPECTED_LOCATION_VALUE_DEFAULT_DISTANCE() {
  static const st_expected_location_value_default_distance instance;
  return instance.getValue();
}
// EXPECTED_LOCATION_VALUE_DEFAULT_DISTANCE <---

// ---> DEFAULT_INVENTORY_RADIUS_MT
typedef struct st_default_inventory_radius_mt {
  std::string value =  "100"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_default_inventory_radius_mt;
// -- getter -- 
static std::string get_DEFAULT_INVENTORY_RADIUS_MT() {
  static const st_default_inventory_radius_mt instance;
  return instance.getValue();
}
// DEFAULT_INVENTORY_RADIUS_MT <---

// ---> RXP_FPEI_FLIGHT_PLAN_SEGMENT
typedef struct st_rxp_fpei_flight_plan_segment {
  std::string value =  ":F:"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_rxp_fpei_flight_plan_segment;
// -- getter -- 
static std::string get_RXP_FPEI_FLIGHT_PLAN_SEGMENT() {
  static const st_rxp_fpei_flight_plan_segment instance;
  return instance.getValue();
}
// RXP_FPEI_FLIGHT_PLAN_SEGMENT <---

// ---> EXTERNAL_FPLN_FOLDERS_FILE_NAME
typedef struct st_external_fpln_folders_file_name {
  std::string value =  "fpln_folders.ini"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_external_fpln_folders_file_name;
// -- getter -- 
static std::string get_EXTERNAL_FPLN_FOLDERS_FILE_NAME() {
  static const st_external_fpln_folders_file_name instance;
  return instance.getValue();
}
// EXTERNAL_FPLN_FOLDERS_FILE_NAME <---

// ---> EXTERNAL_FPLN_TARGET_FILE_NAME
typedef struct st_external_fpln_target_file_name {
  std::string value =  "missionx_fpln"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_external_fpln_target_file_name;
// -- getter -- 
static std::string get_EXTERNAL_FPLN_TARGET_FILE_NAME() {
  static const st_external_fpln_target_file_name instance;
  return instance.getValue();
}
// EXTERNAL_FPLN_TARGET_FILE_NAME <---


// ---> MAP_IGNORE_PROPS_DURING_IO
typedef struct st_map_ignore_props_during_io {
  std::map<std::string, int> value =  { { get_PROP_ERROR_REASON(), 0 } };
[[nodiscard]]  std::map<std::string, int> getValue() const { return value; }
} st_map_ignore_props_during_io;
// -- getter -- 
static std::map<std::string, int> get_MAP_IGNORE_PROPS_DURING_IO() {
  static const st_map_ignore_props_during_io instance;
  return instance.getValue();
}
// MAP_IGNORE_PROPS_DURING_IO <---


// ---> SETUP_DISPLAY_TARGET_MARKERS
typedef struct st_setup_display_target_markers {
  std::string value =  "setup_display_target_markers"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_setup_display_target_markers;
// -- getter -- 
static std::string get_SETUP_DISPLAY_TARGET_MARKERS() {
  static const st_setup_display_target_markers instance;
  return instance.getValue();
}
// SETUP_DISPLAY_TARGET_MARKERS <---

// ---> SETUP_DISPLAY_TARGET_MARKERS_AWAY_FROM_TARGET
typedef struct st_setup_display_target_markers_away_from_target {
  std::string value =  "setup_display_target_markers_away_from_targets"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_setup_display_target_markers_away_from_target;
// -- getter -- 
static std::string get_SETUP_DISPLAY_TARGET_MARKERS_AWAY_FROM_TARGET() {
  static const st_setup_display_target_markers_away_from_target instance;
  return instance.getValue();
}
// SETUP_DISPLAY_TARGET_MARKERS_AWAY_FROM_TARGET <---

// ---> OPT_OVERRIDE_RANDOM_TARGET_MIN_DISTANCE
typedef struct st_opt_override_random_target_min_distance {
  std::string value =  "opt_override_target_min_distance"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_opt_override_random_target_min_distance;
// -- getter -- 
static std::string get_OPT_OVERRIDE_RANDOM_TARGET_MIN_DISTANCE() {
  static const st_opt_override_random_target_min_distance instance;
  return instance.getValue();
}
// OPT_OVERRIDE_RANDOM_TARGET_MIN_DISTANCE <---

// ---> SETUP_SLIDER_RANDOM_TARGET_MIN_DISTANCE
typedef struct st_setup_slider_random_target_min_distance {
  std::string value =  "setup_slider_med_target_min_distance"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_setup_slider_random_target_min_distance;
// -- getter -- 
static std::string get_SETUP_SLIDER_RANDOM_TARGET_MIN_DISTANCE() {
  static const st_setup_slider_random_target_min_distance instance;
  return instance.getValue();
}
// SETUP_SLIDER_RANDOM_TARGET_MIN_DISTANCE <---

// ---> SETUP_SLIDER_FONT_SCALE_SIZE
typedef struct st_setup_slider_font_scale_size {
  std::string value =  "setup_slider_font_scale_size"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_setup_slider_font_scale_size;
// -- getter -- 
static std::string get_SETUP_SLIDER_FONT_SCALE_SIZE() {
  static const st_setup_slider_font_scale_size instance;
  return instance.getValue();
}
// SETUP_SLIDER_FONT_SCALE_SIZE <---

// ---> SETUP_LOCK_OVERPASS_URL_TO_USER_PICK
typedef struct st_setup_lock_overpass_url_to_user_pick {
  std::string value =  "setup_lock_overpass_url_to_user_pick"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_setup_lock_overpass_url_to_user_pick;
// -- getter -- 
static std::string get_SETUP_LOCK_OVERPASS_URL_TO_USER_PICK() {
  static const st_setup_lock_overpass_url_to_user_pick instance;
  return instance.getValue();
}
// SETUP_LOCK_OVERPASS_URL_TO_USER_PICK <---

// ---> NO_SETUP_TEXT
typedef struct st_no_setup_text {
  std::string value =  "N/An/aN/An/a"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_no_setup_text;
// -- getter -- 
static std::string get_NO_SETUP_TEXT() {
  static const st_no_setup_text instance;
  return instance.getValue();
}
// NO_SETUP_TEXT <---

// ---> SETUP_NORMALIZED_VOLUME
typedef struct st_setup_normalized_volume {
  std::string value =  "setup_normalized_volume"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_setup_normalized_volume;
// -- getter -- 
static std::string get_SETUP_NORMALIZED_VOLUME() {
  static const st_setup_normalized_volume instance;
  return instance.getValue();
}
// SETUP_NORMALIZED_VOLUME <---

// ---> SETUP_SIMBRIEF_PILOT_ID
typedef struct st_setup_simbrief_pilot_id {
  std::string value =  "simbrief_pilot_id"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_setup_simbrief_pilot_id;
// -- getter -- 
static std::string get_SETUP_SIMBRIEF_PILOT_ID() {
  static const st_setup_simbrief_pilot_id instance;
  return instance.getValue();
}
// SETUP_SIMBRIEF_PILOT_ID <---

// ---> SETUP_NORMALIZE_VOLUME_B
typedef struct st_setup_normalize_volume_b {
  std::string value =  "setup_normalize_volume_b"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_setup_normalize_volume_b;
// -- getter -- 
static std::string get_SETUP_NORMALIZE_VOLUME_B() {
  static const st_setup_normalize_volume_b instance;
  return instance.getValue();
}
// SETUP_NORMALIZE_VOLUME_B <---

// ---> SETUP_AUTHORIZATION_KEY
typedef struct st_setup_authorization_key {
  std::string value =  "setup_authorization_key_s"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_setup_authorization_key;
// -- getter -- 
static std::string get_SETUP_AUTHORIZATION_KEY() {
  static const st_setup_authorization_key instance;
  return instance.getValue();
}
// SETUP_AUTHORIZATION_KEY <---





#ifdef LIN
// ---> SETUP_LINUX_FLAVOR_CODE_I
typedef struct st_setup_linux_flavor_code_i {
  std::string value =  "setup_linux_flavor_code_i"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_setup_linux_flavor_code_i;
// -- getter -- 
static std::string get_SETUP_LINUX_FLAVOR_CODE_I() {
  static const st_setup_linux_flavor_code_i instance;
  return instance.getValue();
}
// SETUP_LINUX_FLAVOR_CODE_I <---

#endif

// ---> PROP_FPLN_ID_PICKED
typedef struct st_prop_fpln_id_picked {
  std::string value =  "fpln_id_picked"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_prop_fpln_id_picked;
// -- getter -- 
static std::string get_PROP_FPLN_ID_PICKED() {
  static const st_prop_fpln_id_picked instance;
  return instance.getValue();
}
// PROP_FPLN_ID_PICKED <---

// ---> PROP_MED_CARGO_OR_OILRIG
typedef struct st_prop_med_cargo_or_oilrig {
  std::string value =  "med_cargo_or_oilrig"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_prop_med_cargo_or_oilrig;
// -- getter -- 
static std::string get_PROP_MED_CARGO_OR_OILRIG() {
  static const st_prop_med_cargo_or_oilrig instance;
  return instance.getValue();
}
// PROP_MED_CARGO_OR_OILRIG <---

// ---> PROP_MISSION_SUBCATEGORY
typedef struct st_prop_mission_subcategory {
  std::string value =  "mission_subcategory"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_prop_mission_subcategory;
// -- getter -- 
static std::string get_PROP_MISSION_SUBCATEGORY() {
  static const st_prop_mission_subcategory instance;
  return instance.getValue();
}
// PROP_MISSION_SUBCATEGORY <---

// ---> PROP_MISSION_SUBCATEGORY_LBL
typedef struct st_prop_mission_subcategory_lbl {
  std::string value =  "mission_subcategory_lbl"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_prop_mission_subcategory_lbl;
// -- getter -- 
static std::string get_PROP_MISSION_SUBCATEGORY_LBL() {
  static const st_prop_mission_subcategory_lbl instance;
  return instance.getValue();
}
// PROP_MISSION_SUBCATEGORY_LBL <---

// ---> PROP_STARTING_DAY
typedef struct st_prop_starting_day {
  std::string value =  "starting_day"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_prop_starting_day;
// -- getter -- 
static std::string get_PROP_STARTING_DAY() {
  static const st_prop_starting_day instance;
  return instance.getValue();
}
// PROP_STARTING_DAY <---

// ---> PROP_STARTING_HOUR
typedef struct st_prop_starting_hour {
  std::string value =  "starting_hour"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_prop_starting_hour;
// -- getter -- 
static std::string get_PROP_STARTING_HOUR() {
  static const st_prop_starting_hour instance;
  return instance.getValue();
}
// PROP_STARTING_HOUR <---

// ---> PROP_STARTING_MINUTE
typedef struct st_prop_starting_minute {
  std::string value =  "starting_minutes"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_prop_starting_minute;
// -- getter -- 
static std::string get_PROP_STARTING_MINUTE() {
  static const st_prop_starting_minute instance;
  return instance.getValue();
}
// PROP_STARTING_MINUTE <---

// ---> PROP_PLANE_TYPE_I
typedef struct st_prop_plane_type_i {
  std::string value =  "plane_type_i"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_prop_plane_type_i;
// -- getter -- 
static std::string get_PROP_PLANE_TYPE_I() {
  static const st_prop_plane_type_i instance;
  return instance.getValue();
}
// PROP_PLANE_TYPE_I <---

// ---> PROP_PLANE_TYPE_S
typedef struct st_prop_plane_type_s {
  std::string value =  "plane_type_s"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_prop_plane_type_s;
// -- getter -- 
static std::string get_PROP_PLANE_TYPE_S() {
  static const st_prop_plane_type_s instance;
  return instance.getValue();
}
// PROP_PLANE_TYPE_S <---

// ---> PROP_NO_OF_LEGS
typedef struct st_prop_no_of_legs {
  std::string value =  "no_of_legs"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_prop_no_of_legs;
// -- getter -- 
static std::string get_PROP_NO_OF_LEGS() {
  static const st_prop_no_of_legs instance;
  return instance.getValue();
}
// PROP_NO_OF_LEGS <---

// ---> PROP_MIN_DISTANCE_SLIDER
typedef struct st_prop_min_distance_slider {
  std::string value =  "min_distance_slider"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_prop_min_distance_slider;
// -- getter -- 
static std::string get_PROP_MIN_DISTANCE_SLIDER() {
  static const st_prop_min_distance_slider instance;
  return instance.getValue();
}
// PROP_MIN_DISTANCE_SLIDER <---

// ---> PROP_MAX_DISTANCE_SLIDER
typedef struct st_prop_max_distance_slider {
  std::string value =  "max_distance_slider"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_prop_max_distance_slider;
// -- getter -- 
static std::string get_PROP_MAX_DISTANCE_SLIDER() {
  static const st_prop_max_distance_slider instance;
  return instance.getValue();
}
// PROP_MAX_DISTANCE_SLIDER <---

// ---> PROP_USE_OSM_CHECKBOX
typedef struct st_prop_use_osm_checkbox {
  std::string value =  "random_use_osm_cb"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_prop_use_osm_checkbox;
// -- getter -- 
static std::string get_PROP_USE_OSM_CHECKBOX() {
  static const st_prop_use_osm_checkbox instance;
  return instance.getValue();
}
// PROP_USE_OSM_CHECKBOX <---

// ---> PROP_USE_WEB_OSM_CHECKBOX
typedef struct st_prop_use_web_osm_checkbox {
  std::string value =  "random_use_web_osm_cb"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_prop_use_web_osm_checkbox;
// -- getter -- 
static std::string get_PROP_USE_WEB_OSM_CHECKBOX() {
  static const st_prop_use_web_osm_checkbox instance;
  return instance.getValue();
}
// PROP_USE_WEB_OSM_CHECKBOX <---

// ---> PROP_NARROW_HELOS_RAMP_SEARCH
typedef struct st_prop_narrow_helos_ramp_search {
  std::string value =  "narrow_helos_ramp_search"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_prop_narrow_helos_ramp_search;
// -- getter -- 
static std::string get_PROP_NARROW_HELOS_RAMP_SEARCH() {
  static const st_prop_narrow_helos_ramp_search instance;
  return instance.getValue();
}
// PROP_NARROW_HELOS_RAMP_SEARCH <---

// ---> PROP_ADD_COUNTDOWN
typedef struct st_prop_add_countdown {
  std::string value =  "add_countdown"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_prop_add_countdown;
// -- getter -- 
static std::string get_PROP_ADD_COUNTDOWN() {
  static const st_prop_add_countdown instance;
  return instance.getValue();
}
// PROP_ADD_COUNTDOWN <---

// ---> PROP_START_FROM_PLANE_POSITION
typedef struct st_prop_start_from_plane_position {
  std::string value =  "start_from_plane_position"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_prop_start_from_plane_position;
// -- getter -- 
static std::string get_PROP_START_FROM_PLANE_POSITION() {
  static const st_prop_start_from_plane_position instance;
  return instance.getValue();
}
// PROP_START_FROM_PLANE_POSITION <---

// ---> PROP_GENERATE_GPS_WAYPOINTS
typedef struct st_prop_generate_gps_waypoints {
  std::string value =  "generate_gps_waypoints"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_prop_generate_gps_waypoints;
// -- getter -- 
static std::string get_PROP_GENERATE_GPS_WAYPOINTS() {
  static const st_prop_generate_gps_waypoints instance;
  return instance.getValue();
}
// PROP_GENERATE_GPS_WAYPOINTS <---

// ---> PROP_ADD_ROUTE_WAYPOINTS
typedef struct st_prop_add_route_waypoints {
  std::string value =  "add_route_waypoints"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_prop_add_route_waypoints;
// -- getter -- 
static std::string get_PROP_ADD_ROUTE_WAYPOINTS() {
  static const st_prop_add_route_waypoints instance;
  return instance.getValue();
}
// PROP_ADD_ROUTE_WAYPOINTS <---

// ---> PROP_AUTO_LOAD_ROUTE_TO_GPS_OR_FMS_B
typedef struct st_prop_auto_load_route_to_gps_or_fms_b {
  std::string value =  "auto_load_route_to_gps_or_fms_b"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_prop_auto_load_route_to_gps_or_fms_b;
// -- getter -- 
static std::string get_PROP_AUTO_LOAD_ROUTE_TO_GPS_OR_FMS_B() {
  static const st_prop_auto_load_route_to_gps_or_fms_b instance;
  return instance.getValue();
}
// PROP_AUTO_LOAD_ROUTE_TO_GPS_OR_FMS_B <---

// ---> PROP_FILTER_AIRPORTS_BY_RUNWAY_TYPE
typedef struct st_prop_filter_airports_by_runway_type {
  std::string value =  "filter_airports_by_runway_type"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_prop_filter_airports_by_runway_type;
// -- getter -- 
static std::string get_PROP_FILTER_AIRPORTS_BY_RUNWAY_TYPE() {
  static const st_prop_filter_airports_by_runway_type instance;
  return instance.getValue();
}
// PROP_FILTER_AIRPORTS_BY_RUNWAY_TYPE <---

// ---> PROP_REMOVE_DUPLICATE_ICAO_ROWS
typedef struct st_prop_remove_duplicate_icao_rows {
  std::string value =  "remove_duplicate_icao_rows"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_prop_remove_duplicate_icao_rows;
// -- getter -- 
static std::string get_PROP_REMOVE_DUPLICATE_ICAO_ROWS() {
  static const st_prop_remove_duplicate_icao_rows instance;
  return instance.getValue();
}
// PROP_REMOVE_DUPLICATE_ICAO_ROWS <---

// ---> PROP_GROUP_DUPLICATES_BY_WAYPOINTS
typedef struct st_prop_group_duplicates_by_waypoints {
  std::string value =  "group_duplicates_by_waypoints"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_prop_group_duplicates_by_waypoints;
// -- getter -- 
static std::string get_PROP_GROUP_DUPLICATES_BY_WAYPOINTS() {
  static const st_prop_group_duplicates_by_waypoints instance;
  return instance.getValue();
}
// PROP_GROUP_DUPLICATES_BY_WAYPOINTS <---

// ---> PROP_WEATHER_USER_PICKED
typedef struct st_prop_weather_user_picked {
  std::string value =  "weather_user_picked"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_prop_weather_user_picked;
// -- getter -- 
static std::string get_PROP_WEATHER_USER_PICKED() {
  static const st_prop_weather_user_picked instance;
  return instance.getValue();
}
// PROP_WEATHER_USER_PICKED <---

// ---> PROP_WEATHER_CHANGE_MODE_USER_PICKED
typedef struct st_prop_weather_change_mode_user_picked {
  std::string value =  "weather_change_mode_user_picked"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_prop_weather_change_mode_user_picked;
// -- getter -- 
static std::string get_PROP_WEATHER_CHANGE_MODE_USER_PICKED() {
  static const st_prop_weather_change_mode_user_picked instance;
  return instance.getValue();
}
// PROP_WEATHER_CHANGE_MODE_USER_PICKED <---

// ---> PROP_ADD_DEFAULT_WEIGHTS_TO_PLANE
typedef struct st_prop_add_default_weights_to_plane {
  std::string value =  "add_default_weights_to_plane"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_prop_add_default_weights_to_plane;
// -- getter -- 
static std::string get_PROP_ADD_DEFAULT_WEIGHTS_TO_PLANE() {
  static const st_prop_add_default_weights_to_plane instance;
  return instance.getValue();
}
// PROP_ADD_DEFAULT_WEIGHTS_TO_PLANE <---

// ---> PROP_FROM_ICAO
typedef struct st_prop_from_icao {
  std::string value =  "fromICAO"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_prop_from_icao;
// -- getter -- 
static std::string get_PROP_FROM_ICAO() {
  static const st_prop_from_icao instance;
  return instance.getValue();
}
// PROP_FROM_ICAO <---

// ---> PROP_TO_ICAO
typedef struct st_prop_to_icao {
  std::string value =  "toICAO"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_prop_to_icao;
// -- getter -- 
static std::string get_PROP_TO_ICAO() {
  static const st_prop_to_icao instance;
  return instance.getValue();
}
// PROP_TO_ICAO <---

// ---> PROP_LIMIT
typedef struct st_prop_limit {
  std::string value =  "limit"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_prop_limit;
// -- getter -- 
static std::string get_PROP_LIMIT() {
  static const st_prop_limit instance;
  return instance.getValue();
}
// PROP_LIMIT <---

// ---> PROP_SORT_FPLN_BY
typedef struct st_prop_sort_fpln_by {
  std::string value =  "sort"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_prop_sort_fpln_by;
// -- getter -- 
static std::string get_PROP_SORT_FPLN_BY() {
  static const st_prop_sort_fpln_by instance;
  return instance.getValue();
}
// PROP_SORT_FPLN_BY <---


// ---> RANDOM_TEMPLATE_BLANK_4_UI
typedef struct st_random_template_blank_4_ui {
  std::string value =  "template_blank_4_ui.xml"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_random_template_blank_4_ui;
// -- getter -- 
static std::string get_RANDOM_TEMPLATE_BLANK_4_UI() {
  static const st_random_template_blank_4_ui instance;
  return instance.getValue();
}
// RANDOM_TEMPLATE_BLANK_4_UI <---

// ---> COORDINATES_IN_THE_GPS_S
typedef struct st_coordinates_in_the_gps_s {
  std::string value =  "Coordinates in GPS";
[[nodiscard]]  std::string getValue() const { return value; }
} st_coordinates_in_the_gps_s;
// -- getter -- 
static std::string get_COORDINATES_IN_THE_GPS_S() {
  static const st_coordinates_in_the_gps_s instance;
  return instance.getValue();
}
// COORDINATES_IN_THE_GPS_S <---

// ---> VALUE_STORE_CURRENT_WEATHER_DATAREFS
typedef struct st_value_store_current_weather_datarefs {
  std::string value =  "store_current_weather_datarefs"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_value_store_current_weather_datarefs;
// -- getter -- 
static std::string get_VALUE_STORE_CURRENT_WEATHER_DATAREFS() {
  static const st_value_store_current_weather_datarefs instance;
  return instance.getValue();
}
// VALUE_STORE_CURRENT_WEATHER_DATAREFS <---


// ---> ELEMENT_UI_PROPERTIES
typedef struct st_element_ui_properties {
  std::string value =  "ui_properties"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_element_ui_properties;
// -- getter -- 
static std::string get_ELEMENT_UI_PROPERTIES() {
  static const st_element_ui_properties instance;
  return instance.getValue();
}
// ELEMENT_UI_PROPERTIES <---

// ---> DB_AIRPORTS_XP
typedef struct st_db_airports_xp {
  std::string value =  "airports_xp.sqlite.db";
[[nodiscard]]  std::string getValue() const { return value; }
} st_db_airports_xp;
// -- getter -- 
static std::string get_DB_AIRPORTS_XP() {
  static const st_db_airports_xp instance;
  return instance.getValue();
}
// DB_AIRPORTS_XP <---

// ---> DB_AIRPORTS_XP2
typedef struct st_db_airports_xp2 {
  std::string value =  "airports_xp2.sqlite.db";
[[nodiscard]]  std::string getValue() const { return value; }
} st_db_airports_xp2;
// -- getter -- 
static std::string get_DB_AIRPORTS_XP2() {
  static const st_db_airports_xp2 instance;
  return instance.getValue();
}
// DB_AIRPORTS_XP2 <---

// ---> DB_STATS_XP
typedef struct st_db_stats_xp {
  std::string value =  "stats_xp.sqlite.db"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_db_stats_xp;
// -- getter -- 
static std::string get_DB_STATS_XP() {
  static const st_db_stats_xp instance;
  return instance.getValue();
}
// DB_STATS_XP <---

// ---> DB_FOLDER_NAME
typedef struct st_db_folder_name {
  std::string value =  "db"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_db_folder_name;
// -- getter -- 
static std::string get_DB_FOLDER_NAME() {
  static const st_db_folder_name instance;
  return instance.getValue();
}
// DB_FOLDER_NAME <---

// ---> DB_FILE_EXTENSION
typedef struct st_db_file_extension {
  std::string value =  ".db"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_db_file_extension;
// -- getter -- 
static std::string get_DB_FILE_EXTENSION() {
  static const st_db_file_extension instance;
  return instance.getValue();
}
// DB_FILE_EXTENSION <---

// ---> STATS_LANDING
typedef struct st_stats_landing {
  std::string value =  "landing"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_stats_landing;
// -- getter -- 
static std::string get_STATS_LANDING() {
  static const st_stats_landing instance;
  return instance.getValue();
}
// STATS_LANDING <---

// ---> STATS_TAKEOFF
typedef struct st_stats_takeoff {
  std::string value =  "takeoff"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_stats_takeoff;
// -- getter -- 
static std::string get_STATS_TAKEOFF() {
  static const st_stats_takeoff instance;
  return instance.getValue();
}
// STATS_TAKEOFF <---

// ---> STATS_TRANSITION
typedef struct st_stats_transition {
  std::string value =  "transition"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_stats_transition;
// -- getter -- 
static std::string get_STATS_TRANSITION() {
  static const st_stats_transition instance;
  return instance.getValue();
}
// STATS_TRANSITION <---

// ---> DEFAULT_OVERPASS_URL
typedef struct st_default_overpass_url {
  std::string value =  "https://lz4.overpass-api.de/api/interpreter"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_default_overpass_url;
// -- getter -- 
static std::string get_DEFAULT_OVERPASS_URL() {
  static const st_default_overpass_url instance;
  return instance.getValue();
}
// DEFAULT_OVERPASS_URL <---

// ---> ATTRIB_OSM_KEY
typedef struct st_attrib_osm_key {
  std::string value =  "k"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_attrib_osm_key;
// -- getter -- 
static std::string get_ATTRIB_OSM_KEY() {
  static const st_attrib_osm_key instance;
  return instance.getValue();
}
// ATTRIB_OSM_KEY <---

// ---> ATTRIB_OSM_VALUE
typedef struct st_attrib_osm_value {
  std::string value =  "v"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_attrib_osm_value;
// -- getter -- 
static std::string get_ATTRIB_OSM_VALUE() {
  static const st_attrib_osm_value instance;
  return instance.getValue();
}
// ATTRIB_OSM_VALUE <---

// ---> ELEMENT_NODE_OSM
typedef struct st_element_node_osm {
  std::string value =  "node"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_element_node_osm;
// -- getter -- 
static std::string get_ELEMENT_NODE_OSM() {
  static const st_element_node_osm instance;
  return instance.getValue();
}
// ELEMENT_NODE_OSM <---

// ---> ELEMENT_CENTER
typedef struct st_element_center {
  std::string value =  "center"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_element_center;
// -- getter -- 
static std::string get_ELEMENT_CENTER() {
  static const st_element_center instance;
  return instance.getValue();
}
// ELEMENT_CENTER <---

// ---> ELEMENT_WAY_OSM
typedef struct st_element_way_osm {
  std::string value =  "way"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_element_way_osm;
// -- getter -- 
static std::string get_ELEMENT_WAY_OSM() {
  static const st_element_way_osm instance;
  return instance.getValue();
}
// ELEMENT_WAY_OSM <---

// ---> ELEMENT_ND_OSM
typedef struct st_element_nd_osm {
  std::string value =  "nd"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_element_nd_osm;
// -- getter -- 
static std::string get_ELEMENT_ND_OSM() {
  static const st_element_nd_osm instance;
  return instance.getValue();
}
// ELEMENT_ND_OSM <---

// ---> ELEMENT_REL_OSM
typedef struct st_element_rel_osm {
  std::string value =  "rel"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_element_rel_osm;
// -- getter -- 
static std::string get_ELEMENT_REL_OSM() {
  static const st_element_rel_osm instance;
  return instance.getValue();
}
// ELEMENT_REL_OSM <---

// ---> ATTRIB_REF_OSM
typedef struct st_attrib_ref_osm {
  std::string value =  "ref"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_attrib_ref_osm;
// -- getter -- 
static std::string get_ATTRIB_REF_OSM() {
  static const st_attrib_ref_osm instance;
  return instance.getValue();
}
// ATTRIB_REF_OSM <---



// ---> ELEMENT_TIMER
typedef struct st_element_timer {
  std::string value =  "timer"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_element_timer;
// -- getter -- 
static std::string get_ELEMENT_TIMER() {
  static const st_element_timer instance;
  return instance.getValue();
}
// ELEMENT_TIMER <---

// ---> ATTRIB_FAIL_MSG
typedef struct st_attrib_fail_msg {
  std::string value =  "fail_msg"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_attrib_fail_msg;
// -- getter -- 
static std::string get_ATTRIB_FAIL_MSG() {
  static const st_attrib_fail_msg instance;
  return instance.getValue();
}
// ATTRIB_FAIL_MSG <---

// ---> ATTRIB_SUCCESS_MSG
typedef struct st_attrib_success_msg {
  std::string value =  "success_msg"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_attrib_success_msg;
// -- getter -- 
static std::string get_ATTRIB_SUCCESS_MSG() {
  static const st_attrib_success_msg instance;
  return instance.getValue();
}
// ATTRIB_SUCCESS_MSG <---

// ---> ATTRIB_RUN_UNTIL_LEG
typedef struct st_attrib_run_until_leg {
  std::string value =  "run_until_leg"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_attrib_run_until_leg;
// -- getter -- 
static std::string get_ATTRIB_RUN_UNTIL_LEG() {
  static const st_attrib_run_until_leg instance;
  return instance.getValue();
}
// ATTRIB_RUN_UNTIL_LEG <---

// ---> ATTRIB_FAIL_ON_TIMEOUT_B
typedef struct st_attrib_fail_on_timeout_b {
  std::string value =  "fail_on_timeout_b"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_attrib_fail_on_timeout_b;
// -- getter -- 
static std::string get_ATTRIB_FAIL_ON_TIMEOUT_B() {
  static const st_attrib_fail_on_timeout_b instance;
  return instance.getValue();
}
// ATTRIB_FAIL_ON_TIMEOUT_B <---

// ---> ATTRIB_STOP_ON_LEG_END_B
typedef struct st_attrib_stop_on_leg_end_b {
  std::string value =  "stop_on_leg_end_b"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_attrib_stop_on_leg_end_b;
// -- getter -- 
static std::string get_ATTRIB_STOP_ON_LEG_END_B() {
  static const st_attrib_stop_on_leg_end_b instance;
  return instance.getValue();
}
// ATTRIB_STOP_ON_LEG_END_B <---

// ---> ELEMENT_SCORING
typedef struct st_element_scoring {
  std::string value =  "scoring"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_element_scoring;
// -- getter -- 
static std::string get_ELEMENT_SCORING() {
  static const st_element_scoring instance;
  return instance.getValue();
}
// ELEMENT_SCORING <---

// ---> ELEMENT_PITCH
typedef struct st_element_pitch {
  std::string value =  "pitch"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_element_pitch;
// -- getter -- 
static std::string get_ELEMENT_PITCH() {
  static const st_element_pitch instance;
  return instance.getValue();
}
// ELEMENT_PITCH <---

// ---> ELEMENT_ROLL
typedef struct st_element_roll {
  std::string value =  "roll"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_element_roll;
// -- getter -- 
static std::string get_ELEMENT_ROLL() {
  static const st_element_roll instance;
  return instance.getValue();
}
// ELEMENT_ROLL <---

// ---> ELEMENT_GFORCE
typedef struct st_element_gforce {
  std::string value =  "gforce"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_element_gforce;
// -- getter -- 
static std::string get_ELEMENT_GFORCE() {
  static const st_element_gforce instance;
  return instance.getValue();
}
// ELEMENT_GFORCE <---

// ---> ELEMENT_CENTER_LINE
typedef struct st_element_center_line {
  std::string value =  "center_line"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_element_center_line;
// -- getter -- 
static std::string get_ELEMENT_CENTER_LINE() {
  static const st_element_center_line instance;
  return instance.getValue();
}
// ELEMENT_CENTER_LINE <---

// ---> ATTRIB_ZULU_TIME_SEC
typedef struct st_attrib_zulu_time_sec {
  std::string value =  "begin_zuluTime_sec"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_attrib_zulu_time_sec;
// -- getter -- 
static std::string get_ATTRIB_ZULU_TIME_SEC() {
  static const st_attrib_zulu_time_sec instance;
  return instance.getValue();
}
// ATTRIB_ZULU_TIME_SEC <---

// ---> ATTRIB_DAY_IN_YEAR
typedef struct st_attrib_day_in_year {
  std::string value =  "day_in_year"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_attrib_day_in_year;
// -- getter -- 
static std::string get_ATTRIB_DAY_IN_YEAR() {
  static const st_attrib_day_in_year instance;
  return instance.getValue();
}
// ATTRIB_DAY_IN_YEAR <---

// ---> ATTRIB_TOTAL_RUNNING_TIME_SEC_SINCE_SIM_START
typedef struct st_attrib_total_running_time_sec_since_sim_start {
  std::string value =  "total_running_time_sec_since_sim_start"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_attrib_total_running_time_sec_since_sim_start;
// -- getter -- 
static std::string get_ATTRIB_TOTAL_RUNNING_TIME_SEC_SINCE_SIM_START() {
  static const st_attrib_total_running_time_sec_since_sim_start instance;
  return instance.getValue();
}
// ATTRIB_TOTAL_RUNNING_TIME_SEC_SINCE_SIM_START <---

// ---> ATTRIB_RUN_CONTINUOUSLY
typedef struct st_attrib_run_continuously {
  std::string value =  "run_continuously"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_attrib_run_continuously;
// -- getter -- 
static std::string get_ATTRIB_RUN_CONTINUOUSLY() {
  static const st_attrib_run_continuously instance;
  return instance.getValue();
}
// ATTRIB_RUN_CONTINUOUSLY <---

// ---> ATTRIB_SECONDS_PASSED
typedef struct st_attrib_seconds_passed {
  std::string value =  "seconds_passed"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_attrib_seconds_passed;
// -- getter -- 
static std::string get_ATTRIB_SECONDS_PASSED() {
  static const st_attrib_seconds_passed instance;
  return instance.getValue();
}
// ATTRIB_SECONDS_PASSED <---

// ---> ATTRIB_BEGIN_TIME
typedef struct st_attrib_begin_time {
  std::string value =  "begin_time"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_attrib_begin_time;
// -- getter -- 
static std::string get_ATTRIB_BEGIN_TIME() {
  static const st_attrib_begin_time instance;
  return instance.getValue();
}
// ATTRIB_BEGIN_TIME <---

// ---> ATTRIB_TIMER_STATE
typedef struct st_attrib_timer_state {
  std::string value =  "timer_state"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_attrib_timer_state;
// -- getter -- 
static std::string get_ATTRIB_TIMER_STATE() {
  static const st_attrib_timer_state instance;
  return instance.getValue();
}
// ATTRIB_TIMER_STATE <---

// ---> ATTRIB_FIND
typedef struct st_attrib_find {
  std::string value =  "find"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_attrib_find;
// -- getter -- 
static std::string get_ATTRIB_FIND() {
  static const st_attrib_find instance;
  return instance.getValue();
}
// ATTRIB_FIND <---

// ---> ATTRIB_REPLACE_WITH
typedef struct st_attrib_replace_with {
  std::string value =  "replace_with"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_attrib_replace_with;
// -- getter -- 
static std::string get_ATTRIB_REPLACE_WITH() {
  static const st_attrib_replace_with instance;
  return instance.getValue();
}
// ATTRIB_REPLACE_WITH <---

// ---> TEMPLATE_INJECTED_FILE_NAME
typedef struct st_template_injected_file_name {
  std::string value =  "mx_tmp3981234.work.t"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_template_injected_file_name;
// -- getter -- 
static std::string get_TEMPLATE_INJECTED_FILE_NAME() {
  static const st_template_injected_file_name instance;
  return instance.getValue();
}
// TEMPLATE_INJECTED_FILE_NAME <---


// ---> ELEMENT_LNM_LittleNavmap
typedef struct st_element_lnm_littlenavmap {
  std::string value =  "LittleNavmap"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_element_lnm_littlenavmap;
// -- getter -- 
static std::string get_ELEMENT_LNM_LittleNavmap() {
  static const st_element_lnm_littlenavmap instance;
  return instance.getValue();
}
// ELEMENT_LNM_LittleNavmap <---

// ---> ELEMENT_LNM_Flightplan
typedef struct st_element_lnm_flightplan {
  std::string value =  "Flightplan"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_element_lnm_flightplan;
// -- getter -- 
static std::string get_ELEMENT_LNM_Flightplan() {
  static const st_element_lnm_flightplan instance;
  return instance.getValue();
}
// ELEMENT_LNM_Flightplan <---

// ---> ELEMENT_LNM_Waypoints
typedef struct st_element_lnm_waypoints {
  std::string value =  "Waypoints"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_element_lnm_waypoints;
// -- getter -- 
static std::string get_ELEMENT_LNM_Waypoints() {
  static const st_element_lnm_waypoints instance;
  return instance.getValue();
}
// ELEMENT_LNM_Waypoints <---

// ---> ELEMENT_LNM_Waypoint
typedef struct st_element_lnm_waypoint {
  std::string value =  "Waypoint"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_element_lnm_waypoint;
// -- getter -- 
static std::string get_ELEMENT_LNM_Waypoint() {
  static const st_element_lnm_waypoint instance;
  return instance.getValue();
}
// ELEMENT_LNM_Waypoint <---

// ---> ELEMENT_LNM_Departure
typedef struct st_element_lnm_departure {
  std::string value =  "Departure"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_element_lnm_departure;
// -- getter -- 
static std::string get_ELEMENT_LNM_Departure() {
  static const st_element_lnm_departure instance;
  return instance.getValue();
}
// ELEMENT_LNM_Departure <---

// ---> ELEMENT_LNM_Pos
typedef struct st_element_lnm_pos {
  std::string value =  "Pos"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_element_lnm_pos;
// -- getter -- 
static std::string get_ELEMENT_LNM_Pos() {
  static const st_element_lnm_pos instance;
  return instance.getValue();
}
// ELEMENT_LNM_Pos <---

// ---> ELEMENT_LNM_Heading
typedef struct st_element_lnm_heading {
  std::string value =  "Heading"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_element_lnm_heading;
// -- getter -- 
static std::string get_ELEMENT_LNM_Heading() {
  static const st_element_lnm_heading instance;
  return instance.getValue();
}
// ELEMENT_LNM_Heading <---

// ---> ELEMENT_LNM_Name
typedef struct st_element_lnm_name {
  std::string value =  "Name"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_element_lnm_name;
// -- getter -- 
static std::string get_ELEMENT_LNM_Name() {
  static const st_element_lnm_name instance;
  return instance.getValue();
}
// ELEMENT_LNM_Name <---

// ---> ELEMENT_LNM_Ident
typedef struct st_element_lnm_ident {
  std::string value =  "Ident"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_element_lnm_ident;
// -- getter -- 
static std::string get_ELEMENT_LNM_Ident() {
  static const st_element_lnm_ident instance;
  return instance.getValue();
}
// ELEMENT_LNM_Ident <---

// ---> ELEMENT_LNM_Region
typedef struct st_element_lnm_region {
  std::string value =  "Region"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_element_lnm_region;
// -- getter -- 
static std::string get_ELEMENT_LNM_Region() {
  static const st_element_lnm_region instance;
  return instance.getValue();
}
// ELEMENT_LNM_Region <---

// ---> ELEMENT_LNM_Type
typedef struct st_element_lnm_type {
  std::string value =  "Type"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_element_lnm_type;
// -- getter -- 
static std::string get_ELEMENT_LNM_Type() {
  static const st_element_lnm_type instance;
  return instance.getValue();
}
// ELEMENT_LNM_Type <---

// ---> ATTRIB_LNM_Lat
typedef struct st_attrib_lnm_lat {
  std::string value =  "Lat"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_attrib_lnm_lat;
// -- getter -- 
static std::string get_ATTRIB_LNM_Lat() {
  static const st_attrib_lnm_lat instance;
  return instance.getValue();
}
// ATTRIB_LNM_Lat <---

// ---> ATTRIB_LNM_Lon
typedef struct st_attrib_lnm_lon {
  std::string value =  "Lon"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_attrib_lnm_lon;
// -- getter -- 
static std::string get_ATTRIB_LNM_Lon() {
  static const st_attrib_lnm_lon instance;
  return instance.getValue();
}
// ATTRIB_LNM_Lon <---

// ---> ATTRIB_LNM_Alt
typedef struct st_attrib_lnm_alt {
  std::string value =  "Alt"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_attrib_lnm_alt;
// -- getter -- 
static std::string get_ATTRIB_LNM_Alt() {
  static const st_attrib_lnm_alt instance;
  return instance.getValue();
}
// ATTRIB_LNM_Alt <---

// ---> DREF_TARGET_POS_LAT_D
typedef struct st_dref_target_pos_lat_d {
  std::string value =  "HSL/Cargo/pos_lat_d"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_dref_target_pos_lat_d;
// -- getter -- 
static std::string get_DREF_TARGET_POS_LAT_D() {
  static const st_dref_target_pos_lat_d instance;
  return instance.getValue();
}
// DREF_TARGET_POS_LAT_D <---

// ---> DREF_TARGET_POS_LON_D
typedef struct st_dref_target_pos_lon_d {
  std::string value =  "HSL/Cargo/pos_lon_d";
[[nodiscard]]  std::string getValue() const { return value; }
} st_dref_target_pos_lon_d;
// -- getter -- 
static std::string get_DREF_TARGET_POS_LON_D() {
  static const st_dref_target_pos_lon_d instance;
  return instance.getValue();
}
// DREF_TARGET_POS_LON_D <---

// ---> DREF_TARGET_POS_ELEV_M_D
typedef struct st_dref_target_pos_elev_m_d {
  std::string value =  "HSL/Cargo/pos_elev_mt_d";
[[nodiscard]]  std::string getValue() const { return value; }
} st_dref_target_pos_elev_m_d;
// -- getter -- 
static std::string get_DREF_TARGET_POS_ELEV_M_D() {
  static const st_dref_target_pos_elev_m_d instance;
  return instance.getValue();
}
// DREF_TARGET_POS_ELEV_M_D <---

// ---> DREF_EXTERNAL_HSL_CARGO_SET_LATITUDE
typedef struct st_dref_external_hsl_cargo_set_latitude {
  std::string value =  "HSL/Cargo/SetLatitude"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_dref_external_hsl_cargo_set_latitude;
// -- getter -- 
static std::string get_DREF_EXTERNAL_HSL_CARGO_SET_LATITUDE() {
  static const st_dref_external_hsl_cargo_set_latitude instance;
  return instance.getValue();
}
// DREF_EXTERNAL_HSL_CARGO_SET_LATITUDE <---

// ---> DREF_EXTERNAL_HSL_CARGO_SET_LONGITUDE
typedef struct st_dref_external_hsl_cargo_set_longitude {
  std::string value =  "HSL/Cargo/SetLongitude";
[[nodiscard]]  std::string getValue() const { return value; }
} st_dref_external_hsl_cargo_set_longitude;
// -- getter -- 
static std::string get_DREF_EXTERNAL_HSL_CARGO_SET_LONGITUDE() {
  static const st_dref_external_hsl_cargo_set_longitude instance;
  return instance.getValue();
}
// DREF_EXTERNAL_HSL_CARGO_SET_LONGITUDE <---

// ---> DREF_EXTERNAL_HSL_CARGO_MASS
typedef struct st_dref_external_hsl_cargo_mass {
  std::string value =  "HSL/Cargo/Mass";
[[nodiscard]]  std::string getValue() const { return value; }
} st_dref_external_hsl_cargo_mass;
// -- getter -- 
static std::string get_DREF_EXTERNAL_HSL_CARGO_MASS() {
  static const st_dref_external_hsl_cargo_mass instance;
  return instance.getValue();
}
// DREF_EXTERNAL_HSL_CARGO_MASS <---

// ---> DREF_EXTERNAL_HSL_CARGO_FOLLOW_ONLY
typedef struct st_dref_external_hsl_cargo_follow_only {
  std::string value =  "HSL/Cargo/FollowOnly"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_dref_external_hsl_cargo_follow_only;
// -- getter -- 
static std::string get_DREF_EXTERNAL_HSL_CARGO_FOLLOW_ONLY() {
  static const st_dref_external_hsl_cargo_follow_only instance;
  return instance.getValue();
}
// DREF_EXTERNAL_HSL_CARGO_FOLLOW_ONLY <---

// ---> DREF_EXTERNAL_HSL_CARGO_CONNECTED
typedef struct st_dref_external_hsl_cargo_connected {
  std::string value =  "HSL/Cargo/Connected"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_dref_external_hsl_cargo_connected;
// -- getter -- 
static std::string get_DREF_EXTERNAL_HSL_CARGO_CONNECTED() {
  static const st_dref_external_hsl_cargo_connected instance;
  return instance.getValue();
}
// DREF_EXTERNAL_HSL_CARGO_CONNECTED <---

// ---> CMD_EXTERNAL_HSL_ENABLE_SLING_LOAD
typedef struct st_cmd_external_hsl_enable_sling_load {
  std::string value =  "HSL/Sling_Enable"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_cmd_external_hsl_enable_sling_load;
// -- getter -- 
static std::string get_CMD_EXTERNAL_HSL_ENABLE_SLING_LOAD() {
  static const st_cmd_external_hsl_enable_sling_load instance;
  return instance.getValue();
}
// CMD_EXTERNAL_HSL_ENABLE_SLING_LOAD <---

// ---> CMD_EXTERNAL_HSL_DISABLE_SLING_LOAD
typedef struct st_cmd_external_hsl_disable_sling_load {
  std::string value =  "HSL/Sling_Disable"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_cmd_external_hsl_disable_sling_load;
// -- getter -- 
static std::string get_CMD_EXTERNAL_HSL_DISABLE_SLING_LOAD() {
  static const st_cmd_external_hsl_disable_sling_load instance;
  return instance.getValue();
}
// CMD_EXTERNAL_HSL_DISABLE_SLING_LOAD <---

// ---> CMD_EXTERNAL_HSL_CARGO_LOAD_ON_COORDINATES
typedef struct st_cmd_external_hsl_cargo_load_on_coordinates {
  std::string value =  "HSL/Load_On_Coordinates"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_cmd_external_hsl_cargo_load_on_coordinates;
// -- getter -- 
static std::string get_CMD_EXTERNAL_HSL_CARGO_LOAD_ON_COORDINATES() {
  static const st_cmd_external_hsl_cargo_load_on_coordinates instance;
  return instance.getValue();
}
// CMD_EXTERNAL_HSL_CARGO_LOAD_ON_COORDINATES <---

// ---> CMD_EXTERNAL_HSL_UPDATE_OBJECTS_SLING_LOAD
typedef struct st_cmd_external_hsl_update_objects_sling_load {
  std::string value =  "HSL/UpdateObjects"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_cmd_external_hsl_update_objects_sling_load;
// -- getter -- 
static std::string get_CMD_EXTERNAL_HSL_UPDATE_OBJECTS_SLING_LOAD() {
  static const st_cmd_external_hsl_update_objects_sling_load instance;
  return instance.getValue();
}
// CMD_EXTERNAL_HSL_UPDATE_OBJECTS_SLING_LOAD <---

// ---> ELEMENT_FPLN
typedef struct st_element_fpln {
  std::string value =  "FPLN"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_element_fpln;
// -- getter -- 
static std::string get_ELEMENT_FPLN() {
  static const st_element_fpln instance;
  return instance.getValue();
}
// ELEMENT_FPLN <---

// ---> ELEMENT_BUFFERS
typedef struct st_element_buffers {
  std::string value =  "BUFFERS"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_element_buffers;
// -- getter -- 
static std::string get_ELEMENT_BUFFERS() {
  static const st_element_buffers instance;
  return instance.getValue();
}
// ELEMENT_BUFFERS <---

// ---> ELEMENT_BUFF
typedef struct st_element_buff {
  std::string value =  "BUFF"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_element_buff;
// -- getter -- 
static std::string get_ELEMENT_BUFF() {
  static const st_element_buff instance;
  return instance.getValue();
}
// ELEMENT_BUFF <---

// ---> ATTRIB_INDEX
typedef struct st_attrib_index {
  std::string value =  "index"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_attrib_index;
// -- getter -- 
static std::string get_ATTRIB_INDEX() {
  static const st_attrib_index instance;
  return instance.getValue();
}
// ATTRIB_INDEX <---


// ---> CONV_ATTRIB_isLeg
typedef struct st_conv_attrib_isleg {
  std::string value =  "isLeg"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_conv_attrib_isleg;
// -- getter -- 
static std::string get_CONV_ATTRIB_isLeg() {
  static const st_conv_attrib_isleg instance;
  return instance.getValue();
}
// CONV_ATTRIB_isLeg <---

// ---> CONV_ATTRIB_isLast
typedef struct st_conv_attrib_islast {
  std::string value =  "isLast"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_conv_attrib_islast;
// -- getter -- 
static std::string get_CONV_ATTRIB_isLast() {
  static const st_conv_attrib_islast instance;
  return instance.getValue();
}
// CONV_ATTRIB_isLast <---

// ---> CONV_ATTRIB_ignore_leg
typedef struct st_conv_attrib_ignore_leg {
  std::string value =  "ignore_leg"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_conv_attrib_ignore_leg;
// -- getter -- 
static std::string get_CONV_ATTRIB_ignore_leg() {
  static const st_conv_attrib_ignore_leg instance;
  return instance.getValue();
}
// CONV_ATTRIB_ignore_leg <---

// ---> CONV_ATTRIB_convertToBriefer
typedef struct st_conv_attrib_converttobriefer {
  std::string value =  "convertToBriefer"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_conv_attrib_converttobriefer;
// -- getter -- 
static std::string get_CONV_ATTRIB_convertToBriefer() {
  static const st_conv_attrib_converttobriefer instance;
  return instance.getValue();
}
// CONV_ATTRIB_convertToBriefer <---

// ---> CONV_ATTRIB_add_marker
typedef struct st_conv_attrib_add_marker {
  std::string value =  "add_marker"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_conv_attrib_add_marker;
// -- getter -- 
static std::string get_CONV_ATTRIB_add_marker() {
  static const st_conv_attrib_add_marker instance;
  return instance.getValue();
}
// CONV_ATTRIB_add_marker <---

// ---> CONV_ATTRIB_markerType
typedef struct st_conv_attrib_markertype {
  std::string value =  "markerType"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_conv_attrib_markertype;
// -- getter -- 
static std::string get_CONV_ATTRIB_markerType() {
  static const st_conv_attrib_markertype instance;
  return instance.getValue();
}
// CONV_ATTRIB_markerType <---

// ---> CONV_ATTRIB_iCurrentBuf
typedef struct st_conv_attrib_icurrentbuf {
  std::string value =  "iCurrentBuf"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_conv_attrib_icurrentbuf;
// -- getter -- 
static std::string get_CONV_ATTRIB_iCurrentBuf() {
  static const st_conv_attrib_icurrentbuf instance;
  return instance.getValue();
}
// CONV_ATTRIB_iCurrentBuf <---

// ---> CONV_ATTRIB_radius_to_display_marker
typedef struct st_conv_attrib_radius_to_display_marker {
  std::string value =  "radius_to_display_3D_marker_in_nm_f"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_conv_attrib_radius_to_display_marker;
// -- getter -- 
static std::string get_CONV_ATTRIB_radius_to_display_marker() {
  static const st_conv_attrib_radius_to_display_marker instance;
  return instance.getValue();
}
// CONV_ATTRIB_radius_to_display_marker <---

// ---> CONV_ATTRIB_on_ground
typedef struct st_conv_attrib_on_ground {
  std::string value =  "on_ground"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_conv_attrib_on_ground;
// -- getter -- 
static std::string get_CONV_ATTRIB_on_ground() {
  static const st_conv_attrib_on_ground instance;
  return instance.getValue();
}
// CONV_ATTRIB_on_ground <---

// ---> CONV_ATTRIB_elev_combo_picked_i
typedef struct st_conv_attrib_elev_combo_picked_i {
  std::string value =  "elev_combo_picked_i"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_conv_attrib_elev_combo_picked_i;
// -- getter -- 
static std::string get_CONV_ATTRIB_elev_combo_picked_i() {
  static const st_conv_attrib_elev_combo_picked_i instance;
  return instance.getValue();
}
// CONV_ATTRIB_elev_combo_picked_i <---

// ---> CONV_ATTRIB_slider_elev_value_i
typedef struct st_conv_attrib_slider_elev_value_i {
  std::string value =  "slider_elev_value_i"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_conv_attrib_slider_elev_value_i;
// -- getter -- 
static std::string get_CONV_ATTRIB_slider_elev_value_i() {
  static const st_conv_attrib_slider_elev_value_i instance;
  return instance.getValue();
}
// CONV_ATTRIB_slider_elev_value_i <---

// ---> CONV_ATTRIB_elev_rule_s
typedef struct st_conv_attrib_elev_rule_s {
  std::string value =  "elev_rule_s"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_conv_attrib_elev_rule_s;
// -- getter -- 
static std::string get_CONV_ATTRIB_elev_rule_s() {
  static const st_conv_attrib_elev_rule_s instance;
  return instance.getValue();
}
// CONV_ATTRIB_elev_rule_s <---

// ---> CONV_ATTRIB_trig_ui_type_combo_indx
typedef struct st_conv_attrib_trig_ui_type_combo_indx {
  std::string value =  "trig_ui_type_combo_indx"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_conv_attrib_trig_ui_type_combo_indx;
// -- getter -- 
static std::string get_CONV_ATTRIB_trig_ui_type_combo_indx() {
  static const st_conv_attrib_trig_ui_type_combo_indx instance;
  return instance.getValue();
}
// CONV_ATTRIB_trig_ui_type_combo_indx <---

// ---> CONV_ATTRIB_trig_ui_plane_pos_combo_indx
typedef struct st_conv_attrib_trig_ui_plane_pos_combo_indx {
  std::string value =  "trig_ui_plane_pos_combo_indx"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_conv_attrib_trig_ui_plane_pos_combo_indx;
// -- getter -- 
static std::string get_CONV_ATTRIB_trig_ui_plane_pos_combo_indx() {
  static const st_conv_attrib_trig_ui_plane_pos_combo_indx instance;
  return instance.getValue();
}
// CONV_ATTRIB_trig_ui_plane_pos_combo_indx <---

// ---> CONV_ATTRIB_trig_ui_elev_type_combo_indx
typedef struct st_conv_attrib_trig_ui_elev_type_combo_indx {
  std::string value =  "trig_ui_elev_type_combo_indx"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_conv_attrib_trig_ui_elev_type_combo_indx;
// -- getter -- 
static std::string get_CONV_ATTRIB_trig_ui_elev_type_combo_indx() {
  static const st_conv_attrib_trig_ui_elev_type_combo_indx instance;
  return instance.getValue();
}
// CONV_ATTRIB_trig_ui_elev_type_combo_indx <---


// ---> ELEMENT_QUERY
typedef struct st_element_query {
  std::string value =  "query"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_element_query;
// -- getter -- 
static std::string get_ELEMENT_QUERY() {
  static const st_element_query instance;
  return instance.getValue();
}
// ELEMENT_QUERY <---

// ---> SQLITE_OILRIG_SQLS
typedef struct st_sqlite_oilrig_sqls {
  std::string value =  "oilrig_sqls";
[[nodiscard]]  std::string getValue() const { return value; }
} st_sqlite_oilrig_sqls;
// -- getter -- 
static std::string get_SQLITE_OILRIG_SQLS() {
  static const st_sqlite_oilrig_sqls instance;
  return instance.getValue();
}
// SQLITE_OILRIG_SQLS <---

// ---> SQLITE_OSM_SQLS
typedef struct st_sqlite_osm_sqls {
  std::string value =  "osm_sqls";
[[nodiscard]]  std::string getValue() const { return value; }
} st_sqlite_osm_sqls;
// -- getter -- 
static std::string get_SQLITE_OSM_SQLS() {
  static const st_sqlite_osm_sqls instance;
  return instance.getValue();
}
// SQLITE_OSM_SQLS <---

// ---> SQLITE_NAVDATA_SQLS
typedef struct st_sqlite_navdata_sqls {
  std::string value =  "navdata_sqls";
[[nodiscard]]  std::string getValue() const { return value; }
} st_sqlite_navdata_sqls;
// -- getter -- 
static std::string get_SQLITE_NAVDATA_SQLS() {
  static const st_sqlite_navdata_sqls instance;
  return instance.getValue();
}
// SQLITE_NAVDATA_SQLS <---

// ---> SQLITE_ILS_SQLS
typedef struct st_sqlite_ils_sqls {
  std::string value =  "ils_sqls";
[[nodiscard]]  std::string getValue() const { return value; }
} st_sqlite_ils_sqls;
// -- getter -- 
static std::string get_SQLITE_ILS_SQLS() {
  static const st_sqlite_ils_sqls instance;
  return instance.getValue();
}
// SQLITE_ILS_SQLS <---

// ---> STORY_IMAGE_POS
typedef struct st_story_image_pos {
  std::string value =  "imgPos"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_story_image_pos;
// -- getter -- 
static std::string get_STORY_IMAGE_POS() {
  static const st_story_image_pos instance;
  return instance.getValue();
}
// STORY_IMAGE_POS <---

// ---> STORY_CHARACTER_CODE
typedef struct st_story_character_code {
  std::string value =  "storyCharacterCode"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_story_character_code;
// -- getter -- 
static std::string get_STORY_CHARACTER_CODE() {
  static const st_story_character_code instance;
  return instance.getValue();
}
// STORY_CHARACTER_CODE <---

// ---> STORY_TEXT
typedef struct st_story_text {
  std::string value =  "storyText"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_story_text;
// -- getter -- 
static std::string get_STORY_TEXT() {
  static const st_story_text instance;
  return instance.getValue();
}
// STORY_TEXT <---

// ---> STORY_PAUSE_TIME
typedef struct st_story_pause_time {
  std::string value =  "storyPauseTime"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_story_pause_time;
// -- getter -- 
static std::string get_STORY_PAUSE_TIME() {
  static const st_story_pause_time instance;
  return instance.getValue();
}
// STORY_PAUSE_TIME <---

// ---> ATTRIB_IGNORE_PUNCTUATIONS_B
typedef struct st_attrib_ignore_punctuations_b {
  std::string value =  "ignore_punctuations_b"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_attrib_ignore_punctuations_b;
// -- getter -- 
static std::string get_ATTRIB_IGNORE_PUNCTUATIONS_B() {
  static const st_attrib_ignore_punctuations_b instance;
  return instance.getValue();
}
// ATTRIB_IGNORE_PUNCTUATIONS_B <---

// ---> STORY_DEFAULT_TITLE_CODE
typedef struct st_story_default_title_code {
  std::string value =  "n/a"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_story_default_title_code;
// -- getter -- 
static std::string get_STORY_DEFAULT_TITLE_CODE() {
  static const st_story_default_title_code instance;
  return instance.getValue();
}
// STORY_DEFAULT_TITLE_CODE <---

// ---> STORY_DEFAULT_TITLE_NA
typedef struct st_story_default_title_na {
  std::string value =  "n/a"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_story_default_title_na;
// -- getter -- 
static std::string get_STORY_DEFAULT_TITLE_NA() {
  static const st_story_default_title_na instance;
  return instance.getValue();
}
// STORY_DEFAULT_TITLE_NA <---


// ---> vecStoryActions
typedef struct st_vecstoryactions {
  std::vector<const char *>  value =  { "[i]", "[p]", "[c]", "[h]", "[m]", "[t]" }; 
[[nodiscard]]  std::vector<const char *>  getValue() const { return value; }
} st_vecstoryactions;
// -- getter -- 
static std::vector<const char *>  get_vecStoryActions() {
  static const st_vecstoryactions instance;
  return instance.getValue();
}
// vecStoryActions <---

// ---> vecStoryPunctuation
typedef struct st_vecstorypunctuation {
  std::vector<const char *>  value =  { ">", "<" }; 
[[nodiscard]]  std::vector<const char *>  getValue() const { return value; }
} st_vecstorypunctuation;
// -- getter -- 
static std::vector<const char *>  get_vecStoryPunctuation() {
  static const st_vecstorypunctuation instance;
  return instance.getValue();
}
// vecStoryPunctuation <---



static constexpr char   STORY_ACTION_TEXT =  't';  // // action t - display text
static constexpr char   STORY_ACTION_IMG =  'i';  // // action i - load image
static constexpr char   STORY_ACTION_PAUSE =  'p';  // // action p - pause
static constexpr char   STORY_ACTION_HIDE =  'h';  // // action h - Hides main window, only as last line
static constexpr char   STORY_ACTION_MSGPAD =  'm';  // // action m - show text in message pad and as a text ?
static constexpr float  STORY_DEFAULT_TIME_BETWEEN_CHARS_SEC_F =  0.05f;
static constexpr float  STORY_DEFAULT_TIME_AFTER_PERIOD_SEC_F =  1.25f;
static constexpr float  STORY_DEFAULT_TIME_AFTER_COMMA_SEC_F =  0.60f;
static constexpr float  STORY_DEFAULT_PUNCTUATION_EXPONENT_F =  0.5f;
static constexpr float  DEFAULT_SKIP_MESSAGE_TIMER_IN_SEC_F =  3.0f;  // // v3.305.3 moved from uiImGuiBriefer->strct_flight_leg_info.strct_story_mode
static constexpr float  DEFAULT_SF_FADE_SECONDS_F =  6.0;  // // v3.306.1b
static constexpr const  char   *PROP_SECONDS_TO_RUN_I =  "seconds_to_run_i";  // // v3.305.3 interpolation properties
static constexpr const  char   *PROP_FOR_HOW_MANY_CYCLES_I =  "for_how_many_cycles_i";
static constexpr const  char   *PROP_CURRENTCYCLECOUNTER_I =  "currentCycleCounter_i";
static constexpr const  char   *PROP_TARGET_VALUE_D =  "target_value_d";
static constexpr const  char   *PROP_DELTA_SCALAR =  "delta_scalar";
static constexpr const  char   *PROP_DELTA_ARRAY_F =  "delta_array_f";
static constexpr const  char   *PROP_LAST_VALUE_ARRAY_D =  "last_value_array_d";
static constexpr const  char   *PROP_STARTING_SCALAR_VALUE_D =  "starting_scalar_value_d";
static constexpr const  char   *PROP_LAST_VALUE_D =  "last_value_d";
static constexpr const  char   *PROP_SECONDS_PASSED_F =  "seconds_passed_f";
static constexpr const  char   *PROP_TARGET_VALUES_S =  "target_values_s";
static constexpr const  char   *PROP_START_VALUES_S =  "start_values_s";
static constexpr const  char   *PROP_DELTA_VALUES_S =  "delta_values_s";
static constexpr const  char   *REPLACE_KEYWORD_PILOT_NAME =  "%pilot%";  // // v3.305.1 replace string used when reading a story mode message line and we want to replace it
static constexpr const  char   *REPLACE_KEYWORD_SELF =  "%self%";  // // v3.305.3 can be used with scripts as a parameter sending of a dynamic trigger that we don't know its name, like: "trigger name" from dynamic message.

// ---> ELEMENT_NOTES
typedef struct st_element_notes {
  std::string value =  "notes"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_element_notes;
// -- getter -- 
static std::string get_ELEMENT_NOTES() {
  static const st_element_notes instance;
  return instance.getValue();
}
// ELEMENT_NOTES <---

// ---> ELEMENT_STATION
typedef struct st_element_station {
  std::string value =  "station"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_element_station;
// -- getter -- 
static std::string get_ELEMENT_STATION() {
  static const st_element_station instance;
  return instance.getValue();
}
// ELEMENT_STATION <---

// ---> ATTRIB_TARGET_INVENTORY
typedef struct st_attrib_target_inventory {
  std::string value =  "target_inventory"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_attrib_target_inventory;
// -- getter -- 
static std::string get_ATTRIB_TARGET_INVENTORY() {
  static const st_attrib_target_inventory instance;
  return instance.getValue();
}
// ATTRIB_TARGET_INVENTORY <---

// ---> ATTRIB_FALLTHROUGH_B
typedef struct st_attrib_fallthrough_b {
  std::string value =  "fallthrough_b"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_attrib_fallthrough_b;
// -- getter -- 
static std::string get_ATTRIB_FALLTHROUGH_B() {
  static const st_attrib_fallthrough_b instance;
  return instance.getValue();
}
// ATTRIB_FALLTHROUGH_B <---


// Simbrief
// ---> ELEMENT_GENERAL
typedef struct st_element_general {
  std::string value =  "general"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_element_general;
// -- getter -- 
static std::string get_ELEMENT_GENERAL() {
  static const st_element_general instance;
  return instance.getValue();
}
// ELEMENT_GENERAL <---

// ---> ELEMENT_ROUTE
typedef struct st_element_route {
  std::string value =  "route"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_element_route;
// -- getter -- 
static std::string get_ELEMENT_ROUTE() {
  static const st_element_route instance;
  return instance.getValue();
}
// ELEMENT_ROUTE <---

// ---> ELEMENT_ROUTE_IFPS
typedef struct st_element_route_ifps {
  std::string value =  "route_ifps"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_element_route_ifps;
// -- getter -- 
static std::string get_ELEMENT_ROUTE_IFPS() {
  static const st_element_route_ifps instance;
  return instance.getValue();
}
// ELEMENT_ROUTE_IFPS <---

// ---> ELEMENT_ROUTE_NAVIGRAPH
typedef struct st_element_route_navigraph {
  std::string value =  "route_navigraph"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_element_route_navigraph;
// -- getter -- 
static std::string get_ELEMENT_ROUTE_NAVIGRAPH() {
  static const st_element_route_navigraph instance;
  return instance.getValue();
}
// ELEMENT_ROUTE_NAVIGRAPH <---

// ---> ELEMENT_FLIGHT_NUMBER
typedef struct st_element_flight_number {
  std::string value =  "flight_number"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_element_flight_number;
// -- getter -- 
static std::string get_ELEMENT_FLIGHT_NUMBER() {
  static const st_element_flight_number instance;
  return instance.getValue();
}
// ELEMENT_FLIGHT_NUMBER <---

// ---> ELEMENT_ORIGIN
typedef struct st_element_origin {
  std::string value =  "origin"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_element_origin;
// -- getter -- 
static std::string get_ELEMENT_ORIGIN() {
  static const st_element_origin instance;
  return instance.getValue();
}
// ELEMENT_ORIGIN <---

// ---> ELEMENT_ICAO_CODE
typedef struct st_element_icao_code {
  std::string value =  "icao_code"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_element_icao_code;
// -- getter -- 
static std::string get_ELEMENT_ICAO_CODE() {
  static const st_element_icao_code instance;
  return instance.getValue();
}
// ELEMENT_ICAO_CODE <---

// ---> ELEMENT_DESTINATION
typedef struct st_element_destination {
  std::string value =  "destination"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_element_destination;
// -- getter -- 
static std::string get_ELEMENT_DESTINATION() {
  static const st_element_destination instance;
  return instance.getValue();
}
// ELEMENT_DESTINATION <---

// ---> ELEMENT_PLAN_RWY
typedef struct st_element_plan_rwy {
  std::string value =  "plan_rwy"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_element_plan_rwy;
// -- getter -- 
static std::string get_ELEMENT_PLAN_RWY() {
  static const st_element_plan_rwy instance;
  return instance.getValue();
}
// ELEMENT_PLAN_RWY <---

// ---> ELEMENT_TRANS_ALT
typedef struct st_element_trans_alt {
  std::string value =  "trans_alt"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_element_trans_alt;
// -- getter -- 
static std::string get_ELEMENT_TRANS_ALT() {
  static const st_element_trans_alt instance;
  return instance.getValue();
}
// ELEMENT_TRANS_ALT <---

// static const ^std::string^ ATTRIB_FORMATED_NAV_POINTS ^ "formated_nav_points"; ^// v25.03.3 mission creation using FPLN
// ---> ROUTE_DCT
typedef struct st_route_dct {
  std::string value =  "DCT"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_route_dct;
// -- getter -- 
static std::string get_ROUTE_DCT() {
  static const st_route_dct instance;
  return instance.getValue();
}
// ROUTE_DCT <---



// OSM
// ---> ATTRIB_WEBOSM_OPTIMIZE
typedef struct st_attrib_webosm_optimize {
  std::string value =  "webosm_optimize"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_attrib_webosm_optimize;
// -- getter -- 
static std::string get_ATTRIB_WEBOSM_OPTIMIZE() {
  static const st_attrib_webosm_optimize instance;
  return instance.getValue();
}
// ATTRIB_WEBOSM_OPTIMIZE <---

// ---> DEFAULT_OVERPASS_WAYS_FILTER
typedef struct st_default_overpass_ways_filter {
  std::string value =  "[timeout:25];(way[highway~primary]({{bbox}});way[highway~secondary]({{bbox}});way[highway~tertiary]({{bbox}});way[highway~residential]({{bbox}});way[highway~service]({{bbox}});way[highway~living_street]({{bbox}});way[highway~track]({{bbox}}););out;"; 
[[nodiscard]]  std::string getValue() const { return value; }
} st_default_overpass_ways_filter;
// -- getter -- 
static std::string get_DEFAULT_OVERPASS_WAYS_FILTER() {
  static const st_default_overpass_ways_filter instance;
  return instance.getValue();
}
// DEFAULT_OVERPASS_WAYS_FILTER <---




	};// end class 
} // missionx namespace

#endif //MXCONST_H
