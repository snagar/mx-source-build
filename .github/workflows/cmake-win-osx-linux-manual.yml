# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: V2 - CMake on Win, Linux and MacOS platforms

on:
  push:
    tags:
      - '*'
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
jobs:

  build-linux:
    if: ( 1 == 2 )
    runs-on: ubuntu-22.04
    strategy:
      # Set fail-fast too false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false
      matrix:
        os: [ ubuntu-22.04 ]
        # build_type: [ Debug, Release ]
        c_compiler: [ gcc ]
        include:
          - os: ubuntu-22.04
            c_compiler: gcc
            cpp_compiler: g++


    steps:
      - uses: actions/checkout@v4

      - name: Set Linux reusable strings
        # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/cmake_build" >> "$GITHUB_OUTPUT"
          echo "target_folder=${{ github.workspace }}/release/lin_x64" >> "$GITHUB_OUTPUT"
          echo "plugin_name=missionx" >> "$GITHUB_OUTPUT"
          
          echo "OS Build: ${{ matrix.os }}"

      - name: Prepare Linux libraries
        shell: bash
        run: |
          set -x
          sudo apt-get -y install libarchive-zip-perl freeglut3-dev g++ libopenal1 libssl-dev libcurl4-openssl-dev
          TAG=${GITHUB_REF##*/}
          if [ ! -z "$TAG" ]; then
            echo "VERSION=$TAG" > version.mak
          fi

      - name: Check Linux Stats
        shell: bash
        run: |
          echo -e "\n---->\nnproc:"
          nproc
          echo -e "\nlscpu:"
          lscpu

      - name: Debug - Configure & Build Linux using CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: |
          #cmake -B ${{ steps.strings.outputs.build-output-dir }}/debug -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} -DCMAKE_BUILD_TYPE=Debug -S ${{ github.workspace }}
          # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
          # cmake --build ${{ steps.strings.outputs.build-output-dir }}/debug --config Debug -- -j 4

          #- name: Release - Configure & Build Linux using CMake
          #  run: |
          #    cmake -B ${{ steps.strings.outputs.build-output-dir }}/release -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} -DCMAKE_BUILD_TYPE=Release -S ${{ github.workspace }}
          #    # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
          #    cmake --build ${{ steps.strings.outputs.build-output-dir }}/release --config Release -- -j 4

          ## Dummy for tests
          mkdir -p ${{ steps.strings.outputs.build-output-dir }}/debug/
          touch ${{ steps.strings.outputs.build-output-dir }}/debug/${{ steps.strings.outputs.plugin_name }}.xpl
          mkdir -p ${{ steps.strings.outputs.build-output-dir }}/release/
          touch ${{ steps.strings.outputs.build-output-dir }}/release/${{ steps.strings.outputs.plugin_name }}.xpl

      - name: Post Build - Prepare binaries folder for before loading into artifact
        # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        shell: bash
        run: |
          echo -e "Output dir structure"
          find ${{ steps.strings.outputs.build-output-dir }} -maxdepth 4 -type f -name "*.xpl"
                    
          echo "make release folder"          
          mkdir -p ${{ steps.strings.outputs.target_folder }}
          
          echo -e "Compress debug binaries."
          7z a -t7z ${{ steps.strings.outputs.target_folder }}/${{ steps.strings.outputs.plugin_name }}.win.D.7z ${{ steps.strings.outputs.build-output-dir }}/debug/${{ steps.strings.outputs.plugin_name }}.xpl
          
          echo -e "Add Release binaries"        
          cp -p ${{ steps.strings.outputs.build-output-dir }}/release/${{ steps.strings.outputs.plugin_name }}.xpl ${{ steps.strings.outputs.target_folder }}/ 

          echo -e "Display Release Structure:"
          ls -ltR ${{ github.workspace }}/release
          

      - name: Upload Linux Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-linux
          path: |
            # ${{ steps.strings.outputs.target_folder }}/${{ steps.strings.outputs.plugin_name }}*
            ${{ github.workspace }}/release/*


  build-osx:
   if: ( 1 == 2 )
   runs-on: macos-14
   strategy:
     fail-fast: false
     matrix:
       os: [ macos-14 ]
       #build_type: [ Debug, Release ]
       build_type: [ Debug ]
       c_compiler: [ clang ]
       cpp_compiler: [ clang++ ]

   steps:
     - uses: actions/checkout@v4

     - name: Set MacOS reusable strings
       # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
       id: strings
       shell: bash
       run: |
         echo "build-output-dir=${{ github.workspace }}/cmake_build" >> "$GITHUB_OUTPUT"
         echo "target_folder=${{ github.workspace }}/release/mac_x64" >> "$GITHUB_OUTPUT"
         echo "plugin_name=missionx" >> "$GITHUB_OUTPUT"
         echo "OS Build: ${{ matrix.os }}"

     - name: Check MacOS Stats
       shell: bash
       run: |
         echo -e "\n---->\nhw.physicalcpu:"
         sysctl -n hw.physicalcpu
         echo -e "\nhw.logicalcpu:"
         sysctl -n hw.logicalcpu
         echo -e "\nSystem Profiler - Hardware:"
         system_profiler SPHardwareDataType
         echo -e "\n---------------------\n"

     - name: Configure & Build MacOS using CMake
       # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
       # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
       run: >
         # cmake -B ${{ steps.strings.outputs.build-output-dir }}/debug -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} -DCMAKE_BUILD_TYPE=Debug -S ${{ github.workspace }}
         # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
         # cmake --build ${{ steps.strings.outputs.build-output-dir }}/debug --config Debug -- -j 4

         #- name: Release - Configure & Build Linux using CMake
         #  run: |
         #    cmake -B ${{ steps.strings.outputs.build-output-dir }}/release -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} -DCMAKE_BUILD_TYPE=Release -S ${{ github.workspace }}
         #    # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
         #    cmake --build ${{ steps.strings.outputs.build-output-dir }}/release --config Release -- -j 4

         # Dummy for tests
         
         echo "Use touch to create dummy files:\n"
         
         mkdir -p ${{ steps.strings.outputs.build-output-dir }}/debug/
         
         touch ${{ steps.strings.outputs.build-output-dir }}/debug/${{ steps.strings.outputs.plugin_name }}.xpl
         
         mkdir -p ${{ steps.strings.outputs.build-output-dir }}/release/
         
         touch ${{ steps.strings.outputs.build-output-dir }}/release/${{ steps.strings.outputs.plugin_name }}.xpl
         
     
     

     - name: Post Build - Prepare binaries folder for before loading into artifact
       # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
       shell: bash
       run: |
         echo -e "Output dir structure"
         # find ${{ steps.strings.outputs.build-output-dir }} -maxdepth 4 -type f -name "*.xpl"
         find ${{ steps.strings.outputs.build-output-dir }}

         echo "make release folder"          
         mkdir -p ${{ steps.strings.outputs.target_folder }}

         echo -e "Compress debug binaries."
         zip -6 ${{ steps.strings.outputs.target_folder }}/${{ steps.strings.outputs.plugin_name }}.mac.D.zip ${{ steps.strings.outputs.build-output-dir }}/debug/${{ steps.strings.outputs.plugin_name }}.xpl

         echo -e "Add Release binaries"
         cp -p ${{ steps.strings.outputs.build-output-dir }}/release/${{ steps.strings.outputs.plugin_name }}.xpl ${{ steps.strings.outputs.target_folder }}/ 

         echo -e "Display Release Structure:"
         ls -ltR ${{ github.workspace }}/release
         

     - name: Upload MacOS Build Artifact
       uses: actions/upload-artifact@v4
       with:
        name: build-osx
        path: |          
          ${{ github.workspace }}/release/*
  

  build-win:
    #if: ( 1 == 2 )
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        os: [ windows-latest ]
        build_type: [ Debug, Release ]
        #build_type: [ Debug ]
        c_compiler: [ cl ]
        cpp_compiler: [ cl ]

    steps:
      - uses: actions/checkout@v4

      - name: Set Windows reusable strings
        # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}\cmake_build" >> "$GITHUB_OUTPUT"
          echo "target_folder=${{ github.workspace }}\release\win_x64" >> "$GITHUB_OUTPUT"
          echo "plugin_name=missionx" >> "$GITHUB_OUTPUT"
          echo "OS Build: ${{ matrix.os }}"


      - name: Check Windows Stats
        shell: cmd
        run: |
          systeminfo
          wmic cpu get Name, NumberOfCores, MaxClockSpeed
          # wmic NumberOfCores
          # echo "core-count=$( wmic NumberOfCores )" >> "$GITHUB_OUTPUT"
          echo "Workspace: ${{ github.workspace }} "
          DIR ${{ github.workspace }}


      - name: Debug - Configure & Build Windows Binaries using CMake
        shell: cmd
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: |
          cmake -B ${{ steps.strings.outputs.build-output-dir }}\debug -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} -DCMAKE_BUILD_TYPE=Debug -S ${{ github.workspace }}
          
          REM Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
          cmake --build ${{ steps.strings.outputs.build-output-dir }}\debug --config Debug -j 2
          

      - name: Release - Configure & Build Windows Binaries using CMake
        run: |
          cmake -B ${{ steps.strings.outputs.build-output-dir }}\release -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} -DCMAKE_BUILD_TYPE=Release -S ${{ github.workspace }}
          
          REM Build your program 
          cmake --build ${{ steps.strings.outputs.build-output-dir }}/release --config Release -j 2

          REM Dummy for tests purposes
          REM echo "Use touch to create dummy files:"
          REM mkdir ${{ steps.strings.outputs.build-output-dir }}\debug\
          REM echo > ${{ steps.strings.outputs.build-output-dir }}\debug\${{ steps.strings.outputs.plugin_name }}.xpl
          REM mkdir ${{ steps.strings.outputs.build-output-dir }}\release\
          REM echo > ${{ steps.strings.outputs.build-output-dir }}\release\${{ steps.strings.outputs.plugin_name }}.xpl

      - name: Post Build - Prepare binaries folder for before loading into artifact
        shell: cmd
        run: |
          echo "Output dir structure ${{ steps.strings.outputs.build-output-dir }}"          
          dir /S ${{ steps.strings.outputs.build-output-dir }}
          dir /S ${{ steps.strings.outputs.build-output-dir }} * | findstr -i "*.xpl"

          echo "make release folder"          
          md ${{ steps.strings.outputs.target_folder }}

          echo "Copy and rename debug binaries. We will compress it later on"
          copy /B ${{ steps.strings.outputs.build-output-dir }}\debug\${{ steps.strings.outputs.plugin_name }}.xpl ${{ steps.strings.outputs.target_folder }}\${{ steps.strings.outputs.plugin_name }}.xpl.D 

          echo "Add Release binaries"
          copy /B ${{ steps.strings.outputs.build-output-dir }}\release\${{ steps.strings.outputs.plugin_name }}.xpl ${{ steps.strings.outputs.target_folder }}\ 

          echo "Display Release Structure:"
          dir /S ${{ github.workspace }}\\release
          

      - name: Upload Windows Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-win
          path: |
            ${{ github.workspace }}/release/*