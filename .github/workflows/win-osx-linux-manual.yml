# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: V4 - CMake on Win, Linux and MacOS platforms
on:
  push:
    tags:
      - '*'
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  
jobs:
  build-linux:
    # if: ( 1 == 2 )
    runs-on: ubuntu-22.04
    strategy: # Set fail-fast too false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false
      matrix:
        os: [ubuntu-22.04]
        # build_type: [ Debug, Release ]
        build_type: [ Debug ]
        c_compiler: [gcc]
        include:
          - os: ubuntu-22.04
            c_compiler: gcc
            cpp_compiler: g++
    steps:
      - uses: actions/checkout@v4
      - name: Set Linux reusable strings
        # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/cmake_build" >> "$GITHUB_OUTPUT"
          echo "target_folder=${{ github.workspace }}/release/lin_x64" >> "$GITHUB_OUTPUT"
          echo "plugin_name=missionx" >> "$GITHUB_OUTPUT"
          
          echo "OS Build: ${{ matrix.os }}"
          
      - name: Prepare Linux libraries
        shell: bash
        run: |
          set -x
          sudo apt-get -y install libarchive-zip-perl freeglut3-dev g++ libopenal1 libssl-dev libcurl4-openssl-dev
          TAG=${GITHUB_REF##*/}
          if [ ! -z "$TAG" ]; then
            echo "VERSION=$TAG" > version.mak
          fi
          
      - name: Check Linux Stats
        shell: bash
        run: |
          echo -e "\n---->\nnproc:"
          nproc
          echo -e "\nlscpu:"
          lscpu
          
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      - name: Debug - Configure & Build Linux using CMake
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }} -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -S ${{ github.workspace }}

      - name: Build
        # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }} -- -j 4
      
      - name: Post Build - Prepare binaries folder for before loading into artifact
        shell: bash
        run: |
          echo "prepare release folder"
          mkdir -p ${{ steps.strings.outputs.target_folder }}
          
          echo -e "Output directory structure"
          find ${{ steps.strings.outputs.build-output-dir }} -maxdepth 2 -type f -name "*.xpl"
          # find ${{ steps.strings.outputs.build-output-dir }}
          
          echo -e "\nChange directory to build folder:\n"
          cd ${{ steps.strings.outputs.build-output-dir }}
          echo -e "--->"
          ls -l
          echo "<--- List of the files in the output dir\n"
          if [[ "${{ matrix.build_type }}" == "Release" ]]; then
            echo -e "Coping the Release binaries"
            cp "${{ steps.strings.outputs.plugin_name }}.xpl" "${{ steps.strings.outputs.target_folder }}/"
            ls -l ${{ steps.strings.outputs.target_folder }}
          else
            echo -e "Coping the Debug binaries"
          
            ls -l
            zip -6 "${{ steps.strings.outputs.target_folder }}/${{ steps.strings.outputs.plugin_name }}.lin.D.zip" ${{ steps.strings.outputs.plugin_name }}.xpl
            ls -l ${{ steps.strings.outputs.target_folder }}
          fi
          
          echo -e "Display Release Structure:"
          ls -ltR ${{ github.workspace }}/release

      - name: Upload Linux Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-linux-${{ matrix.build_type }}
          path: |
            ${{ github.workspace }}/release/*
            
            
            
  build-osx:
    # if: ( 1 == 2 )
    runs-on: macos-14
    strategy:
      fail-fast: false
      matrix:
        os: [macos-14]
        build_type: [ Debug, Release ]
        #build_type: [Debug]
        c_compiler: [clang]
        cpp_compiler: [clang++]
    steps:
      - uses: actions/checkout@v4
      - name: Set MacOS reusable strings
        # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
        
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/cmake_build" >> "$GITHUB_OUTPUT"
          echo "target_folder=${{ github.workspace }}/release/mac_x64" >> "$GITHUB_OUTPUT"
          echo "plugin_name=missionx" >> "$GITHUB_OUTPUT"
          
          echo "OS Build: ${{ matrix.os }}"
          
      - name: Check MacOS Stats
        shell: bash
        run: |
          echo -e "\n---->\nhw.physicalcpu:"
          sysctl -n hw.physicalcpu
          echo -e "\nhw.logicalcpu:"
          sysctl -n hw.logicalcpu
          echo -e "\nSystem Profiler - Hardware:"
          system_profiler SPHardwareDataType
          echo -e "\n---------------------\n"
      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }} -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -S ${{ github.workspace }}
      
      - name: Build
        # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }} -- -j 4

      - name: Post Build - Prepare binaries folder for before loading into artifact
        shell: bash
        run: |
          echo "prepare release folder"
          mkdir -p ${{ steps.strings.outputs.target_folder }}
          
          echo -e "Output directory structure"
          find ${{ steps.strings.outputs.build-output-dir }} -maxdepth 2 -type f -name "*.xpl"
          # find ${{ steps.strings.outputs.build-output-dir }}
          
          echo -e "\nChange directory to build folder:\n"
          cd ${{ steps.strings.outputs.build-output-dir }}
          echo -e "--->"
          ls -l
          echo "<--- List of the files in the output dir\n"
          if [[ "${{ matrix.build_type }}" == "Release" ]]; then
            echo -e "Coping the Release binaries"
            cp "${{ steps.strings.outputs.plugin_name }}.xpl" "${{ steps.strings.outputs.target_folder }}/"
            ls -l ${{ steps.strings.outputs.target_folder }}
          
          else
          
            echo -e "Coping the Debug binaries"
            ls -l
          
            zip -6 "${{ steps.strings.outputs.target_folder }}/${{ steps.strings.outputs.plugin_name }}.mac.D.zip" ${{ steps.strings.outputs.plugin_name }}.xpl
            ls -l ${{ steps.strings.outputs.target_folder }}
          fi
          
          echo -e "Display Release Structure:"
          ls -ltR ${{ github.workspace }}/release
          
          
      - name: Upload MacOS Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-osx-${{ matrix.build_type }}
          path: |
            ${{ github.workspace }}/release/*
            
            
            
  build-win:
    if: ( 1 == 2 )
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest]
        #build_type: [ Debug, Release ]
        
        build_type: [Debug]
        c_compiler: [cl]
        cpp_compiler: [cl]
    steps:
      - uses: actions/checkout@v4
      - name: Set Windows reusable strings
        # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
        
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}\cmake_build" >> "$GITHUB_OUTPUT"
          echo "target_folder=${{ github.workspace }}\release\win_x64" >> "$GITHUB_OUTPUT"
          echo "plugin_name=missionx" >> "$GITHUB_OUTPUT"
          echo "OS Build: ${{ matrix.os }}"
      - name: Check Windows Stats
        shell: cmd
        run: |
          systeminfo
          wmic cpu get Name, NumberOfCores, MaxClockSpeed
          REM wmic NumberOfCores
          REM echo "core-count=$( wmic NumberOfCores )" >> "$GITHUB_OUTPUT"
          echo "Workspace: ${{ github.workspace }} "
          DIR ${{ github.workspace }}
      - name: Configure & Build Windows Binaries using CMake
        shell: cmd
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: "echo \"Prepare CMake Build ${{ matrix.build_type }}\"\ncmake -B ${{ steps.strings.outputs.build-output-dir }} -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -S ${{ github.workspace }}          \n\nREM Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).\necho \"Running CMake Build\"\ncmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }} -j 2\n"
      - name: Post Build - Prepare binaries folder prior to loading into artifact
        shell: cmd
        run: "echo \"Output Folder Tree and Files in '${{ steps.strings.outputs.build-output-dir }}' folder:\"          \ndir /S ${{ steps.strings.outputs.build-output-dir }}          \nREM for /R \"${{ steps.strings.outputs.build-output-dir }}\" \"%a\" IN (*.xpl) DO echo \"%a\"\n\n\necho \"make release folder\"          \nmd ${{ steps.strings.outputs.target_folder }}\n\necho \"Copy all \".xpl\" files to release folder:\"\nIF \"${{ matrix.build_type }}\" == \"Release\" (\n   echo \"Coping the Release binaries\"\n   echo copy /B /Y \"${{ steps.strings.outputs.build-output-dir }}\\Release\\${{ steps.strings.outputs.plugin_name }}.xpl\" \"${{ steps.strings.outputs.target_folder }}\\\" \n   copy /B /Y \"${{ steps.strings.outputs.build-output-dir }}\\Release\\${{ steps.strings.outputs.plugin_name }}.xpl\" \"${{ steps.strings.outputs.target_folder }}\\\"\n) ELSE (\n  echo \"Coping the Debug binaries\"\necho copy /B /Y \"${{ steps.strings.outputs.build-output-dir }}\\Debug\\${{ steps.strings.outputs.plugin_name }}.xpl\" \"${{ steps.strings.outputs.target_folder }}\\${{ steps.strings.outputs.plugin_name }}.xpl.D\" \n  copy /B /Y \"${{ steps.strings.outputs.build-output-dir }}\\Debug\\${{ steps.strings.outputs.plugin_name }}.xpl\" \"${{ steps.strings.outputs.target_folder }}\\${{ steps.strings.outputs.plugin_name }}.xpl.D\"\n  copy /B /Y \"${{ steps.strings.outputs.build-output-dir }}\\Debug\\*.xpl\" \"${{ steps.strings.outputs.target_folder }}\\${{ steps.strings.outputs.plugin_name }}.xpl.D\"\n)\necho \"Display Release Structure:\"\ndir /S ${{ steps.strings.outputs.build-output-dir }}\\${{ matrix.build_type }}\ndir /S ${{ steps.strings.outputs.target_folder }}\n\nREM for /R \"${{ steps.strings.outputs.build-output-dir }}\" \"%a\" IN (missionx.xpl) DO copy /B /Y \"%a\" \"${{ steps.strings.outputs.target_folder }}/missionx.xpl.D\"\n"
      - name: Upload Windows Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-win
          path: |-
            ${{ github.workspace }}/release/*
